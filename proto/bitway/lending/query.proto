syntax = "proto3";
package bitway.lending;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "bitway/lending/params.proto";
import "bitway/lending/lending.proto";

option go_package = "github.com/bitwaylabs/bitway/x/lending/types";

// Query defines the gRPC querier service.
service Query {
    // Params queries the parameters of the module.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/bitway/lending/params";
    }

    rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
        option (google.api.http).get = "/bitway/lending/pools/{id}";
    }

    rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
        option (google.api.http).get = "/bitway/lending/pools";
    }

    rpc PoolExchangeRate(QueryPoolExchangeRateRequest) returns (QueryPoolExchangeRateResponse) {
        option (google.api.http).get = "/bitway/lending/pool/exchange_rate";
    }

    rpc CollateralAddress(QueryCollateralAddressRequest) returns (QueryCollateralAddressResponse) {
        option (google.api.http).get = "/bitway/lending/collateral/address";
    }

    rpc LiquidationPrice(QueryLiquidationPriceRequest) returns (QueryLiquidationPriceResponse) {
        option (google.api.http).get = "/bitway/lending/liquidation/price";
    }

    rpc DlcEventCount(QueryDlcEventCountRequest) returns (QueryDlcEventCountResponse) {
        option (google.api.http).get = "/bitway/lending/dlc/event/count";
    }

    rpc Loan(QueryLoanRequest) returns (QueryLoanResponse) {
        option (google.api.http).get = "/bitway/lending/loans/{id}";
    }

    rpc Loans(QueryLoansRequest) returns (QueryLoansResponse) {
        option (google.api.http).get = "/bitway/lending/loans";
    }

    rpc LoansByAddress(QueryLoansByAddressRequest) returns (QueryLoansByAddressResponse) {
        option (google.api.http).get = "/bitway/lending/loans/address/{address}";
    }

    rpc LoansByOracle(QueryLoansByOracleRequest) returns (QueryLoansByOracleResponse) {
        option (google.api.http).get = "/bitway/lending/loans/oracle/{oracle_pubkey}";
    }

    rpc LoanCetInfos(QueryLoanCetInfosRequest) returns (QueryLoanCetInfosResponse) {
        option (google.api.http).get = "/bitway/lending/loan/cet/infos";
    }

    rpc LoanDlcMeta(QueryLoanDlcMetaRequest) returns (QueryLoanDlcMetaResponse) {
        option (google.api.http).get = "/bitway/lending/loan/dlc/meta";
    }

    rpc LoanAuthorization(QueryLoanAuthorizationRequest) returns (QueryLoanAuthorizationResponse) {
        option (google.api.http).get = "/bitway/lending/loan/authorization";
    }

    rpc LoanDeposits(QueryLoanDepositsRequest) returns (QueryLoanDepositsResponse) {
        option (google.api.http).get = "/bitway/lending/loan/deposits";
    }

    rpc Redemption(QueryRedemptionRequest) returns (QueryRedemptionResponse) {
        option (google.api.http).get = "/bitway/lending/loan/collateral/redemption";
    }

    rpc Repayment(QueryRepaymentRequest) returns (QueryRepaymentResponse) {
        option (google.api.http).get = "/bitway/lending/loan/repayment";
    }

    rpc CurrentInterest(QueryCurrentInterestRequest) returns (QueryCurrentInterestResponse) {
        option (google.api.http).get = "/bitway/lending/loan/current_interest";
    }

    rpc Referrers(QueryReferrersRequest) returns (QueryReferrersResponse) {
        option (google.api.http).get = "/bitway/lending/referrers";
    }
}

// QueryPoolRequest is request type for the Query/Pool RPC method.
message QueryPoolRequest {
    string id = 1;
}

// QueryPoolResponse is response type for the Query/Pool RPC method.
message QueryPoolResponse {
    LendingPool pool = 1;
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
message QueryPoolsRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPoolsResponse is response type for the Query/Pools RPC method.
message QueryPoolsResponse {
    repeated LendingPool pools = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPoolExchangeRateRequest is request type for the Query/PoolExchangeRate RPC method.
message QueryPoolExchangeRateRequest {
    string pool_id = 1;
}

// QueryPoolExchangeRateResponse is response type for the Query/PoolExchangeRate RPC method.
message QueryPoolExchangeRateResponse {
    string exchange_rate = 1;
}

message QueryLiquidationPriceRequest {
    string pool_id = 1;
    string collateral_amount = 2;
    string borrow_amount = 3;
    int64 maturity = 4;
}

message QueryLiquidationPriceResponse {
    string price = 1;
    string pair = 2;
}

message QueryDlcEventCountRequest {}

message QueryDlcEventCountResponse {
   uint64 count = 1;
}

message QueryLoanCetInfosRequest {
    string loan_id = 1;
    string collateral_amount = 2;
}

message QueryLoanCetInfosResponse {
    CetInfo liquidation_cet_info = 1;
    CetInfo default_liquidation_cet_info = 2;
    CetInfo repayment_cet_info = 3;
}

message QueryCollateralAddressRequest{
    string borrower_pubkey = 1;
    string borrower_auth_pubkey = 2;
    string dcm_pubkey = 3 [(gogoproto.customname) = "DCMPubKey"];
    uint64 maturity_time = 4;
}

message QueryCollateralAddressResponse{
    string address = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {
}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryLoanRequest is request type for the Query/Loan RPC method.
message QueryLoanRequest {
    string id = 1;
}

// QueryLoanResponse is response type for the Query/Loan RPC method.
message QueryLoanResponse {
    Loan loan = 1;
}

// QueryLoansRequest is request type for the Query/Loans RPC method.
message QueryLoansRequest {
    LoanStatus status = 1;
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryLoansResponse is response type for the Query/Loans RPC method.
message QueryLoansResponse {
    repeated Loan loans = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLoansByAddressRequest is request type for the Query/LoansByAddress RPC method.
message QueryLoansByAddressRequest {
    string address = 1;
    LoanStatus status = 2;
    cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryLoansByAddressResponse is response type for the Query/LoansByAddress RPC method.
message QueryLoansByAddressResponse {
    repeated Loan loans = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLoansByOracleRequest is request type for the Query/LoansByOracle RPC method.
message QueryLoansByOracleRequest {
    string oracle_pubkey = 1;
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryLoansByOracleResponse is response type for the Query/LoansByOracle RPC method.
message QueryLoansByOracleResponse {
    repeated Loan loans = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLoanDlcMetaRequest is request type for the Query/LoanDlcMeta RPC method.
message QueryLoanDlcMetaRequest {
    string loan_id = 1;
}

// QueryLoanDlcMetaResponse is response type for the Query/LoanDlcMeta RPC method.
message QueryLoanDlcMetaResponse {
    DLCMeta dlc_meta = 1;
}

// QueryLoanAuthorizationRequest is request type for the Query/LoanAuthorization RPC method.
message QueryLoanAuthorizationRequest {
    string loan_id = 1;
    uint64 id = 2;
}

// QueryLoanAuthorizationResponse is response type for the Query/LoanAuthorization RPC method.
message QueryLoanAuthorizationResponse {
    repeated DepositLog deposits = 1;
    AuthorizationStatus status = 2;
}

message QueryLoanDepositsRequest {
    string loan_id = 1;
}

message QueryLoanDepositsResponse {
    repeated DepositLog deposits = 1;
}

// QueryRedemptionRequest is request type for the Query/Redemption RPC method.
message QueryRedemptionRequest {
    uint64 id = 1;
}

// QueryRedemptionResponse is response type for the Query/Redemption RPC method.
message QueryRedemptionResponse {
    Redemption redemption = 1;
}

message QueryRepaymentRequest {
    string loan_id = 1;
}

message QueryRepaymentResponse {
    Repayment repayment = 1;
}

message QueryCurrentInterestRequest {
    string loan_id = 1;
}

message QueryCurrentInterestResponse {
    cosmos.base.v1beta1.Coin interest = 1 [(gogoproto.nullable) = false];
}

message QueryReferrersRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryReferrersResponse {
    repeated Referrer referrers = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
