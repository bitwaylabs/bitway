// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/farming/farming.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Epoch status
type EpochStatus int32

const (
	EpochStatus_EPOCH_STATUS_PENDING EpochStatus = 0
	EpochStatus_EPOCH_STATUS_STARTED EpochStatus = 1
	EpochStatus_EPOCH_STATUS_ENDED   EpochStatus = 2
)

var EpochStatus_name = map[int32]string{
	0: "EPOCH_STATUS_PENDING",
	1: "EPOCH_STATUS_STARTED",
	2: "EPOCH_STATUS_ENDED",
}

var EpochStatus_value = map[string]int32{
	"EPOCH_STATUS_PENDING": 0,
	"EPOCH_STATUS_STARTED": 1,
	"EPOCH_STATUS_ENDED":   2,
}

func (x EpochStatus) String() string {
	return proto.EnumName(EpochStatus_name, int32(x))
}

func (EpochStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{0}
}

// Staking status
type StakingStatus int32

const (
	StakingStatus_STAKING_STATUS_UNSPECIFIED StakingStatus = 0
	StakingStatus_STAKING_STATUS_STAKED      StakingStatus = 1
	StakingStatus_STAKING_STATUS_UNLOCKED    StakingStatus = 2
	StakingStatus_STAKING_STATUS_UNSTAKED    StakingStatus = 3
)

var StakingStatus_name = map[int32]string{
	0: "STAKING_STATUS_UNSPECIFIED",
	1: "STAKING_STATUS_STAKED",
	2: "STAKING_STATUS_UNLOCKED",
	3: "STAKING_STATUS_UNSTAKED",
}

var StakingStatus_value = map[string]int32{
	"STAKING_STATUS_UNSPECIFIED": 0,
	"STAKING_STATUS_STAKED":      1,
	"STAKING_STATUS_UNLOCKED":    2,
	"STAKING_STATUS_UNSTAKED":    3,
}

func (x StakingStatus) String() string {
	return proto.EnumName(StakingStatus_name, int32(x))
}

func (StakingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{1}
}

// Epoch defines the epoch
type Epoch struct {
	Id            uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime     time.Time      `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime       time.Time      `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	TotalStakings []TotalStaking `protobuf:"bytes,4,rep,name=total_stakings,json=totalStakings,proto3" json:"total_stakings"`
	Status        EpochStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=bitway.farming.EpochStatus" json:"status,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Epoch) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Epoch) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Epoch) GetTotalStakings() []TotalStaking {
	if m != nil {
		return m.TotalStakings
	}
	return nil
}

func (m *Epoch) GetStatus() EpochStatus {
	if m != nil {
		return m.Status
	}
	return EpochStatus_EPOCH_STATUS_PENDING
}

// Staking defines the staking
type Staking struct {
	Id              uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address         string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount          types.Coin                  `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	LockDuration    time.Duration               `protobuf:"bytes,4,opt,name=lock_duration,json=lockDuration,proto3,stdduration" json:"lock_duration"`
	LockMultiplier  cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=lock_multiplier,json=lockMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"lock_multiplier"`
	EffectiveAmount types.Coin                  `protobuf:"bytes,6,opt,name=effective_amount,json=effectiveAmount,proto3" json:"effective_amount"`
	PendingRewards  types.Coin                  `protobuf:"bytes,7,opt,name=pending_rewards,json=pendingRewards,proto3" json:"pending_rewards"`
	TotalRewards    types.Coin                  `protobuf:"bytes,8,opt,name=total_rewards,json=totalRewards,proto3" json:"total_rewards"`
	StartTime       time.Time                   `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	Status          StakingStatus               `protobuf:"varint,10,opt,name=status,proto3,enum=bitway.farming.StakingStatus" json:"status,omitempty"`
}

func (m *Staking) Reset()         { *m = Staking{} }
func (m *Staking) String() string { return proto.CompactTextString(m) }
func (*Staking) ProtoMessage()    {}
func (*Staking) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{1}
}
func (m *Staking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staking.Merge(m, src)
}
func (m *Staking) XXX_Size() int {
	return m.Size()
}
func (m *Staking) XXX_DiscardUnknown() {
	xxx_messageInfo_Staking.DiscardUnknown(m)
}

var xxx_messageInfo_Staking proto.InternalMessageInfo

func (m *Staking) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Staking) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Staking) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Staking) GetLockDuration() time.Duration {
	if m != nil {
		return m.LockDuration
	}
	return 0
}

func (m *Staking) GetEffectiveAmount() types.Coin {
	if m != nil {
		return m.EffectiveAmount
	}
	return types.Coin{}
}

func (m *Staking) GetPendingRewards() types.Coin {
	if m != nil {
		return m.PendingRewards
	}
	return types.Coin{}
}

func (m *Staking) GetTotalRewards() types.Coin {
	if m != nil {
		return m.TotalRewards
	}
	return types.Coin{}
}

func (m *Staking) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Staking) GetStatus() StakingStatus {
	if m != nil {
		return m.Status
	}
	return StakingStatus_STAKING_STATUS_UNSPECIFIED
}

// TotalStaking defines total staking per denom
type TotalStaking struct {
	Denom           string     `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount          types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	EffectiveAmount types.Coin `protobuf:"bytes,3,opt,name=effective_amount,json=effectiveAmount,proto3" json:"effective_amount"`
}

func (m *TotalStaking) Reset()         { *m = TotalStaking{} }
func (m *TotalStaking) String() string { return proto.CompactTextString(m) }
func (*TotalStaking) ProtoMessage()    {}
func (*TotalStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{2}
}
func (m *TotalStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalStaking.Merge(m, src)
}
func (m *TotalStaking) XXX_Size() int {
	return m.Size()
}
func (m *TotalStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalStaking.DiscardUnknown(m)
}

var xxx_messageInfo_TotalStaking proto.InternalMessageInfo

func (m *TotalStaking) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TotalStaking) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *TotalStaking) GetEffectiveAmount() types.Coin {
	if m != nil {
		return m.EffectiveAmount
	}
	return types.Coin{}
}

// AccountRewardPerEpoch defines the account reward per epoch
type AccountRewardPerEpoch struct {
	Address    string                        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Stakings   []TotalStaking                `protobuf:"bytes,2,rep,name=stakings,proto3" json:"stakings"`
	Shares     []cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,rep,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
	TotalShare cosmossdk_io_math.LegacyDec   `protobuf:"bytes,4,opt,name=total_share,json=totalShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_share"`
	Reward     types.Coin                    `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward"`
}

func (m *AccountRewardPerEpoch) Reset()         { *m = AccountRewardPerEpoch{} }
func (m *AccountRewardPerEpoch) String() string { return proto.CompactTextString(m) }
func (*AccountRewardPerEpoch) ProtoMessage()    {}
func (*AccountRewardPerEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac00086219418b14, []int{3}
}
func (m *AccountRewardPerEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRewardPerEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRewardPerEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRewardPerEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRewardPerEpoch.Merge(m, src)
}
func (m *AccountRewardPerEpoch) XXX_Size() int {
	return m.Size()
}
func (m *AccountRewardPerEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRewardPerEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRewardPerEpoch proto.InternalMessageInfo

func (m *AccountRewardPerEpoch) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountRewardPerEpoch) GetStakings() []TotalStaking {
	if m != nil {
		return m.Stakings
	}
	return nil
}

func (m *AccountRewardPerEpoch) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("bitway.farming.EpochStatus", EpochStatus_name, EpochStatus_value)
	proto.RegisterEnum("bitway.farming.StakingStatus", StakingStatus_name, StakingStatus_value)
	proto.RegisterType((*Epoch)(nil), "bitway.farming.Epoch")
	proto.RegisterType((*Staking)(nil), "bitway.farming.Staking")
	proto.RegisterType((*TotalStaking)(nil), "bitway.farming.TotalStaking")
	proto.RegisterType((*AccountRewardPerEpoch)(nil), "bitway.farming.AccountRewardPerEpoch")
}

func init() { proto.RegisterFile("bitway/farming/farming.proto", fileDescriptor_ac00086219418b14) }

var fileDescriptor_ac00086219418b14 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x29, 0x59, 0xb6, 0xd6, 0xb6, 0x2c, 0x2c, 0x9c, 0x96, 0xb6, 0x53, 0x4a, 0xf0, 0x49,
	0x08, 0x5a, 0x12, 0x76, 0x50, 0xf4, 0xd6, 0x42, 0x12, 0x99, 0x44, 0x6d, 0xaa, 0x08, 0x94, 0x72,
	0x68, 0x2e, 0xc4, 0x8a, 0x5c, 0x51, 0x84, 0x45, 0xae, 0xc0, 0x5d, 0x25, 0xf5, 0xbd, 0x0f, 0x90,
	0x63, 0x2f, 0x7d, 0x80, 0xde, 0xfb, 0x10, 0xe9, 0x2d, 0xe8, 0xa9, 0xe8, 0x21, 0x2d, 0xec, 0x5b,
	0x9f, 0x22, 0xd8, 0x1f, 0x0a, 0x92, 0x9c, 0x83, 0xac, 0x93, 0x38, 0xfc, 0xe6, 0xfb, 0x38, 0x3b,
	0xf3, 0xcd, 0x0a, 0x3c, 0x1c, 0xc5, 0xec, 0x0d, 0xba, 0xb6, 0xc7, 0x28, 0x4b, 0xe2, 0x34, 0xca,
	0x7f, 0xad, 0x59, 0x46, 0x18, 0x81, 0x55, 0x89, 0x5a, 0xea, 0xed, 0xe9, 0x71, 0x44, 0x22, 0x22,
	0x20, 0x9b, 0x3f, 0xc9, 0xac, 0x53, 0x33, 0x22, 0x24, 0x9a, 0x62, 0x5b, 0x44, 0xa3, 0xf9, 0xd8,
	0x0e, 0xe7, 0x19, 0x62, 0x31, 0x49, 0x15, 0x5e, 0x5f, 0xc7, 0x59, 0x9c, 0x60, 0xca, 0x50, 0x32,
	0xcb, 0x05, 0x02, 0x42, 0x13, 0x42, 0xed, 0x11, 0xa2, 0xd8, 0x7e, 0x7d, 0x31, 0xc2, 0x0c, 0x5d,
	0xd8, 0x01, 0x89, 0x73, 0x81, 0x13, 0x89, 0xfb, 0xf2, 0xcb, 0x32, 0x90, 0xd0, 0xf9, 0x6f, 0x3a,
	0xd8, 0x71, 0x67, 0x24, 0x98, 0xc0, 0x2a, 0xd0, 0xe3, 0xd0, 0xd0, 0x1a, 0x5a, 0xb3, 0xe4, 0xe9,
	0x71, 0x08, 0x3b, 0x00, 0x50, 0x86, 0x32, 0xe6, 0xf3, 0xaf, 0x19, 0x7a, 0x43, 0x6b, 0xee, 0x5f,
	0x9e, 0x5a, 0xb2, 0x14, 0x2b, 0x2f, 0xc5, 0x1a, 0xe6, 0xa5, 0xb4, 0xf7, 0xde, 0x7d, 0xa8, 0x17,
	0xde, 0xfe, 0x5b, 0xd7, 0xbc, 0x8a, 0xe0, 0x71, 0x04, 0x7e, 0x07, 0xf6, 0x70, 0x1a, 0x4a, 0x89,
	0xe2, 0x3d, 0x24, 0x76, 0x71, 0x1a, 0x0a, 0x81, 0x2e, 0xa8, 0x32, 0xc2, 0xd0, 0xd4, 0xa7, 0x0c,
	0x5d, 0xc5, 0x69, 0x44, 0x8d, 0x52, 0xa3, 0xd8, 0xdc, 0xbf, 0x7c, 0x68, 0xad, 0xb6, 0xd6, 0x1a,
	0xf2, 0xac, 0x81, 0x4c, 0x6a, 0x97, 0xb8, 0x90, 0x77, 0xc8, 0x96, 0xde, 0x51, 0xf8, 0x18, 0x94,
	0x29, 0x43, 0x6c, 0x4e, 0x8d, 0x9d, 0x86, 0xd6, 0xac, 0x5e, 0x9e, 0xad, 0x4b, 0x88, 0x3e, 0x0c,
	0x44, 0x8a, 0xa7, 0x52, 0xcf, 0xff, 0x2f, 0x81, 0x5d, 0xa5, 0x70, 0xa7, 0x43, 0x06, 0xd8, 0x45,
	0x61, 0x98, 0x61, 0x4a, 0x45, 0x7b, 0x2a, 0x5e, 0x1e, 0xc2, 0x6f, 0x40, 0x19, 0x25, 0x64, 0x9e,
	0x32, 0x75, 0xe8, 0x13, 0x4b, 0x35, 0x9d, 0x4f, 0xc8, 0x52, 0x13, 0xb2, 0x3a, 0x24, 0x4e, 0x55,
	0xa9, 0x2a, 0x1d, 0x3e, 0x03, 0x87, 0x53, 0x12, 0x5c, 0xf9, 0xb9, 0x03, 0x8c, 0x92, 0xe2, 0xaf,
	0x37, 0xcd, 0x51, 0x09, 0xb2, 0x67, 0xbf, 0xf2, 0x9e, 0x1d, 0x70, 0x66, 0xfe, 0x1e, 0xbe, 0x02,
	0x47, 0x42, 0x29, 0x99, 0x4f, 0x59, 0x3c, 0x9b, 0xc6, 0x38, 0x13, 0xc7, 0xae, 0xb4, 0x2f, 0x38,
	0xe1, 0x9f, 0x0f, 0xf5, 0x33, 0x59, 0x12, 0x0d, 0xaf, 0xac, 0x98, 0xd8, 0x09, 0x62, 0x13, 0xeb,
	0x39, 0x8e, 0x50, 0x70, 0xed, 0xe0, 0xe0, 0xaf, 0x3f, 0xbe, 0x02, 0xaa, 0x62, 0x07, 0x07, 0x5e,
	0x95, 0x2b, 0xfd, 0xb8, 0x10, 0x82, 0xdf, 0x83, 0x1a, 0x1e, 0x8f, 0x71, 0xc0, 0xe2, 0xd7, 0xd8,
	0x57, 0x07, 0x2d, 0x6f, 0x76, 0xd0, 0xa3, 0x05, 0xb1, 0x95, 0x9f, 0xf8, 0x68, 0x86, 0xd3, 0x30,
	0x4e, 0x23, 0x3f, 0xc3, 0x6f, 0x50, 0x16, 0x52, 0x63, 0x77, 0x33, 0xa9, 0xaa, 0xe2, 0x79, 0x92,
	0x06, 0x1d, 0x20, 0x07, 0xbe, 0xd0, 0xd9, 0xdb, 0x4c, 0xe7, 0x40, 0xb0, 0x72, 0x95, 0x55, 0xdb,
	0x57, 0xb6, 0xb3, 0xfd, 0xd7, 0x0b, 0xab, 0x01, 0x61, 0xb5, 0x2f, 0xd6, 0xad, 0xa6, 0x2c, 0xb5,
	0x66, 0xb6, 0xdf, 0x35, 0x70, 0xb0, 0xec, 0x63, 0x78, 0x0c, 0x76, 0x42, 0x9c, 0x92, 0x44, 0x98,
	0xae, 0xe2, 0xc9, 0x60, 0xc9, 0x5d, 0xfa, 0xfd, 0xdc, 0xf5, 0xa9, 0xb9, 0x15, 0xb7, 0x9b, 0xdb,
	0xf9, 0x9f, 0x3a, 0x78, 0xd0, 0x0a, 0x02, 0xfe, 0x2c, 0x5b, 0xd7, 0xc7, 0x99, 0xbc, 0x48, 0x96,
	0xd6, 0x42, 0x5b, 0x5d, 0x8b, 0x6f, 0xc1, 0xde, 0x62, 0x8d, 0xf5, 0x8d, 0xd7, 0x78, 0xc1, 0x81,
	0x5d, 0x50, 0xa6, 0x13, 0x94, 0x61, 0x6a, 0x14, 0x1b, 0xc5, 0xed, 0xac, 0xac, 0x04, 0xa0, 0x07,
	0xf6, 0xd5, 0xbd, 0xc2, 0x63, 0xb1, 0x66, 0x5b, 0xe9, 0x01, 0x79, 0xc7, 0x70, 0x11, 0x3e, 0x17,
	0x69, 0x3d, 0xb1, 0x69, 0x9b, 0xcc, 0x45, 0xa6, 0x3f, 0xfa, 0x09, 0xec, 0x2f, 0xdd, 0x3d, 0xd0,
	0x00, 0xc7, 0x6e, 0xff, 0x45, 0xe7, 0x99, 0x3f, 0x18, 0xb6, 0x86, 0x2f, 0x07, 0x7e, 0xdf, 0xed,
	0x39, 0xdd, 0xde, 0xd3, 0x5a, 0xe1, 0x0e, 0x32, 0x18, 0xb6, 0xbc, 0xa1, 0xeb, 0xd4, 0x34, 0xf8,
	0x19, 0x80, 0x2b, 0x88, 0xdb, 0x73, 0x5c, 0xa7, 0xa6, 0x3f, 0xfa, 0x45, 0x03, 0x87, 0x2b, 0x66,
	0x83, 0x26, 0x38, 0x1d, 0x0c, 0x5b, 0x3f, 0x74, 0x7b, 0x4f, 0xf3, 0xdc, 0x97, 0xbd, 0x41, 0xdf,
	0xed, 0x74, 0x9f, 0x74, 0x5d, 0xa7, 0x56, 0x80, 0x27, 0xe0, 0xc1, 0x1a, 0xce, 0x43, 0xf1, 0x91,
	0x33, 0xf0, 0xf9, 0x1d, 0xea, 0xf3, 0x17, 0x1d, 0x0e, 0xea, 0x9f, 0x04, 0x15, 0xb3, 0xd8, 0x7e,
	0xf2, 0xee, 0xc6, 0xd4, 0xde, 0xdf, 0x98, 0xda, 0x7f, 0x37, 0xa6, 0xf6, 0xf6, 0xd6, 0x2c, 0xbc,
	0xbf, 0x35, 0x0b, 0x7f, 0xdf, 0x9a, 0x85, 0x57, 0x5f, 0x46, 0x31, 0x9b, 0xcc, 0x47, 0x56, 0x40,
	0x12, 0x5b, 0x7a, 0x61, 0x8a, 0x46, 0x54, 0x3d, 0xda, 0x3f, 0x2f, 0xfe, 0x58, 0xd9, 0xf5, 0x0c,
	0xd3, 0x51, 0x59, 0x6c, 0xe0, 0xe3, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xbc, 0xb8, 0xe1,
	0x77, 0x07, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TotalStakings) > 0 {
		for iNdEx := len(m.TotalStakings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalStakings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFarming(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFarming(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Staking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintFarming(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.PendingRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.EffectiveAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.LockMultiplier.Size()
		i -= size
		if _, err := m.LockMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.LockDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockDuration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintFarming(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EffectiveAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountRewardPerEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRewardPerEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountRewardPerEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalShare.Size()
		i -= size
		if _, err := m.TotalShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Shares[iNdEx].Size()
				i -= size
				if _, err := m.Shares[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Stakings) > 0 {
		for iNdEx := len(m.Stakings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFarming(dAtA []byte, offset int, v uint64) int {
	offset -= sovFarming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFarming(uint64(m.Id))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFarming(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFarming(uint64(l))
	if len(m.TotalStakings) > 0 {
		for _, e := range m.TotalStakings {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovFarming(uint64(m.Status))
	}
	return n
}

func (m *Staking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFarming(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockDuration)
	n += 1 + l + sovFarming(uint64(l))
	l = m.LockMultiplier.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = m.EffectiveAmount.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = m.PendingRewards.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = m.TotalRewards.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFarming(uint64(l))
	if m.Status != 0 {
		n += 1 + sovFarming(uint64(m.Status))
	}
	return n
}

func (m *TotalStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = m.EffectiveAmount.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func (m *AccountRewardPerEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.Stakings) > 0 {
		for _, e := range m.Stakings {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	l = m.TotalShare.Size()
	n += 1 + l + sovFarming(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func sovFarming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFarming(x uint64) (n int) {
	return sovFarming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStakings = append(m.TotalStakings, TotalStaking{})
			if err := m.TotalStakings[len(m.TotalStakings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EpochStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.LockDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StakingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountRewardPerEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRewardPerEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRewardPerEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakings = append(m.Stakings, TotalStaking{})
			if err := m.Stakings[len(m.Stakings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Shares = append(m.Shares, v)
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFarming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFarming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFarming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFarming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFarming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFarming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFarming = fmt.Errorf("proto: unexpected end of group")
)
