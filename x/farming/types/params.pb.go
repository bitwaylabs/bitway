// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/farming/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Asset defines the farming asset
type Asset struct {
	// Asset denom
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Ratio of the reward relative to the total rewards
	RewardRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=reward_ratio,json=rewardRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_ratio"`
	// Minimum staking amount
	MinStakingAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=min_staking_amount,json=minStakingAmount,proto3,customtype=cosmossdk.io/math.Int" json:"min_staking_amount"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_690a80959b814733, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Params defines the parameters for the module.
type Params struct {
	Enabled        bool            `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EpochDuration  time.Duration   `protobuf:"bytes,2,opt,name=epoch_duration,json=epochDuration,proto3,stdduration" json:"epoch_duration"`
	RewardPerEpoch types.Coin      `protobuf:"bytes,3,opt,name=reward_per_epoch,json=rewardPerEpoch,proto3" json:"reward_per_epoch"`
	LockDurations  []time.Duration `protobuf:"bytes,4,rep,name=lock_durations,json=lockDurations,proto3,stdduration" json:"lock_durations"`
	EligibleAssets []Asset         `protobuf:"bytes,5,rep,name=eligible_assets,json=eligibleAssets,proto3" json:"eligible_assets"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_690a80959b814733, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Params) GetEpochDuration() time.Duration {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

func (m *Params) GetRewardPerEpoch() types.Coin {
	if m != nil {
		return m.RewardPerEpoch
	}
	return types.Coin{}
}

func (m *Params) GetLockDurations() []time.Duration {
	if m != nil {
		return m.LockDurations
	}
	return nil
}

func (m *Params) GetEligibleAssets() []Asset {
	if m != nil {
		return m.EligibleAssets
	}
	return nil
}

func init() {
	proto.RegisterType((*Asset)(nil), "bitway.farming.Asset")
	proto.RegisterType((*Params)(nil), "bitway.farming.Params")
}

func init() { proto.RegisterFile("bitway/farming/params.proto", fileDescriptor_690a80959b814733) }

var fileDescriptor_690a80959b814733 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xb1, 0x6e, 0x13, 0x31,
	0x18, 0xc7, 0x73, 0x6d, 0x53, 0x8a, 0x0b, 0xa1, 0xb2, 0x5a, 0xe9, 0xda, 0x8a, 0x4b, 0xd5, 0x89,
	0x01, 0x6c, 0x05, 0x9e, 0xa0, 0x21, 0x20, 0x15, 0x18, 0xaa, 0x83, 0x89, 0xe5, 0x64, 0xdf, 0xb9,
	0x8e, 0x95, 0xb3, 0x7d, 0x3a, 0x3b, 0x94, 0xbc, 0x05, 0x23, 0x0f, 0xc2, 0x03, 0x30, 0x56, 0x62,
	0xa9, 0x98, 0x10, 0x43, 0x41, 0xc9, 0x8b, 0x20, 0xdb, 0xe7, 0x48, 0x88, 0x85, 0xcd, 0x9f, 0xff,
	0xfe, 0xff, 0xfc, 0xf7, 0xf7, 0x19, 0x1c, 0x53, 0x61, 0xaf, 0xc8, 0x02, 0x5f, 0x92, 0x56, 0x0a,
	0xc5, 0x71, 0x43, 0x5a, 0x22, 0x0d, 0x6a, 0x5a, 0x6d, 0x35, 0x1c, 0x04, 0x11, 0x75, 0xe2, 0xd1,
	0x3e, 0xd7, 0x5c, 0x7b, 0x09, 0xbb, 0x55, 0x38, 0x75, 0x94, 0x71, 0xad, 0x79, 0xcd, 0xb0, 0xaf,
	0xe8, 0xfc, 0x12, 0x57, 0xf3, 0x96, 0x58, 0xa1, 0x55, 0xd4, 0x4b, 0x6d, 0xa4, 0x36, 0x98, 0x12,
	0xc3, 0xf0, 0x87, 0x11, 0x65, 0x96, 0x8c, 0x70, 0xa9, 0x45, 0xd4, 0x0f, 0x83, 0x5e, 0x04, 0x70,
	0x28, 0x82, 0x74, 0xfa, 0x35, 0x01, 0xfd, 0x33, 0x63, 0x98, 0x85, 0xfb, 0xa0, 0x5f, 0x31, 0xa5,
	0x65, 0x9a, 0x9c, 0x24, 0x8f, 0xee, 0xe6, 0xa1, 0x80, 0xef, 0xc0, 0xbd, 0x96, 0x5d, 0x91, 0xb6,
	0x2a, 0xfc, 0x8d, 0xe9, 0x86, 0x13, 0xc7, 0xa3, 0xeb, 0xdb, 0x61, 0xef, 0xe7, 0xed, 0xf0, 0x38,
	0xb0, 0x4c, 0x35, 0x43, 0x42, 0x63, 0x49, 0xec, 0x14, 0xbd, 0x61, 0x9c, 0x94, 0x8b, 0x09, 0x2b,
	0xbf, 0x7f, 0x79, 0x02, 0xba, 0xab, 0x26, 0xac, 0xcc, 0x77, 0x03, 0x26, 0x77, 0x14, 0xf8, 0x1a,
	0x40, 0x29, 0x54, 0x61, 0x2c, 0x99, 0x09, 0xc5, 0x0b, 0x22, 0xf5, 0x5c, 0xd9, 0x74, 0xd3, 0xb3,
	0x1f, 0x76, 0xec, 0x83, 0x7f, 0xd9, 0xe7, 0xca, 0xe6, 0x7b, 0x52, 0xa8, 0xb7, 0xc1, 0x77, 0xe6,
	0x6d, 0xa7, 0xdf, 0x36, 0xc0, 0xf6, 0x85, 0x6f, 0x2a, 0x4c, 0xc1, 0x1d, 0xa6, 0x08, 0xad, 0x59,
	0xe5, 0x5f, 0xb1, 0x93, 0xc7, 0x12, 0xbe, 0x02, 0x03, 0xd6, 0xe8, 0x72, 0x5a, 0xc4, 0xd6, 0xf9,
	0x97, 0xec, 0x3e, 0x3d, 0x44, 0xa1, 0xb7, 0x28, 0xf6, 0x16, 0x4d, 0xba, 0x03, 0xe3, 0x1d, 0x17,
	0xe4, 0xf3, 0xaf, 0x61, 0x92, 0xdf, 0xf7, 0xd6, 0x28, 0xc0, 0x73, 0xb0, 0xd7, 0xf5, 0xa4, 0x61,
	0x6d, 0xe1, 0x35, 0x9f, 0xdd, 0xd1, 0xba, 0x17, 0xbb, 0x49, 0xa0, 0x6e, 0x12, 0xe8, 0xb9, 0x16,
	0x6a, 0xbc, 0xe5, 0x68, 0xf9, 0x20, 0x18, 0x2f, 0x58, 0xfb, 0xc2, 0xd9, 0x5c, 0xac, 0x5a, 0x97,
	0xb3, 0x75, 0x2a, 0x93, 0x6e, 0x9d, 0x6c, 0xfe, 0x77, 0x2c, 0x67, 0x8d, 0xfb, 0x06, 0x4e, 0xc0,
	0x03, 0x56, 0x0b, 0x2e, 0x68, 0xcd, 0x0a, 0xe2, 0x46, 0x6a, 0xd2, 0xbe, 0x87, 0x1d, 0xa0, 0xbf,
	0x7f, 0x19, 0xf2, 0x03, 0x8f, 0x89, 0xa2, 0xc7, 0x6f, 0x9a, 0xf1, 0xcb, 0xeb, 0x65, 0x96, 0xdc,
	0x2c, 0xb3, 0xe4, 0xf7, 0x32, 0x4b, 0x3e, 0xad, 0xb2, 0xde, 0xcd, 0x2a, 0xeb, 0xfd, 0x58, 0x65,
	0xbd, 0xf7, 0x8f, 0xb9, 0xb0, 0xd3, 0x39, 0x45, 0xa5, 0x96, 0x38, 0x00, 0x6b, 0x42, 0x4d, 0xb7,
	0xc4, 0x1f, 0xd7, 0x1f, 0xdc, 0x2e, 0x1a, 0x66, 0xe8, 0xb6, 0x4f, 0xfe, 0xec, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x02, 0x7a, 0xea, 0x02, 0xff, 0x02, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinStakingAmount.Size()
		i -= size
		if _, err := m.MinStakingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RewardRatio.Size()
		i -= size
		if _, err := m.RewardRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EligibleAssets) > 0 {
		for iNdEx := len(m.EligibleAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EligibleAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LockDurations) > 0 {
		for iNdEx := len(m.LockDurations) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.LockDurations[iNdEx], dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.LockDurations[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintParams(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.RewardPerEpoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.EpochDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.EpochDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.RewardRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinStakingAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.EpochDuration)
	n += 1 + l + sovParams(uint64(l))
	l = m.RewardPerEpoch.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.LockDurations) > 0 {
		for _, e := range m.LockDurations {
			l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(e)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.EligibleAssets) > 0 {
		for _, e := range m.EligibleAssets {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStakingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.EpochDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDurations = append(m.LockDurations, time.Duration(0))
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&(m.LockDurations[len(m.LockDurations)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleAssets = append(m.EligibleAssets, Asset{})
			if err := m.EligibleAssets[len(m.EligibleAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
