// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/incentive/incentive.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Rewards
type Rewards struct {
	Address        string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DepositCount   uint64     `protobuf:"varint,2,opt,name=deposit_count,json=depositCount,proto3" json:"deposit_count,omitempty"`
	WithdrawCount  uint64     `protobuf:"varint,3,opt,name=withdraw_count,json=withdrawCount,proto3" json:"withdraw_count,omitempty"`
	DepositReward  types.Coin `protobuf:"bytes,4,opt,name=deposit_reward,json=depositReward,proto3" json:"deposit_reward"`
	WithdrawReward types.Coin `protobuf:"bytes,5,opt,name=withdraw_reward,json=withdrawReward,proto3" json:"withdraw_reward"`
	TotalAmount    types.Coin `protobuf:"bytes,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
}

func (m *Rewards) Reset()         { *m = Rewards{} }
func (m *Rewards) String() string { return proto.CompactTextString(m) }
func (*Rewards) ProtoMessage()    {}
func (*Rewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6fcbb56ad73f84f, []int{0}
}
func (m *Rewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rewards.Merge(m, src)
}
func (m *Rewards) XXX_Size() int {
	return m.Size()
}
func (m *Rewards) XXX_DiscardUnknown() {
	xxx_messageInfo_Rewards.DiscardUnknown(m)
}

var xxx_messageInfo_Rewards proto.InternalMessageInfo

func (m *Rewards) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Rewards) GetDepositCount() uint64 {
	if m != nil {
		return m.DepositCount
	}
	return 0
}

func (m *Rewards) GetWithdrawCount() uint64 {
	if m != nil {
		return m.WithdrawCount
	}
	return 0
}

func (m *Rewards) GetDepositReward() types.Coin {
	if m != nil {
		return m.DepositReward
	}
	return types.Coin{}
}

func (m *Rewards) GetWithdrawReward() types.Coin {
	if m != nil {
		return m.WithdrawReward
	}
	return types.Coin{}
}

func (m *Rewards) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

// Reward Statistics
type RewardStats struct {
	AddressCount      uint64     `protobuf:"varint,1,opt,name=address_count,json=addressCount,proto3" json:"address_count,omitempty"`
	TxCount           uint64     `protobuf:"varint,2,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	TotalRewardAmount types.Coin `protobuf:"bytes,3,opt,name=total_reward_amount,json=totalRewardAmount,proto3" json:"total_reward_amount"`
}

func (m *RewardStats) Reset()         { *m = RewardStats{} }
func (m *RewardStats) String() string { return proto.CompactTextString(m) }
func (*RewardStats) ProtoMessage()    {}
func (*RewardStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6fcbb56ad73f84f, []int{1}
}
func (m *RewardStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardStats.Merge(m, src)
}
func (m *RewardStats) XXX_Size() int {
	return m.Size()
}
func (m *RewardStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardStats.DiscardUnknown(m)
}

var xxx_messageInfo_RewardStats proto.InternalMessageInfo

func (m *RewardStats) GetAddressCount() uint64 {
	if m != nil {
		return m.AddressCount
	}
	return 0
}

func (m *RewardStats) GetTxCount() uint64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *RewardStats) GetTotalRewardAmount() types.Coin {
	if m != nil {
		return m.TotalRewardAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Rewards)(nil), "bitway.incentive.Rewards")
	proto.RegisterType((*RewardStats)(nil), "bitway.incentive.RewardStats")
}

func init() { proto.RegisterFile("bitway/incentive/incentive.proto", fileDescriptor_e6fcbb56ad73f84f) }

var fileDescriptor_e6fcbb56ad73f84f = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xbb, 0x80, 0xa0, 0xcb, 0x1f, 0xb5, 0x7a, 0x28, 0x1c, 0x6a, 0x83, 0x31, 0xe1, 0xb4,
	0x0d, 0xfa, 0x04, 0x42, 0x62, 0xb8, 0x99, 0xd4, 0x9b, 0x17, 0xb2, 0x6d, 0x37, 0xb0, 0x09, 0x74,
	0x49, 0x77, 0xa1, 0xf0, 0x16, 0x3e, 0x81, 0x6f, 0x63, 0xc2, 0x91, 0xa3, 0x27, 0x63, 0xe0, 0x45,
	0x0c, 0x3b, 0x5b, 0xd4, 0x1b, 0xb7, 0xe9, 0xcc, 0x37, 0xdf, 0xfe, 0xfa, 0x65, 0xb0, 0x17, 0x72,
	0x95, 0xd1, 0x95, 0xcf, 0x93, 0x88, 0x25, 0x8a, 0x2f, 0xd8, 0x6f, 0x45, 0x66, 0xa9, 0x50, 0xc2,
	0xbe, 0x00, 0x05, 0x39, 0xf4, 0x5b, 0xd7, 0x23, 0x31, 0x12, 0x7a, 0xe8, 0xef, 0x2b, 0xd0, 0xb5,
	0xdc, 0x48, 0xc8, 0xa9, 0x90, 0x7e, 0x48, 0x25, 0xf3, 0x17, 0xdd, 0x90, 0x29, 0xda, 0xf5, 0x23,
	0xc1, 0x13, 0x98, 0xb7, 0x3f, 0x0a, 0xb8, 0x12, 0xb0, 0x8c, 0xa6, 0xb1, 0xb4, 0x1d, 0x5c, 0xa1,
	0x71, 0x9c, 0x32, 0x29, 0x1d, 0xe4, 0xa1, 0xce, 0x59, 0x90, 0x7f, 0xda, 0xb7, 0xb8, 0x1e, 0xb3,
	0x99, 0x90, 0x5c, 0x0d, 0x23, 0x31, 0x4f, 0x94, 0x53, 0xf0, 0x50, 0xa7, 0x14, 0xd4, 0x4c, 0xb3,
	0xbf, 0xef, 0xd9, 0x77, 0xb8, 0x91, 0x71, 0x35, 0x8e, 0x53, 0x9a, 0x19, 0x55, 0x51, 0xab, 0xea,
	0x79, 0x17, 0x64, 0x4f, 0xb8, 0x91, 0x7b, 0xa5, 0xfa, 0x61, 0xa7, 0xe4, 0xa1, 0x4e, 0xf5, 0xbe,
	0x49, 0x00, 0x95, 0xec, 0x51, 0x89, 0x41, 0x25, 0x7d, 0xc1, 0x93, 0x5e, 0x69, 0xfd, 0x75, 0x63,
	0x05, 0x39, 0x02, 0xe0, 0xda, 0x03, 0x7c, 0x7e, 0x78, 0xce, 0x18, 0x9d, 0x1c, 0x67, 0x74, 0xc0,
	0x34, 0x4e, 0x3d, 0x5c, 0x53, 0x42, 0xd1, 0xc9, 0x90, 0x4e, 0x35, 0x76, 0xf9, 0x38, 0x9b, 0xaa,
	0x5e, 0x7a, 0xd4, 0x3b, 0xed, 0x77, 0x84, 0xab, 0x60, 0xf7, 0xa2, 0xa8, 0xd2, 0x89, 0x99, 0xf0,
	0x4c, 0x16, 0x08, 0x12, 0x33, 0x4d, 0x88, 0xa2, 0x89, 0x4f, 0xd5, 0xf2, 0x5f, 0xa2, 0x15, 0xb5,
	0x84, 0xd1, 0x33, 0xbe, 0x02, 0x26, 0xf8, 0xb5, 0x1c, 0xad, 0x78, 0x1c, 0xda, 0xa5, 0xde, 0x05,
	0x1e, 0x00, 0xec, 0x0d, 0xd6, 0x5b, 0x17, 0x6d, 0xb6, 0x2e, 0xfa, 0xde, 0xba, 0xe8, 0x6d, 0xe7,
	0x5a, 0x9b, 0x9d, 0x6b, 0x7d, 0xee, 0x5c, 0xeb, 0x95, 0x8c, 0xb8, 0x1a, 0xcf, 0x43, 0x12, 0x89,
	0xa9, 0x0f, 0x57, 0x35, 0xa1, 0xa1, 0x34, 0xa5, 0xbf, 0xfc, 0x73, 0x84, 0x6a, 0x35, 0x63, 0x32,
	0x2c, 0xeb, 0xcb, 0x79, 0xf8, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x8a, 0xd9, 0xcd, 0xa5, 0x02,
	0x00, 0x00,
}

func (m *Rewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.WithdrawReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.DepositReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.WithdrawCount != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.WithdrawCount))
		i--
		dAtA[i] = 0x18
	}
	if m.DepositCount != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.DepositCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalRewardAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TxCount != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x10
	}
	if m.AddressCount != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.AddressCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	if m.DepositCount != 0 {
		n += 1 + sovIncentive(uint64(m.DepositCount))
	}
	if m.WithdrawCount != 0 {
		n += 1 + sovIncentive(uint64(m.WithdrawCount))
	}
	l = m.DepositReward.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.WithdrawReward.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.TotalAmount.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *RewardStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressCount != 0 {
		n += 1 + sovIncentive(uint64(m.AddressCount))
	}
	if m.TxCount != 0 {
		n += 1 + sovIncentive(uint64(m.TxCount))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCount", wireType)
			}
			m.DepositCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCount", wireType)
			}
			m.WithdrawCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressCount", wireType)
			}
			m.AddressCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
