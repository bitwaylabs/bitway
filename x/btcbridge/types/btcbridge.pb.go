// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/btcbridge/btcbridge.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bitcoin Signing Status
type SigningStatus int32

const (
	// SIGNING_STATUS_UNSPECIFIED - Default value, should not be used
	SigningStatus_SIGNING_STATUS_UNSPECIFIED SigningStatus = 0
	// SIGNING_STATUS_PENDING - The signing request is pending
	SigningStatus_SIGNING_STATUS_PENDING SigningStatus = 1
	// SIGNING_STATUS_BROADCASTED - The signing request is broadcasted
	SigningStatus_SIGNING_STATUS_BROADCASTED SigningStatus = 2
	// SIGNING_STATUS_CONFIRMED - The signing request is confirmed
	SigningStatus_SIGNING_STATUS_CONFIRMED SigningStatus = 3
	// SIGNING_STATUS_FAILED - The signing request failed to be signed or broadcast due to unexpected exceptions
	SigningStatus_SIGNING_STATUS_FAILED SigningStatus = 4
)

var SigningStatus_name = map[int32]string{
	0: "SIGNING_STATUS_UNSPECIFIED",
	1: "SIGNING_STATUS_PENDING",
	2: "SIGNING_STATUS_BROADCASTED",
	3: "SIGNING_STATUS_CONFIRMED",
	4: "SIGNING_STATUS_FAILED",
}

var SigningStatus_value = map[string]int32{
	"SIGNING_STATUS_UNSPECIFIED": 0,
	"SIGNING_STATUS_PENDING":     1,
	"SIGNING_STATUS_BROADCASTED": 2,
	"SIGNING_STATUS_CONFIRMED":   3,
	"SIGNING_STATUS_FAILED":      4,
}

func (x SigningStatus) String() string {
	return proto.EnumName(SigningStatus_name, int32(x))
}

func (SigningStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{0}
}

type DKGRequestStatus int32

const (
	// DKG_REQUEST_STATUS_UNSPECIFIED defines the unknown DKG request status
	DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED DKGRequestStatus = 0
	// DKG_REQUEST_STATUS_PENDING defines the status of the DKG request which is pending
	DKGRequestStatus_DKG_REQUEST_STATUS_PENDING DKGRequestStatus = 1
	// DKG_REQUEST_STATUS_COMPLETED defines the status of the DKG request which is completed
	DKGRequestStatus_DKG_REQUEST_STATUS_COMPLETED DKGRequestStatus = 2
	// DKG_REQUEST_STATUS_FAILED defines the status of the DKG request which failed
	DKGRequestStatus_DKG_REQUEST_STATUS_FAILED DKGRequestStatus = 3
	// DKG_REQUEST_STATUS_TIMEDOUT defines the status of the DKG request which timed out
	DKGRequestStatus_DKG_REQUEST_STATUS_TIMEDOUT DKGRequestStatus = 4
)

var DKGRequestStatus_name = map[int32]string{
	0: "DKG_REQUEST_STATUS_UNSPECIFIED",
	1: "DKG_REQUEST_STATUS_PENDING",
	2: "DKG_REQUEST_STATUS_COMPLETED",
	3: "DKG_REQUEST_STATUS_FAILED",
	4: "DKG_REQUEST_STATUS_TIMEDOUT",
}

var DKGRequestStatus_value = map[string]int32{
	"DKG_REQUEST_STATUS_UNSPECIFIED": 0,
	"DKG_REQUEST_STATUS_PENDING":     1,
	"DKG_REQUEST_STATUS_COMPLETED":   2,
	"DKG_REQUEST_STATUS_FAILED":      3,
	"DKG_REQUEST_STATUS_TIMEDOUT":    4,
}

func (x DKGRequestStatus) String() string {
	return proto.EnumName(DKGRequestStatus_name, int32(x))
}

func (DKGRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{1}
}

// Refreshing Status
type RefreshingStatus int32

const (
	// REFRESHING_STATUS_UNSPECIFIED defines the unknown refreshing status
	RefreshingStatus_REFRESHING_STATUS_UNSPECIFIED RefreshingStatus = 0
	// REFRESHING_STATUS_PENDING defines the status of the refreshing request which is pending
	RefreshingStatus_REFRESHING_STATUS_PENDING RefreshingStatus = 1
	// REFRESHING_STATUS_COMPLETED defines the status of the refreshing request which is completed
	RefreshingStatus_REFRESHING_STATUS_COMPLETED RefreshingStatus = 2
	// REFRESHING_STATUS_TIMEDOUT defines the status of the refreshing request which timed out
	RefreshingStatus_REFRESHING_STATUS_TIMEDOUT RefreshingStatus = 3
)

var RefreshingStatus_name = map[int32]string{
	0: "REFRESHING_STATUS_UNSPECIFIED",
	1: "REFRESHING_STATUS_PENDING",
	2: "REFRESHING_STATUS_COMPLETED",
	3: "REFRESHING_STATUS_TIMEDOUT",
}

var RefreshingStatus_value = map[string]int32{
	"REFRESHING_STATUS_UNSPECIFIED": 0,
	"REFRESHING_STATUS_PENDING":     1,
	"REFRESHING_STATUS_COMPLETED":   2,
	"REFRESHING_STATUS_TIMEDOUT":    3,
}

func (x RefreshingStatus) String() string {
	return proto.EnumName(RefreshingStatus_name, int32(x))
}

func (RefreshingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{2}
}

// Fee rate
type FeeRate struct {
	// fee rate
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// block height at which the fee rate is submitted
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *FeeRate) Reset()         { *m = FeeRate{} }
func (m *FeeRate) String() string { return proto.CompactTextString(m) }
func (*FeeRate) ProtoMessage()    {}
func (*FeeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{0}
}
func (m *FeeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeRate.Merge(m, src)
}
func (m *FeeRate) XXX_Size() int {
	return m.Size()
}
func (m *FeeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeRate.DiscardUnknown(m)
}

var xxx_messageInfo_FeeRate proto.InternalMessageInfo

func (m *FeeRate) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FeeRate) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Bitcoin Signing Request
type SigningRequest struct {
	Address      string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sequence     uint64        `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type         AssetType     `protobuf:"varint,3,opt,name=type,proto3,enum=bitway.btcbridge.AssetType" json:"type,omitempty"`
	Txid         string        `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Psbt         string        `protobuf:"bytes,5,opt,name=psbt,proto3" json:"psbt,omitempty"`
	CreationTime time.Time     `protobuf:"bytes,6,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time"`
	Status       SigningStatus `protobuf:"varint,7,opt,name=status,proto3,enum=bitway.btcbridge.SigningStatus" json:"status,omitempty"`
}

func (m *SigningRequest) Reset()         { *m = SigningRequest{} }
func (m *SigningRequest) String() string { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()    {}
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{1}
}
func (m *SigningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningRequest.Merge(m, src)
}
func (m *SigningRequest) XXX_Size() int {
	return m.Size()
}
func (m *SigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigningRequest proto.InternalMessageInfo

func (m *SigningRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SigningRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SigningRequest) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *SigningRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *SigningRequest) GetPsbt() string {
	if m != nil {
		return m.Psbt
	}
	return ""
}

func (m *SigningRequest) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *SigningRequest) GetStatus() SigningStatus {
	if m != nil {
		return m.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

// Compact Signing Request
type CompactSigningRequest struct {
	Address      string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sequence     uint64        `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type         AssetType     `protobuf:"varint,3,opt,name=type,proto3,enum=bitway.btcbridge.AssetType" json:"type,omitempty"`
	Txid         string        `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Signers      []string      `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
	SigHashes    []string      `protobuf:"bytes,6,rep,name=sig_hashes,json=sigHashes,proto3" json:"sig_hashes,omitempty"`
	CreationTime time.Time     `protobuf:"bytes,7,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time"`
	Status       SigningStatus `protobuf:"varint,8,opt,name=status,proto3,enum=bitway.btcbridge.SigningStatus" json:"status,omitempty"`
}

func (m *CompactSigningRequest) Reset()         { *m = CompactSigningRequest{} }
func (m *CompactSigningRequest) String() string { return proto.CompactTextString(m) }
func (*CompactSigningRequest) ProtoMessage()    {}
func (*CompactSigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{2}
}
func (m *CompactSigningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactSigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactSigningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactSigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactSigningRequest.Merge(m, src)
}
func (m *CompactSigningRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactSigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactSigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactSigningRequest proto.InternalMessageInfo

func (m *CompactSigningRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CompactSigningRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *CompactSigningRequest) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *CompactSigningRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *CompactSigningRequest) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *CompactSigningRequest) GetSigHashes() []string {
	if m != nil {
		return m.SigHashes
	}
	return nil
}

func (m *CompactSigningRequest) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *CompactSigningRequest) GetStatus() SigningStatus {
	if m != nil {
		return m.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

// Withdrawal Request
type WithdrawRequest struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Txid     string `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{3}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func (m *WithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WithdrawRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *WithdrawRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *WithdrawRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// Withdrawal request via IBC
type IBCWithdrawRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence  uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount    string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *IBCWithdrawRequest) Reset()         { *m = IBCWithdrawRequest{} }
func (m *IBCWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*IBCWithdrawRequest) ProtoMessage()    {}
func (*IBCWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{4}
}
func (m *IBCWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCWithdrawRequest.Merge(m, src)
}
func (m *IBCWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *IBCWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IBCWithdrawRequest proto.InternalMessageInfo

func (m *IBCWithdrawRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *IBCWithdrawRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IBCWithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IBCWithdrawRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// Rate limit for BTC withdrawal
type RateLimit struct {
	GlobalRateLimit  GlobalRateLimit  `protobuf:"bytes,1,opt,name=global_rate_limit,json=globalRateLimit,proto3" json:"global_rate_limit"`
	AddressRateLimit AddressRateLimit `protobuf:"bytes,2,opt,name=address_rate_limit,json=addressRateLimit,proto3" json:"address_rate_limit"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{5}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return m.Size()
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetGlobalRateLimit() GlobalRateLimit {
	if m != nil {
		return m.GlobalRateLimit
	}
	return GlobalRateLimit{}
}

func (m *RateLimit) GetAddressRateLimit() AddressRateLimit {
	if m != nil {
		return m.AddressRateLimit
	}
	return AddressRateLimit{}
}

// Global rate limit for BTC withdrawal
type GlobalRateLimit struct {
	// Starting time for the current epoch
	StartTime time.Time `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// End time for the current epoch
	EndTime time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// Maximum withdrawable amount for the current epoch; 0 means no limit
	Quota int64 `protobuf:"varint,3,opt,name=quota,proto3" json:"quota,omitempty"`
	// Used quota currently
	Used int64 `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *GlobalRateLimit) Reset()         { *m = GlobalRateLimit{} }
func (m *GlobalRateLimit) String() string { return proto.CompactTextString(m) }
func (*GlobalRateLimit) ProtoMessage()    {}
func (*GlobalRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{6}
}
func (m *GlobalRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalRateLimit.Merge(m, src)
}
func (m *GlobalRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *GlobalRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalRateLimit proto.InternalMessageInfo

func (m *GlobalRateLimit) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *GlobalRateLimit) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *GlobalRateLimit) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *GlobalRateLimit) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

// Per address rate limit for BTC withdrawal
type AddressRateLimit struct {
	// Starting time for the current epoch
	StartTime time.Time `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// End time for the current epoch
	EndTime time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// Maximum withdrawable amount for the current epoch; 0 means no limit
	Quota int64 `protobuf:"varint,3,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (m *AddressRateLimit) Reset()         { *m = AddressRateLimit{} }
func (m *AddressRateLimit) String() string { return proto.CompactTextString(m) }
func (*AddressRateLimit) ProtoMessage()    {}
func (*AddressRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{7}
}
func (m *AddressRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRateLimit.Merge(m, src)
}
func (m *AddressRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *AddressRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRateLimit proto.InternalMessageInfo

func (m *AddressRateLimit) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *AddressRateLimit) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *AddressRateLimit) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

// Per address rate limit details
type AddressRateLimitDetails struct {
	// Address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Used quota currently
	Used int64 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *AddressRateLimitDetails) Reset()         { *m = AddressRateLimitDetails{} }
func (m *AddressRateLimitDetails) String() string { return proto.CompactTextString(m) }
func (*AddressRateLimitDetails) ProtoMessage()    {}
func (*AddressRateLimitDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{8}
}
func (m *AddressRateLimitDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressRateLimitDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressRateLimitDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressRateLimitDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRateLimitDetails.Merge(m, src)
}
func (m *AddressRateLimitDetails) XXX_Size() int {
	return m.Size()
}
func (m *AddressRateLimitDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRateLimitDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRateLimitDetails proto.InternalMessageInfo

func (m *AddressRateLimitDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressRateLimitDetails) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

// Bitcoin UTXO
type UTXO struct {
	Txid         string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout         uint64 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount       uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Height       uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	PubKeyScript []byte `protobuf:"bytes,6,opt,name=pub_key_script,json=pubKeyScript,proto3" json:"pub_key_script,omitempty"`
	IsLocked     bool   `protobuf:"varint,7,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// rune balances associated with the UTXO
	Runes []*RuneBalance `protobuf:"bytes,8,rep,name=runes,proto3" json:"runes,omitempty"`
}

func (m *UTXO) Reset()         { *m = UTXO{} }
func (m *UTXO) String() string { return proto.CompactTextString(m) }
func (*UTXO) ProtoMessage()    {}
func (*UTXO) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{9}
}
func (m *UTXO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UTXO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UTXO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UTXO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UTXO.Merge(m, src)
}
func (m *UTXO) XXX_Size() int {
	return m.Size()
}
func (m *UTXO) XXX_DiscardUnknown() {
	xxx_messageInfo_UTXO.DiscardUnknown(m)
}

var xxx_messageInfo_UTXO proto.InternalMessageInfo

func (m *UTXO) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *UTXO) GetVout() uint64 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *UTXO) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UTXO) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UTXO) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *UTXO) GetPubKeyScript() []byte {
	if m != nil {
		return m.PubKeyScript
	}
	return nil
}

func (m *UTXO) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *UTXO) GetRunes() []*RuneBalance {
	if m != nil {
		return m.Runes
	}
	return nil
}

// Rune Balance
type RuneBalance struct {
	// serialized rune id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// rune amount
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *RuneBalance) Reset()         { *m = RuneBalance{} }
func (m *RuneBalance) String() string { return proto.CompactTextString(m) }
func (*RuneBalance) ProtoMessage()    {}
func (*RuneBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{10}
}
func (m *RuneBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneBalance.Merge(m, src)
}
func (m *RuneBalance) XXX_Size() int {
	return m.Size()
}
func (m *RuneBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneBalance.DiscardUnknown(m)
}

var xxx_messageInfo_RuneBalance proto.InternalMessageInfo

func (m *RuneBalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RuneBalance) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// Rune ID
type RuneId struct {
	// block height
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	// tx index
	Tx uint32 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RuneId) Reset()         { *m = RuneId{} }
func (m *RuneId) String() string { return proto.CompactTextString(m) }
func (*RuneId) ProtoMessage()    {}
func (*RuneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{11}
}
func (m *RuneId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneId.Merge(m, src)
}
func (m *RuneId) XXX_Size() int {
	return m.Size()
}
func (m *RuneId) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneId.DiscardUnknown(m)
}

var xxx_messageInfo_RuneId proto.InternalMessageInfo

func (m *RuneId) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RuneId) GetTx() uint32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

// Rune Edict
type Edict struct {
	Id     *RuneId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount string  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Output uint32  `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Edict) Reset()         { *m = Edict{} }
func (m *Edict) String() string { return proto.CompactTextString(m) }
func (*Edict) ProtoMessage()    {}
func (*Edict) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{12}
}
func (m *Edict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edict.Merge(m, src)
}
func (m *Edict) XXX_Size() int {
	return m.Size()
}
func (m *Edict) XXX_DiscardUnknown() {
	xxx_messageInfo_Edict.DiscardUnknown(m)
}

var xxx_messageInfo_Edict proto.InternalMessageInfo

func (m *Edict) GetId() *RuneId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Edict) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Edict) GetOutput() uint32 {
	if m != nil {
		return m.Output
	}
	return 0
}

// BTC UTXO Consolidation
type BtcConsolidation struct {
	// maximum threshold of the btc value
	TargetThreshold int64 `protobuf:"varint,1,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	// maximum number of the utxos to be consolidated; 0 means all
	MaxNum uint32 `protobuf:"varint,2,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (m *BtcConsolidation) Reset()         { *m = BtcConsolidation{} }
func (m *BtcConsolidation) String() string { return proto.CompactTextString(m) }
func (*BtcConsolidation) ProtoMessage()    {}
func (*BtcConsolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{13}
}
func (m *BtcConsolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtcConsolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtcConsolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtcConsolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtcConsolidation.Merge(m, src)
}
func (m *BtcConsolidation) XXX_Size() int {
	return m.Size()
}
func (m *BtcConsolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_BtcConsolidation.DiscardUnknown(m)
}

var xxx_messageInfo_BtcConsolidation proto.InternalMessageInfo

func (m *BtcConsolidation) GetTargetThreshold() int64 {
	if m != nil {
		return m.TargetThreshold
	}
	return 0
}

func (m *BtcConsolidation) GetMaxNum() uint32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

// Runes UTXO Consolidation
type RunesConsolidation struct {
	// rune id
	RuneId string `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	// maximum threshold of the corresponding rune balance
	TargetThreshold string `protobuf:"bytes,2,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	// maximum number of the utxos to be consolidated; 0 means all
	MaxNum uint32 `protobuf:"varint,3,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (m *RunesConsolidation) Reset()         { *m = RunesConsolidation{} }
func (m *RunesConsolidation) String() string { return proto.CompactTextString(m) }
func (*RunesConsolidation) ProtoMessage()    {}
func (*RunesConsolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{14}
}
func (m *RunesConsolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunesConsolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunesConsolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunesConsolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunesConsolidation.Merge(m, src)
}
func (m *RunesConsolidation) XXX_Size() int {
	return m.Size()
}
func (m *RunesConsolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_RunesConsolidation.DiscardUnknown(m)
}

var xxx_messageInfo_RunesConsolidation proto.InternalMessageInfo

func (m *RunesConsolidation) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *RunesConsolidation) GetTargetThreshold() string {
	if m != nil {
		return m.TargetThreshold
	}
	return ""
}

func (m *RunesConsolidation) GetMaxNum() uint32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

// DKG Participant
type DKGParticipant struct {
	// the optional moniker
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// the optional operator address
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
}

func (m *DKGParticipant) Reset()         { *m = DKGParticipant{} }
func (m *DKGParticipant) String() string { return proto.CompactTextString(m) }
func (*DKGParticipant) ProtoMessage()    {}
func (*DKGParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{15}
}
func (m *DKGParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGParticipant.Merge(m, src)
}
func (m *DKGParticipant) XXX_Size() int {
	return m.Size()
}
func (m *DKGParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_DKGParticipant proto.InternalMessageInfo

func (m *DKGParticipant) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *DKGParticipant) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *DKGParticipant) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

// DKG Request
type DKGRequest struct {
	// the unique request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// participant set
	Participants []*DKGParticipant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	// threshold required to perform DKG
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// asset types of vaults to be generated
	VaultTypes []AssetType `protobuf:"varint,4,rep,packed,name=vault_types,json=vaultTypes,proto3,enum=bitway.btcbridge.AssetType" json:"vault_types,omitempty"`
	// indicates if transferring assets to the newly generated vaults when the DKG request is completed
	EnableTransfer bool `protobuf:"varint,5,opt,name=enable_transfer,json=enableTransfer,proto3" json:"enable_transfer,omitempty"`
	// target number of the UTXOs to be transferred each time
	TargetUtxoNum uint32 `protobuf:"varint,6,opt,name=target_utxo_num,json=targetUtxoNum,proto3" json:"target_utxo_num,omitempty"`
	// expiration time
	Expiration *time.Time `protobuf:"bytes,7,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
	// status
	Status DKGRequestStatus `protobuf:"varint,8,opt,name=status,proto3,enum=bitway.btcbridge.DKGRequestStatus" json:"status,omitempty"`
}

func (m *DKGRequest) Reset()         { *m = DKGRequest{} }
func (m *DKGRequest) String() string { return proto.CompactTextString(m) }
func (*DKGRequest) ProtoMessage()    {}
func (*DKGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{16}
}
func (m *DKGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGRequest.Merge(m, src)
}
func (m *DKGRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGRequest proto.InternalMessageInfo

func (m *DKGRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGRequest) GetParticipants() []*DKGParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *DKGRequest) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DKGRequest) GetVaultTypes() []AssetType {
	if m != nil {
		return m.VaultTypes
	}
	return nil
}

func (m *DKGRequest) GetEnableTransfer() bool {
	if m != nil {
		return m.EnableTransfer
	}
	return false
}

func (m *DKGRequest) GetTargetUtxoNum() uint32 {
	if m != nil {
		return m.TargetUtxoNum
	}
	return 0
}

func (m *DKGRequest) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *DKGRequest) GetStatus() DKGRequestStatus {
	if m != nil {
		return m.Status
	}
	return DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED
}

// DKG Completion Request
type DKGCompletionRequest struct {
	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// new vaults generated by DKG
	Vaults []string `protobuf:"bytes,3,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,4,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DKGCompletionRequest) Reset()         { *m = DKGCompletionRequest{} }
func (m *DKGCompletionRequest) String() string { return proto.CompactTextString(m) }
func (*DKGCompletionRequest) ProtoMessage()    {}
func (*DKGCompletionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{17}
}
func (m *DKGCompletionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGCompletionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGCompletionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGCompletionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGCompletionRequest.Merge(m, src)
}
func (m *DKGCompletionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGCompletionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGCompletionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGCompletionRequest proto.InternalMessageInfo

func (m *DKGCompletionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGCompletionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DKGCompletionRequest) GetVaults() []string {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *DKGCompletionRequest) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

func (m *DKGCompletionRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Refreshing Request
type RefreshingRequest struct {
	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// request id of the DKG corresponding to the key shares to be refreshed
	DkgId uint64 `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	// removed participant set
	RemovedParticipants []string `protobuf:"bytes,3,rep,name=removed_participants,json=removedParticipants,proto3" json:"removed_participants,omitempty"`
	// expiration time
	ExpirationTime time.Time `protobuf:"bytes,4,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
	// status
	Status RefreshingStatus `protobuf:"varint,5,opt,name=status,proto3,enum=bitway.btcbridge.RefreshingStatus" json:"status,omitempty"`
}

func (m *RefreshingRequest) Reset()         { *m = RefreshingRequest{} }
func (m *RefreshingRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshingRequest) ProtoMessage()    {}
func (*RefreshingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{18}
}
func (m *RefreshingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshingRequest.Merge(m, src)
}
func (m *RefreshingRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshingRequest proto.InternalMessageInfo

func (m *RefreshingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RefreshingRequest) GetDkgId() uint64 {
	if m != nil {
		return m.DkgId
	}
	return 0
}

func (m *RefreshingRequest) GetRemovedParticipants() []string {
	if m != nil {
		return m.RemovedParticipants
	}
	return nil
}

func (m *RefreshingRequest) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func (m *RefreshingRequest) GetStatus() RefreshingStatus {
	if m != nil {
		return m.Status
	}
	return RefreshingStatus_REFRESHING_STATUS_UNSPECIFIED
}

// Refreshing Completion
type RefreshingCompletion struct {
	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RefreshingCompletion) Reset()         { *m = RefreshingCompletion{} }
func (m *RefreshingCompletion) String() string { return proto.CompactTextString(m) }
func (*RefreshingCompletion) ProtoMessage()    {}
func (*RefreshingCompletion) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f64c00fd58c2a9e, []int{19}
}
func (m *RefreshingCompletion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshingCompletion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshingCompletion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshingCompletion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshingCompletion.Merge(m, src)
}
func (m *RefreshingCompletion) XXX_Size() int {
	return m.Size()
}
func (m *RefreshingCompletion) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshingCompletion.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshingCompletion proto.InternalMessageInfo

func (m *RefreshingCompletion) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RefreshingCompletion) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *RefreshingCompletion) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

func (m *RefreshingCompletion) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterEnum("bitway.btcbridge.SigningStatus", SigningStatus_name, SigningStatus_value)
	proto.RegisterEnum("bitway.btcbridge.DKGRequestStatus", DKGRequestStatus_name, DKGRequestStatus_value)
	proto.RegisterEnum("bitway.btcbridge.RefreshingStatus", RefreshingStatus_name, RefreshingStatus_value)
	proto.RegisterType((*FeeRate)(nil), "bitway.btcbridge.FeeRate")
	proto.RegisterType((*SigningRequest)(nil), "bitway.btcbridge.SigningRequest")
	proto.RegisterType((*CompactSigningRequest)(nil), "bitway.btcbridge.CompactSigningRequest")
	proto.RegisterType((*WithdrawRequest)(nil), "bitway.btcbridge.WithdrawRequest")
	proto.RegisterType((*IBCWithdrawRequest)(nil), "bitway.btcbridge.IBCWithdrawRequest")
	proto.RegisterType((*RateLimit)(nil), "bitway.btcbridge.RateLimit")
	proto.RegisterType((*GlobalRateLimit)(nil), "bitway.btcbridge.GlobalRateLimit")
	proto.RegisterType((*AddressRateLimit)(nil), "bitway.btcbridge.AddressRateLimit")
	proto.RegisterType((*AddressRateLimitDetails)(nil), "bitway.btcbridge.AddressRateLimitDetails")
	proto.RegisterType((*UTXO)(nil), "bitway.btcbridge.UTXO")
	proto.RegisterType((*RuneBalance)(nil), "bitway.btcbridge.RuneBalance")
	proto.RegisterType((*RuneId)(nil), "bitway.btcbridge.RuneId")
	proto.RegisterType((*Edict)(nil), "bitway.btcbridge.Edict")
	proto.RegisterType((*BtcConsolidation)(nil), "bitway.btcbridge.BtcConsolidation")
	proto.RegisterType((*RunesConsolidation)(nil), "bitway.btcbridge.RunesConsolidation")
	proto.RegisterType((*DKGParticipant)(nil), "bitway.btcbridge.DKGParticipant")
	proto.RegisterType((*DKGRequest)(nil), "bitway.btcbridge.DKGRequest")
	proto.RegisterType((*DKGCompletionRequest)(nil), "bitway.btcbridge.DKGCompletionRequest")
	proto.RegisterType((*RefreshingRequest)(nil), "bitway.btcbridge.RefreshingRequest")
	proto.RegisterType((*RefreshingCompletion)(nil), "bitway.btcbridge.RefreshingCompletion")
}

func init() { proto.RegisterFile("bitway/btcbridge/btcbridge.proto", fileDescriptor_0f64c00fd58c2a9e) }

var fileDescriptor_0f64c00fd58c2a9e = []byte{
	// 1529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xbf, 0x6f, 0xdb, 0x48,
	0x16, 0x36, 0x25, 0x4a, 0xb2, 0x9e, 0x7f, 0x29, 0x73, 0x8e, 0x23, 0xcb, 0xb1, 0xac, 0x10, 0x87,
	0x3b, 0x5f, 0x0a, 0x09, 0x71, 0x70, 0x08, 0x70, 0x38, 0xe0, 0x60, 0x4b, 0xb2, 0x22, 0xd8, 0x96,
	0x7d, 0x94, 0x9c, 0x3b, 0x5c, 0x43, 0x0c, 0xc5, 0x09, 0x45, 0x58, 0x22, 0x19, 0xce, 0xd0, 0x91,
	0xbb, 0xbb, 0xea, 0xda, 0x6c, 0xb1, 0xf5, 0x16, 0xbb, 0xf5, 0xd6, 0x69, 0xb7, 0x4b, 0xb7, 0x29,
	0xb7, 0xda, 0x5d, 0x24, 0xff, 0xc0, 0x96, 0x5b, 0x2e, 0x66, 0x48, 0x89, 0x12, 0x25, 0x3b, 0x36,
	0xb0, 0x45, 0xba, 0x79, 0xdf, 0x7b, 0x33, 0xef, 0x9b, 0xef, 0xbd, 0x19, 0x0e, 0xa1, 0xa4, 0x5b,
	0xec, 0x35, 0xbe, 0xaa, 0xe8, 0xac, 0xab, 0x7b, 0x96, 0x61, 0x92, 0x68, 0x54, 0x76, 0x3d, 0x87,
	0x39, 0x28, 0x17, 0x44, 0x94, 0xc7, 0x78, 0x61, 0xdd, 0x74, 0x4c, 0x47, 0x38, 0x2b, 0x7c, 0x14,
	0xc4, 0x15, 0x36, 0x4d, 0xc7, 0x31, 0xfb, 0xa4, 0x22, 0x2c, 0xdd, 0x7f, 0x59, 0xc1, 0xf6, 0x55,
	0xe8, 0xda, 0x89, 0xbb, 0x98, 0x35, 0x20, 0x94, 0xe1, 0x81, 0x1b, 0x06, 0x14, 0xbb, 0x0e, 0x1d,
	0x38, 0xb4, 0xa2, 0x63, 0x4a, 0x2a, 0x97, 0x4f, 0x74, 0xc2, 0xf0, 0x93, 0x4a, 0xd7, 0xb1, 0xec,
	0xd1, 0xda, 0x81, 0x5f, 0x0b, 0x92, 0x06, 0x46, 0xe8, 0xda, 0x9e, 0xd9, 0x80, 0x8b, 0x3d, 0x3c,
	0x08, 0xdd, 0xca, 0x33, 0xc8, 0x1c, 0x12, 0xa2, 0x62, 0x46, 0xd0, 0x3a, 0xa4, 0x2e, 0x71, 0xdf,
	0x27, 0x79, 0xa9, 0x24, 0xed, 0x26, 0xd5, 0xc0, 0x40, 0x1b, 0x90, 0xee, 0x11, 0xcb, 0xec, 0xb1,
	0x7c, 0x42, 0xc0, 0xa1, 0xa5, 0x7c, 0x9d, 0x80, 0xd5, 0xb6, 0x65, 0xda, 0x96, 0x6d, 0xaa, 0xe4,
	0x95, 0x4f, 0x28, 0x43, 0x79, 0xc8, 0x60, 0xc3, 0xf0, 0x08, 0xa5, 0x62, 0x89, 0xac, 0x3a, 0x32,
	0x51, 0x01, 0x16, 0x29, 0x0f, 0xb2, 0xbb, 0x44, 0x2c, 0x23, 0xab, 0x63, 0x1b, 0x55, 0x40, 0x66,
	0x57, 0x2e, 0xc9, 0x27, 0x4b, 0xd2, 0xee, 0xea, 0xde, 0x56, 0x39, 0x2e, 0x67, 0x79, 0x9f, 0x52,
	0xc2, 0x3a, 0x57, 0x2e, 0x51, 0x45, 0x20, 0x42, 0x20, 0xb3, 0xa1, 0x65, 0xe4, 0x65, 0x91, 0x43,
	0x8c, 0x39, 0xe6, 0x52, 0x9d, 0xe5, 0x53, 0x01, 0xc6, 0xc7, 0xa8, 0x09, 0x2b, 0x5d, 0x8f, 0x60,
	0x66, 0x39, 0xb6, 0xc6, 0x05, 0xcd, 0xa7, 0x4b, 0xd2, 0xee, 0xd2, 0x5e, 0xa1, 0x1c, 0xa8, 0x5d,
	0x1e, 0xa9, 0x5d, 0xee, 0x8c, 0xd4, 0x3e, 0x58, 0x7c, 0xf7, 0xe3, 0xce, 0xc2, 0x9b, 0x9f, 0x76,
	0x24, 0x75, 0x79, 0x34, 0x95, 0x3b, 0xd1, 0x33, 0x48, 0x53, 0x86, 0x99, 0x4f, 0xf3, 0x19, 0xc1,
	0x72, 0x67, 0x96, 0x65, 0xa8, 0x45, 0x5b, 0x84, 0xa9, 0x61, 0xb8, 0xf2, 0x7d, 0x02, 0xee, 0x57,
	0x9d, 0x81, 0x8b, 0xbb, 0xec, 0xf3, 0x11, 0x2b, 0x0f, 0x19, 0x6a, 0x99, 0x36, 0xf1, 0x68, 0x3e,
	0x55, 0x4a, 0xf2, 0xd4, 0xa1, 0x89, 0xb6, 0x01, 0xa8, 0x65, 0x6a, 0x3d, 0x4c, 0x7b, 0x84, 0xe6,
	0xd3, 0xc2, 0x99, 0xa5, 0x96, 0xf9, 0x5c, 0x00, 0xb3, 0x8a, 0x66, 0x7e, 0x07, 0x45, 0x17, 0xef,
	0xa6, 0x28, 0x85, 0xb5, 0x7f, 0x59, 0xac, 0x67, 0x78, 0xf8, 0xf5, 0xa7, 0xa5, 0xdc, 0x80, 0x34,
	0x1e, 0x38, 0xbe, 0x1d, 0x34, 0x6f, 0x56, 0x0d, 0xad, 0x29, 0x89, 0x93, 0x31, 0x89, 0xe7, 0x28,
	0xa6, 0xfc, 0x4f, 0x02, 0xd4, 0x3c, 0xa8, 0xc6, 0x13, 0x6f, 0x03, 0x74, 0x7b, 0xd8, 0xb6, 0x49,
	0x5f, 0xb3, 0x8c, 0x30, 0x77, 0x36, 0x44, 0x9a, 0xc6, 0x8d, 0x85, 0x9c, 0xe0, 0x9c, 0xbc, 0x8e,
	0xb3, 0x3c, 0xc9, 0x59, 0x79, 0x2b, 0x41, 0x96, 0x9f, 0xd3, 0x63, 0x6b, 0x60, 0x31, 0xd4, 0x86,
	0x7b, 0x66, 0xdf, 0xd1, 0x71, 0x5f, 0xf3, 0x30, 0x23, 0x5a, 0x9f, 0x83, 0x82, 0xc1, 0xd2, 0xde,
	0xa3, 0x59, 0x29, 0x1b, 0x22, 0x74, 0x3c, 0xfb, 0x40, 0xe6, 0x55, 0x51, 0xd7, 0xcc, 0x69, 0x18,
	0xbd, 0x00, 0x14, 0xb2, 0x98, 0x5c, 0x35, 0x21, 0x56, 0x55, 0xe6, 0xf4, 0x5a, 0x10, 0x1b, 0x5f,
	0x36, 0x87, 0x63, 0xb8, 0xf2, 0x9d, 0x04, 0x6b, 0x31, 0x0a, 0xa8, 0x0a, 0x40, 0x19, 0xf6, 0x58,
	0xd0, 0x48, 0xd2, 0x1d, 0x1a, 0x29, 0x2b, 0xe6, 0x89, 0x2e, 0xfa, 0x07, 0x2c, 0x12, 0xdb, 0x08,
	0x96, 0x48, 0xdc, 0x61, 0x89, 0x0c, 0xb1, 0x0d, 0xb1, 0xc0, 0x3a, 0xa4, 0x5e, 0xf9, 0x0e, 0xc3,
	0xa2, 0x08, 0x49, 0x35, 0x30, 0x78, 0x0b, 0xf8, 0x94, 0x04, 0x2d, 0x90, 0x54, 0xc5, 0x58, 0xf9,
	0x56, 0x82, 0x5c, 0x7c, 0xc3, 0x9f, 0xf3, 0x26, 0x94, 0x06, 0x3c, 0x88, 0xf3, 0xad, 0x11, 0x86,
	0xad, 0x3e, 0xbd, 0xe1, 0xc0, 0x8c, 0x76, 0x9e, 0x98, 0xd8, 0xf9, 0x2f, 0x12, 0xc8, 0xe7, 0x9d,
	0x7f, 0x9f, 0x8e, 0x4f, 0x86, 0x34, 0x7d, 0xf1, 0x5e, 0x3a, 0x3e, 0x0b, 0xfb, 0x5b, 0x8c, 0x6f,
	0xdd, 0xdb, 0xf2, 0xf8, 0x3c, 0x46, 0x1f, 0x99, 0x54, 0x80, 0x07, 0x16, 0xfa, 0x23, 0xac, 0xba,
	0xbe, 0xae, 0x5d, 0x90, 0x2b, 0x8d, 0x76, 0x3d, 0xcb, 0x65, 0xe2, 0x0e, 0x5f, 0x56, 0x97, 0x5d,
	0x5f, 0x3f, 0x22, 0x57, 0x6d, 0x81, 0xa1, 0x2d, 0xc8, 0x5a, 0x54, 0xeb, 0x3b, 0xdd, 0x0b, 0x62,
	0x88, 0x2b, 0x69, 0x51, 0x5d, 0xb4, 0xe8, 0xb1, 0xb0, 0xd1, 0x53, 0x48, 0x79, 0xbe, 0x4d, 0xf8,
	0x3d, 0x93, 0xdc, 0x5d, 0xda, 0xdb, 0x9e, 0x6d, 0x63, 0xd5, 0xb7, 0xc9, 0x01, 0xee, 0x63, 0xbb,
	0x4b, 0xd4, 0x20, 0x56, 0xf9, 0x2b, 0x2c, 0x4d, 0xa0, 0x68, 0x15, 0x12, 0xe3, 0x6d, 0x27, 0x2c,
	0xe3, 0xba, 0x6b, 0x45, 0x29, 0x43, 0x9a, 0x4f, 0x6b, 0x1a, 0xbc, 0x24, 0x3a, 0x27, 0x24, 0x26,
	0xc9, 0x6a, 0x60, 0xf0, 0x75, 0xd8, 0x50, 0xcc, 0x59, 0x51, 0x13, 0x6c, 0xa8, 0x60, 0x48, 0xd5,
	0x0d, 0xab, 0xcb, 0xd0, 0xee, 0x38, 0xc1, 0xd2, 0x5e, 0x7e, 0x3e, 0xc3, 0xa6, 0x71, 0x53, 0x6a,
	0x8e, 0x3b, 0x3e, 0x73, 0x7d, 0x26, 0x24, 0x5f, 0x51, 0x43, 0x4b, 0x79, 0x01, 0xb9, 0x03, 0xd6,
	0xad, 0x3a, 0x36, 0x75, 0xfa, 0x96, 0x21, 0xee, 0x5f, 0xf4, 0x17, 0xc8, 0x31, 0xec, 0x99, 0x84,
	0x69, 0xac, 0xe7, 0x11, 0xda, 0x73, 0xfa, 0x46, 0xf8, 0xcd, 0x5f, 0x0b, 0xf0, 0xce, 0x08, 0x46,
	0x0f, 0x20, 0x33, 0xc0, 0x43, 0xcd, 0xf6, 0x07, 0x21, 0xed, 0xf4, 0x00, 0x0f, 0x5b, 0xfe, 0x40,
	0x79, 0x05, 0x88, 0xb3, 0xa2, 0xd3, 0x2b, 0x3f, 0x80, 0x0c, 0x17, 0x30, 0xba, 0x0d, 0xd3, 0x5e,
	0xa0, 0xc7, 0xbc, 0x94, 0xc1, 0x06, 0x6e, 0x4a, 0x99, 0x9c, 0x4a, 0xf9, 0x5f, 0x09, 0x56, 0x6b,
	0x47, 0x8d, 0x33, 0xec, 0x31, 0xab, 0x6b, 0xb9, 0xd8, 0x16, 0x9d, 0x36, 0x70, 0x6c, 0xeb, 0x82,
	0x78, 0xa3, 0x46, 0x0e, 0x4d, 0x9e, 0xd0, 0x71, 0x89, 0x87, 0x99, 0xe3, 0x69, 0xa3, 0x66, 0x0c,
	0x13, 0x8e, 0xf0, 0xf0, 0x74, 0xf0, 0xd0, 0xae, 0x63, 0x53, 0x62, 0x53, 0x9f, 0x6a, 0xae, 0xaf,
	0x5f, 0x90, 0xab, 0xb0, 0x6f, 0xd7, 0xc6, 0xf8, 0x99, 0x80, 0x95, 0x2f, 0x92, 0x00, 0xb5, 0xa3,
	0xc6, 0xe8, 0xfe, 0x8f, 0xfa, 0x42, 0x16, 0xc5, 0xa9, 0xc1, 0xb2, 0x1b, 0xb1, 0xe3, 0x09, 0x79,
	0xcb, 0x95, 0x66, 0x0b, 0x3a, 0xbd, 0x0d, 0x75, 0x6a, 0x16, 0x7a, 0x08, 0xd9, 0x48, 0xa4, 0x40,
	0x82, 0x08, 0x40, 0x7f, 0x87, 0xa5, 0x4b, 0xec, 0xf7, 0x99, 0xc6, 0x3f, 0xef, 0x34, 0x2f, 0x97,
	0x92, 0x9f, 0x7a, 0x08, 0x80, 0x88, 0xe7, 0x43, 0x8a, 0xfe, 0x0c, 0x6b, 0xc4, 0xc6, 0x7a, 0x9f,
	0x68, 0xcc, 0xc3, 0x36, 0x7d, 0x49, 0x3c, 0x71, 0xe2, 0x16, 0xd5, 0xd5, 0x00, 0xee, 0x84, 0x28,
	0xfa, 0x13, 0x84, 0x85, 0xd1, 0x7c, 0x36, 0x74, 0x44, 0x35, 0xd2, 0x82, 0xca, 0x4a, 0x00, 0x9f,
	0xb3, 0xa1, 0xd3, 0xf2, 0x07, 0xa8, 0x06, 0x40, 0x86, 0xae, 0xe5, 0x89, 0xfa, 0xdf, 0xf2, 0x3d,
	0x20, 0x89, 0xeb, 0x6b, 0x62, 0x1e, 0xfa, 0x5b, 0xec, 0x35, 0xa0, 0xcc, 0x95, 0x2c, 0x94, 0x3d,
	0xf6, 0x20, 0xf8, 0x4a, 0x82, 0xf5, 0xda, 0x51, 0x83, 0xbf, 0xb2, 0xfa, 0x84, 0xaf, 0x76, 0x5d,
	0x75, 0x36, 0x20, 0x4d, 0x89, 0x6d, 0x10, 0x6f, 0x74, 0x74, 0x02, 0x8b, 0xe3, 0x42, 0x21, 0x7e,
	0x5b, 0xf1, 0x07, 0x4f, 0x68, 0xcd, 0xed, 0x0b, 0x79, 0x6e, 0x5f, 0xf0, 0x92, 0xf1, 0x27, 0x14,
	0x66, 0xbe, 0x47, 0xc2, 0x37, 0x68, 0x04, 0x28, 0xbf, 0x4a, 0x70, 0x4f, 0x25, 0x2f, 0x79, 0x05,
	0x27, 0x1e, 0x80, 0x71, 0x7a, 0xf7, 0x21, 0x6d, 0x5c, 0x98, 0xfc, 0xe8, 0x04, 0x77, 0x69, 0xca,
	0xb8, 0x30, 0x9b, 0x06, 0x7a, 0x02, 0xeb, 0x1e, 0x19, 0x38, 0x97, 0xc4, 0xd0, 0xa6, 0x7a, 0x2b,
	0xe0, 0xfa, 0x87, 0xd0, 0x77, 0x36, 0xd9, 0x40, 0x27, 0xb0, 0x16, 0x69, 0x1b, 0x7c, 0x57, 0xe4,
	0x3b, 0x7c, 0x57, 0x56, 0xa3, 0xc9, 0xe2, 0xf3, 0x12, 0x15, 0x27, 0x75, 0x5d, 0x71, 0xa2, 0xdd,
	0xc5, 0x8a, 0xf3, 0x7f, 0x09, 0xd6, 0x23, 0x67, 0x54, 0xa3, 0x5b, 0x17, 0xe7, 0xf6, 0x87, 0x73,
	0xba, 0x08, 0x72, 0xac, 0x08, 0x8f, 0xbf, 0x91, 0x60, 0x65, 0xea, 0x45, 0x89, 0x8a, 0x50, 0x68,
	0x37, 0x1b, 0xad, 0x66, 0xab, 0xa1, 0xb5, 0x3b, 0xfb, 0x9d, 0xf3, 0xb6, 0x76, 0xde, 0x6a, 0x9f,
	0xd5, 0xab, 0xcd, 0xc3, 0x66, 0xbd, 0x96, 0x5b, 0x40, 0x05, 0xd8, 0x88, 0xf9, 0xcf, 0xea, 0xad,
	0x5a, 0xb3, 0xd5, 0xc8, 0x49, 0x73, 0xe6, 0x1e, 0xa8, 0xa7, 0xfb, 0xb5, 0xea, 0x7e, 0xbb, 0x53,
	0xaf, 0xe5, 0x12, 0xe8, 0x21, 0xe4, 0x63, 0xfe, 0xea, 0x69, 0xeb, 0xb0, 0xa9, 0x9e, 0xd4, 0x6b,
	0xb9, 0x24, 0xda, 0x84, 0xfb, 0x31, 0xef, 0xe1, 0x7e, 0xf3, 0xb8, 0x5e, 0xcb, 0xc9, 0x8f, 0xdf,
	0x4a, 0x90, 0x8b, 0xb7, 0x3a, 0x52, 0xa0, 0x58, 0x3b, 0x6a, 0x68, 0x6a, 0xfd, 0x9f, 0xe7, 0xf5,
	0x76, 0x67, 0x3e, 0xdb, 0x22, 0x14, 0xe6, 0xc4, 0x44, 0x8c, 0x4b, 0xf0, 0x70, 0x8e, 0xbf, 0x7a,
	0x7a, 0x72, 0x76, 0x5c, 0x0f, 0x38, 0x6f, 0xc3, 0xe6, 0x9c, 0x88, 0x90, 0x59, 0x12, 0xed, 0xc0,
	0xd6, 0x1c, 0x77, 0xa7, 0x79, 0x52, 0xaf, 0x9d, 0x9e, 0x77, 0x72, 0xf2, 0xe3, 0x2f, 0x25, 0xc8,
	0xc5, 0x1b, 0x01, 0x3d, 0x82, 0x6d, 0xb5, 0x7e, 0xa8, 0xd6, 0xdb, 0xcf, 0xaf, 0xd5, 0x79, 0x1b,
	0x36, 0x67, 0x43, 0x22, 0xe2, 0x3b, 0xb0, 0x35, 0xeb, 0x9e, 0xe4, 0x5d, 0x84, 0xc2, 0x6c, 0xc0,
	0x98, 0x57, 0xf2, 0xe0, 0xf9, 0xbb, 0x0f, 0x45, 0xe9, 0xfd, 0x87, 0xa2, 0xf4, 0xf3, 0x87, 0xa2,
	0xf4, 0xe6, 0x63, 0x71, 0xe1, 0xfd, 0xc7, 0xe2, 0xc2, 0x0f, 0x1f, 0x8b, 0x0b, 0xff, 0x29, 0x9b,
	0x16, 0xeb, 0xf9, 0x7a, 0xb9, 0xeb, 0x0c, 0x2a, 0x41, 0x4f, 0xf7, 0xb1, 0x4e, 0xc3, 0x61, 0x65,
	0x38, 0xf1, 0xcf, 0x2c, 0x2e, 0x5b, 0x3d, 0x2d, 0xce, 0xcd, 0xd3, 0xdf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xee, 0xf1, 0x62, 0x35, 0x15, 0x10, 0x00, 0x00,
}

func (m *FeeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SigningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBtcbridge(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.Psbt) > 0 {
		i -= len(m.Psbt)
		copy(dAtA[i:], m.Psbt)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Psbt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Sequence != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactSigningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactSigningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactSigningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBtcbridge(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if len(m.SigHashes) > 0 {
		for iNdEx := len(m.SigHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SigHashes[iNdEx])
			copy(dAtA[i:], m.SigHashes[iNdEx])
			i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.SigHashes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Sequence != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sequence != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AddressRateLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBtcbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.GlobalRateLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBtcbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GlobalRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Used != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x20
	}
	if m.Quota != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x18
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintBtcbridge(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintBtcbridge(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddressRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quota != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x18
	}
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintBtcbridge(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintBtcbridge(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddressRateLimitDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressRateLimitDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressRateLimitDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Used != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UTXO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UTXO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UTXO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Runes) > 0 {
		for iNdEx := len(m.Runes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKeyScript) > 0 {
		i -= len(m.PubKeyScript)
		copy(dAtA[i:], m.PubKeyScript)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.PubKeyScript)))
		i--
		dAtA[i] = 0x32
	}
	if m.Height != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vout != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Vout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Tx))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Output))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BtcConsolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtcConsolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtcConsolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNum != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetThreshold != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.TargetThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunesConsolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunesConsolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunesConsolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNum != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TargetThreshold) > 0 {
		i -= len(m.TargetThreshold)
		copy(dAtA[i:], m.TargetThreshold)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.TargetThreshold)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Expiration != nil {
		n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintBtcbridge(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x3a
	}
	if m.TargetUtxoNum != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.TargetUtxoNum))
		i--
		dAtA[i] = 0x30
	}
	if m.EnableTransfer {
		i--
		if m.EnableTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VaultTypes) > 0 {
		dAtA12 := make([]byte, len(m.VaultTypes)*10)
		var j11 int
		for _, num := range m.VaultTypes {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintBtcbridge(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	if m.Threshold != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DKGCompletionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGCompletionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGCompletionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vaults[iNdEx])
			copy(dAtA[i:], m.Vaults[iNdEx])
			i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Vaults[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	n13, err13 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintBtcbridge(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x22
	if len(m.RemovedParticipants) > 0 {
		for iNdEx := len(m.RemovedParticipants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemovedParticipants[iNdEx])
			copy(dAtA[i:], m.RemovedParticipants[iNdEx])
			i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.RemovedParticipants[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DkgId != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.DkgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshingCompletion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshingCompletion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshingCompletion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBtcbridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBtcbridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovBtcbridge(uint64(m.Value))
	}
	if m.Height != 0 {
		n += 1 + sovBtcbridge(uint64(m.Height))
	}
	return n
}

func (m *SigningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovBtcbridge(uint64(m.Sequence))
	}
	if m.Type != 0 {
		n += 1 + sovBtcbridge(uint64(m.Type))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Psbt)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *CompactSigningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovBtcbridge(uint64(m.Sequence))
	}
	if m.Type != 0 {
		n += 1 + sovBtcbridge(uint64(m.Type))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	if len(m.SigHashes) > 0 {
		for _, s := range m.SigHashes {
			l = len(s)
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *WithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovBtcbridge(uint64(m.Sequence))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *IBCWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovBtcbridge(uint64(m.Sequence))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GlobalRateLimit.Size()
	n += 1 + l + sovBtcbridge(uint64(l))
	l = m.AddressRateLimit.Size()
	n += 1 + l + sovBtcbridge(uint64(l))
	return n
}

func (m *GlobalRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	if m.Quota != 0 {
		n += 1 + sovBtcbridge(uint64(m.Quota))
	}
	if m.Used != 0 {
		n += 1 + sovBtcbridge(uint64(m.Used))
	}
	return n
}

func (m *AddressRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	if m.Quota != 0 {
		n += 1 + sovBtcbridge(uint64(m.Quota))
	}
	return n
}

func (m *AddressRateLimitDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Used != 0 {
		n += 1 + sovBtcbridge(uint64(m.Used))
	}
	return n
}

func (m *UTXO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Vout != 0 {
		n += 1 + sovBtcbridge(uint64(m.Vout))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovBtcbridge(uint64(m.Amount))
	}
	if m.Height != 0 {
		n += 1 + sovBtcbridge(uint64(m.Height))
	}
	l = len(m.PubKeyScript)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.IsLocked {
		n += 2
	}
	if len(m.Runes) > 0 {
		for _, e := range m.Runes {
			l = e.Size()
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	return n
}

func (m *RuneBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *RuneId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovBtcbridge(uint64(m.Block))
	}
	if m.Tx != 0 {
		n += 1 + sovBtcbridge(uint64(m.Tx))
	}
	return n
}

func (m *Edict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Output != 0 {
		n += 1 + sovBtcbridge(uint64(m.Output))
	}
	return n
}

func (m *BtcConsolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetThreshold != 0 {
		n += 1 + sovBtcbridge(uint64(m.TargetThreshold))
	}
	if m.MaxNum != 0 {
		n += 1 + sovBtcbridge(uint64(m.MaxNum))
	}
	return n
}

func (m *RunesConsolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.TargetThreshold)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.MaxNum != 0 {
		n += 1 + sovBtcbridge(uint64(m.MaxNum))
	}
	return n
}

func (m *DKGParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *DKGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovBtcbridge(uint64(m.Threshold))
	}
	if len(m.VaultTypes) > 0 {
		l = 0
		for _, e := range m.VaultTypes {
			l += sovBtcbridge(uint64(e))
		}
		n += 1 + sovBtcbridge(uint64(l)) + l
	}
	if m.EnableTransfer {
		n += 2
	}
	if m.TargetUtxoNum != 0 {
		n += 1 + sovBtcbridge(uint64(m.TargetUtxoNum))
	}
	if m.Expiration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *DKGCompletionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if len(m.Vaults) > 0 {
		for _, s := range m.Vaults {
			l = len(s)
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *RefreshingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	if m.DkgId != 0 {
		n += 1 + sovBtcbridge(uint64(m.DkgId))
	}
	if len(m.RemovedParticipants) > 0 {
		for _, s := range m.RemovedParticipants {
			l = len(s)
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovBtcbridge(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *RefreshingCompletion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func sovBtcbridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBtcbridge(x uint64) (n int) {
	return sovBtcbridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psbt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psbt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactSigningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactSigningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactSigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigHashes = append(m.SigHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalRateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddressRateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressRateLimitDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressRateLimitDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressRateLimitDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UTXO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UTXO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UTXO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
			}
			m.Vout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyScript = append(m.PubKeyScript[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeyScript == nil {
				m.PubKeyScript = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runes = append(m.Runes, &RuneBalance{})
			if err := m.Runes[len(m.Runes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			m.Tx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuneId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BtcConsolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtcConsolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtcConsolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			m.TargetThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunesConsolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunesConsolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunesConsolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &DKGParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v AssetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBtcbridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultTypes = append(m.VaultTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBtcbridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBtcbridge
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBtcbridge
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.VaultTypes) == 0 {
					m.VaultTypes = make([]AssetType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AssetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBtcbridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AssetType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultTypes = append(m.VaultTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultTypes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTransfer = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUtxoNum", wireType)
			}
			m.TargetUtxoNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUtxoNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DKGRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGCompletionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGCompletionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGCompletionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
			}
			m.DkgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DkgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedParticipants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedParticipants = append(m.RemovedParticipants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RefreshingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshingCompletion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshingCompletion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshingCompletion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBtcbridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBtcbridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBtcbridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBtcbridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBtcbridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBtcbridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBtcbridge = fmt.Errorf("proto: unexpected end of group")
)
