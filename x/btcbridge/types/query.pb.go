// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/btcbridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryWithdrawRequestsByAddressRequest is request type for the Query/WithdrawRequestsByAddress RPC method.
type QueryWithdrawRequestsByAddressRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawRequestsByAddressRequest) Reset()         { *m = QueryWithdrawRequestsByAddressRequest{} }
func (m *QueryWithdrawRequestsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawRequestsByAddressRequest) ProtoMessage()    {}
func (*QueryWithdrawRequestsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{0}
}
func (m *QueryWithdrawRequestsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawRequestsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawRequestsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawRequestsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawRequestsByAddressRequest.Merge(m, src)
}
func (m *QueryWithdrawRequestsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawRequestsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawRequestsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawRequestsByAddressRequest proto.InternalMessageInfo

func (m *QueryWithdrawRequestsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryWithdrawRequestsByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWithdrawRequestsByAddressResponse is response type for the Query/WithdrawRequestsByAddress RPC method.
type QueryWithdrawRequestsByAddressResponse struct {
	Requests   []*WithdrawRequest  `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawRequestsByAddressResponse) Reset() {
	*m = QueryWithdrawRequestsByAddressResponse{}
}
func (m *QueryWithdrawRequestsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawRequestsByAddressResponse) ProtoMessage()    {}
func (*QueryWithdrawRequestsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{1}
}
func (m *QueryWithdrawRequestsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawRequestsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawRequestsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawRequestsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawRequestsByAddressResponse.Merge(m, src)
}
func (m *QueryWithdrawRequestsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawRequestsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawRequestsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawRequestsByAddressResponse proto.InternalMessageInfo

func (m *QueryWithdrawRequestsByAddressResponse) GetRequests() []*WithdrawRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QueryWithdrawRequestsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWithdrawRequestsByTxHashRequest is request type for the Query/WithdrawRequestsByTxHash RPC method.
type QueryWithdrawRequestsByTxHashRequest struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *QueryWithdrawRequestsByTxHashRequest) Reset()         { *m = QueryWithdrawRequestsByTxHashRequest{} }
func (m *QueryWithdrawRequestsByTxHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawRequestsByTxHashRequest) ProtoMessage()    {}
func (*QueryWithdrawRequestsByTxHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{2}
}
func (m *QueryWithdrawRequestsByTxHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawRequestsByTxHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawRequestsByTxHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawRequestsByTxHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawRequestsByTxHashRequest.Merge(m, src)
}
func (m *QueryWithdrawRequestsByTxHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawRequestsByTxHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawRequestsByTxHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawRequestsByTxHashRequest proto.InternalMessageInfo

func (m *QueryWithdrawRequestsByTxHashRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// QueryWithdrawRequestsByTxHashResponse is response type for the Query/WithdrawRequestsByTxHash RPC method.
type QueryWithdrawRequestsByTxHashResponse struct {
	Requests []*WithdrawRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryWithdrawRequestsByTxHashResponse) Reset()         { *m = QueryWithdrawRequestsByTxHashResponse{} }
func (m *QueryWithdrawRequestsByTxHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawRequestsByTxHashResponse) ProtoMessage()    {}
func (*QueryWithdrawRequestsByTxHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{3}
}
func (m *QueryWithdrawRequestsByTxHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawRequestsByTxHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawRequestsByTxHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawRequestsByTxHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawRequestsByTxHashResponse.Merge(m, src)
}
func (m *QueryWithdrawRequestsByTxHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawRequestsByTxHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawRequestsByTxHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawRequestsByTxHashResponse proto.InternalMessageInfo

func (m *QueryWithdrawRequestsByTxHashResponse) GetRequests() []*WithdrawRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// QueryPendingBtcWithdrawRequestsRequest is request type for the Query/PendingBtcWithdrawRequests RPC method.
type QueryPendingBtcWithdrawRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingBtcWithdrawRequestsRequest) Reset() {
	*m = QueryPendingBtcWithdrawRequestsRequest{}
}
func (m *QueryPendingBtcWithdrawRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBtcWithdrawRequestsRequest) ProtoMessage()    {}
func (*QueryPendingBtcWithdrawRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{4}
}
func (m *QueryPendingBtcWithdrawRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBtcWithdrawRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBtcWithdrawRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBtcWithdrawRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBtcWithdrawRequestsRequest.Merge(m, src)
}
func (m *QueryPendingBtcWithdrawRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBtcWithdrawRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBtcWithdrawRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBtcWithdrawRequestsRequest proto.InternalMessageInfo

func (m *QueryPendingBtcWithdrawRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingBtcWithdrawRequestsResponse is response type for the Query/PendingBtcWithdrawRequests RPC method.
type QueryPendingBtcWithdrawRequestsResponse struct {
	Requests   []*WithdrawRequest  `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingBtcWithdrawRequestsResponse) Reset() {
	*m = QueryPendingBtcWithdrawRequestsResponse{}
}
func (m *QueryPendingBtcWithdrawRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBtcWithdrawRequestsResponse) ProtoMessage()    {}
func (*QueryPendingBtcWithdrawRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{5}
}
func (m *QueryPendingBtcWithdrawRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBtcWithdrawRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBtcWithdrawRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBtcWithdrawRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBtcWithdrawRequestsResponse.Merge(m, src)
}
func (m *QueryPendingBtcWithdrawRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBtcWithdrawRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBtcWithdrawRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBtcWithdrawRequestsResponse proto.InternalMessageInfo

func (m *QueryPendingBtcWithdrawRequestsResponse) GetRequests() []*WithdrawRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QueryPendingBtcWithdrawRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestRequest is request type for the Query/SigningRequest RPC method.
type QuerySigningRequestRequest struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QuerySigningRequestRequest) Reset()         { *m = QuerySigningRequestRequest{} }
func (m *QuerySigningRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestRequest) ProtoMessage()    {}
func (*QuerySigningRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{6}
}
func (m *QuerySigningRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestRequest.Merge(m, src)
}
func (m *QuerySigningRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestRequest proto.InternalMessageInfo

func (m *QuerySigningRequestRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// QuerySigningRequestResponse is response type for the Query/SigningRequest RPC method.
type QuerySigningRequestResponse struct {
	Request *SigningRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QuerySigningRequestResponse) Reset()         { *m = QuerySigningRequestResponse{} }
func (m *QuerySigningRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestResponse) ProtoMessage()    {}
func (*QuerySigningRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{7}
}
func (m *QuerySigningRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestResponse.Merge(m, src)
}
func (m *QuerySigningRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestResponse proto.InternalMessageInfo

func (m *QuerySigningRequestResponse) GetRequest() *SigningRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QuerySigningRequestsRequest is request type for the Query/SigningRequests RPC method.
type QuerySigningRequestsRequest struct {
	Status     SigningStatus      `protobuf:"varint,1,opt,name=status,proto3,enum=bitway.btcbridge.SigningStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsRequest) Reset()         { *m = QuerySigningRequestsRequest{} }
func (m *QuerySigningRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsRequest) ProtoMessage()    {}
func (*QuerySigningRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{8}
}
func (m *QuerySigningRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsRequest.Merge(m, src)
}
func (m *QuerySigningRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsRequest proto.InternalMessageInfo

func (m *QuerySigningRequestsRequest) GetStatus() SigningStatus {
	if m != nil {
		return m.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

func (m *QuerySigningRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsResponse is response type for the Query/SigningRequests RPC method.
type QuerySigningRequestsResponse struct {
	Requests   []*SigningRequest   `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsResponse) Reset()         { *m = QuerySigningRequestsResponse{} }
func (m *QuerySigningRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsResponse) ProtoMessage()    {}
func (*QuerySigningRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{9}
}
func (m *QuerySigningRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsResponse.Merge(m, src)
}
func (m *QuerySigningRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsResponse proto.InternalMessageInfo

func (m *QuerySigningRequestsResponse) GetRequests() []*SigningRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QuerySigningRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsByAddressRequest is request type for the Query/SigningRequestsByAddress RPC method.
type QuerySigningRequestsByAddressRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsByAddressRequest) Reset()         { *m = QuerySigningRequestsByAddressRequest{} }
func (m *QuerySigningRequestsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsByAddressRequest) ProtoMessage()    {}
func (*QuerySigningRequestsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{10}
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsByAddressRequest.Merge(m, src)
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsByAddressRequest proto.InternalMessageInfo

func (m *QuerySigningRequestsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySigningRequestsByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsByAddressResponse is response type for the Query/SigningRequestsByAddress RPC method.
type QuerySigningRequestsByAddressResponse struct {
	Requests   []*SigningRequest   `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsByAddressResponse) Reset()         { *m = QuerySigningRequestsByAddressResponse{} }
func (m *QuerySigningRequestsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsByAddressResponse) ProtoMessage()    {}
func (*QuerySigningRequestsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{11}
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsByAddressResponse.Merge(m, src)
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsByAddressResponse proto.InternalMessageInfo

func (m *QuerySigningRequestsByAddressResponse) GetRequests() []*SigningRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QuerySigningRequestsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestByTxHashRequest is request type for the Query/SigningRequestByTxHash RPC method.
type QuerySigningRequestByTxHashRequest struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *QuerySigningRequestByTxHashRequest) Reset()         { *m = QuerySigningRequestByTxHashRequest{} }
func (m *QuerySigningRequestByTxHashRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestByTxHashRequest) ProtoMessage()    {}
func (*QuerySigningRequestByTxHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{12}
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestByTxHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestByTxHashRequest.Merge(m, src)
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestByTxHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestByTxHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestByTxHashRequest proto.InternalMessageInfo

func (m *QuerySigningRequestByTxHashRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// QuerySigningRequestByTxHashResponse is response type for the Query/SigningRequestByTxHashResponse RPC method.
type QuerySigningRequestByTxHashResponse struct {
	Request *SigningRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QuerySigningRequestByTxHashResponse) Reset()         { *m = QuerySigningRequestByTxHashResponse{} }
func (m *QuerySigningRequestByTxHashResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestByTxHashResponse) ProtoMessage()    {}
func (*QuerySigningRequestByTxHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{13}
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestByTxHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestByTxHashResponse.Merge(m, src)
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestByTxHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestByTxHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestByTxHashResponse proto.InternalMessageInfo

func (m *QuerySigningRequestByTxHashResponse) GetRequest() *SigningRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueryPendingSigningRequestsRequest is request type for the Query/PendingSigningRequests RPC method.
type QueryPendingSigningRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingSigningRequestsRequest) Reset()         { *m = QueryPendingSigningRequestsRequest{} }
func (m *QueryPendingSigningRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSigningRequestsRequest) ProtoMessage()    {}
func (*QueryPendingSigningRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{14}
}
func (m *QueryPendingSigningRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSigningRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSigningRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSigningRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSigningRequestsRequest.Merge(m, src)
}
func (m *QueryPendingSigningRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSigningRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSigningRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSigningRequestsRequest proto.InternalMessageInfo

func (m *QueryPendingSigningRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingSigningRequestsResponse is response type for the Query/PendingSigningRequests RPC method.
type QueryPendingSigningRequestsResponse struct {
	Requests   []*CompactSigningRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingSigningRequestsResponse) Reset()         { *m = QueryPendingSigningRequestsResponse{} }
func (m *QueryPendingSigningRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSigningRequestsResponse) ProtoMessage()    {}
func (*QueryPendingSigningRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{15}
}
func (m *QueryPendingSigningRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSigningRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSigningRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSigningRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSigningRequestsResponse.Merge(m, src)
}
func (m *QueryPendingSigningRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSigningRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSigningRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSigningRequestsResponse proto.InternalMessageInfo

func (m *QueryPendingSigningRequestsResponse) GetRequests() []*CompactSigningRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QueryPendingSigningRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFeeRateRequest is request type for the Query/FeeRate RPC method.
type QueryFeeRateRequest struct {
}

func (m *QueryFeeRateRequest) Reset()         { *m = QueryFeeRateRequest{} }
func (m *QueryFeeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeRateRequest) ProtoMessage()    {}
func (*QueryFeeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{16}
}
func (m *QueryFeeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeRateRequest.Merge(m, src)
}
func (m *QueryFeeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeRateRequest proto.InternalMessageInfo

// QueryFeeRateResponse is response type for the Query/FeeRate RPC method.
type QueryFeeRateResponse struct {
	FeeRate *FeeRate `protobuf:"bytes,1,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *QueryFeeRateResponse) Reset()         { *m = QueryFeeRateResponse{} }
func (m *QueryFeeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeRateResponse) ProtoMessage()    {}
func (*QueryFeeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{17}
}
func (m *QueryFeeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeRateResponse.Merge(m, src)
}
func (m *QueryFeeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeRateResponse proto.InternalMessageInfo

func (m *QueryFeeRateResponse) GetFeeRate() *FeeRate {
	if m != nil {
		return m.FeeRate
	}
	return nil
}

// QueryWithdrawalNetworkFeeRequest is request type for the Query/WithdrawalNetworkFee RPC method.
type QueryWithdrawalNetworkFeeRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeRate int64  `protobuf:"varint,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *QueryWithdrawalNetworkFeeRequest) Reset()         { *m = QueryWithdrawalNetworkFeeRequest{} }
func (m *QueryWithdrawalNetworkFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalNetworkFeeRequest) ProtoMessage()    {}
func (*QueryWithdrawalNetworkFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{18}
}
func (m *QueryWithdrawalNetworkFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalNetworkFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalNetworkFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalNetworkFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalNetworkFeeRequest.Merge(m, src)
}
func (m *QueryWithdrawalNetworkFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalNetworkFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalNetworkFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalNetworkFeeRequest proto.InternalMessageInfo

func (m *QueryWithdrawalNetworkFeeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryWithdrawalNetworkFeeRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryWithdrawalNetworkFeeRequest) GetFeeRate() int64 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

// QueryWithdrawalNetworkFeeResponse is response type for the Query/WithdrawalNetworkFee RPC method.
type QueryWithdrawalNetworkFeeResponse struct {
	FeeRate int64  `protobuf:"varint,1,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	Fee     string `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryWithdrawalNetworkFeeResponse) Reset()         { *m = QueryWithdrawalNetworkFeeResponse{} }
func (m *QueryWithdrawalNetworkFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalNetworkFeeResponse) ProtoMessage()    {}
func (*QueryWithdrawalNetworkFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{19}
}
func (m *QueryWithdrawalNetworkFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalNetworkFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalNetworkFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalNetworkFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalNetworkFeeResponse.Merge(m, src)
}
func (m *QueryWithdrawalNetworkFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalNetworkFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalNetworkFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalNetworkFeeResponse proto.InternalMessageInfo

func (m *QueryWithdrawalNetworkFeeResponse) GetFeeRate() int64 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func (m *QueryWithdrawalNetworkFeeResponse) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{20}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{21}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryUTXOsRequest is the request type for the Query/UTXOs RPC method.
type QueryUTXOsRequest struct {
}

func (m *QueryUTXOsRequest) Reset()         { *m = QueryUTXOsRequest{} }
func (m *QueryUTXOsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsRequest) ProtoMessage()    {}
func (*QueryUTXOsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{22}
}
func (m *QueryUTXOsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsRequest.Merge(m, src)
}
func (m *QueryUTXOsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsRequest proto.InternalMessageInfo

// QueryUTXOsResponse is the response type for the Query/UTXOs RPC method.
type QueryUTXOsResponse struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *QueryUTXOsResponse) Reset()         { *m = QueryUTXOsResponse{} }
func (m *QueryUTXOsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsResponse) ProtoMessage()    {}
func (*QueryUTXOsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{23}
}
func (m *QueryUTXOsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsResponse.Merge(m, src)
}
func (m *QueryUTXOsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsResponse proto.InternalMessageInfo

func (m *QueryUTXOsResponse) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

// QueryUTXOsByAddressRequest is the request type for the Query/UTXOsByAddress RPC method.
type QueryUTXOsByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUTXOsByAddressRequest) Reset()         { *m = QueryUTXOsByAddressRequest{} }
func (m *QueryUTXOsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsByAddressRequest) ProtoMessage()    {}
func (*QueryUTXOsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{24}
}
func (m *QueryUTXOsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsByAddressRequest.Merge(m, src)
}
func (m *QueryUTXOsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsByAddressRequest proto.InternalMessageInfo

func (m *QueryUTXOsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUTXOsByAddressResponse is the response type for the Query/UTXOsByAddress RPC method.
type QueryUTXOsByAddressResponse struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *QueryUTXOsByAddressResponse) Reset()         { *m = QueryUTXOsByAddressResponse{} }
func (m *QueryUTXOsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsByAddressResponse) ProtoMessage()    {}
func (*QueryUTXOsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{25}
}
func (m *QueryUTXOsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsByAddressResponse.Merge(m, src)
}
func (m *QueryUTXOsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsByAddressResponse proto.InternalMessageInfo

func (m *QueryUTXOsByAddressResponse) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

// QueryUTXOCountAndBalancesByAddressRequest is the request type for the Query/UTXOCountAndBalancesByAddress RPC method.
type QueryUTXOCountAndBalancesByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Reset() {
	*m = QueryUTXOCountAndBalancesByAddressRequest{}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUTXOCountAndBalancesByAddressRequest) ProtoMessage() {}
func (*QueryUTXOCountAndBalancesByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{26}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.Merge(m, src)
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest proto.InternalMessageInfo

func (m *QueryUTXOCountAndBalancesByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUTXOCountAndBalancesByAddressResponse is the response type for the Query/UTXOCountAndBalancesByAddress RPC method.
type QueryUTXOCountAndBalancesByAddressResponse struct {
	Count        uint32         `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Value        int64          `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	RuneBalances []*RuneBalance `protobuf:"bytes,3,rep,name=runeBalances,proto3" json:"runeBalances,omitempty"`
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Reset() {
	*m = QueryUTXOCountAndBalancesByAddressResponse{}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUTXOCountAndBalancesByAddressResponse) ProtoMessage() {}
func (*QueryUTXOCountAndBalancesByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{27}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.Merge(m, src)
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse proto.InternalMessageInfo

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetRuneBalances() []*RuneBalance {
	if m != nil {
		return m.RuneBalances
	}
	return nil
}

// QueryDKGRequestRequest is the request type for the Query/DKGRequest RPC method.
type QueryDKGRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDKGRequestRequest) Reset()         { *m = QueryDKGRequestRequest{} }
func (m *QueryDKGRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestRequest) ProtoMessage()    {}
func (*QueryDKGRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{28}
}
func (m *QueryDKGRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestRequest.Merge(m, src)
}
func (m *QueryDKGRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestRequest proto.InternalMessageInfo

func (m *QueryDKGRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryDKGRequestResponse is the response type for the Query/DKGRequest RPC method.
type QueryDKGRequestResponse struct {
	Request *DKGRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryDKGRequestResponse) Reset()         { *m = QueryDKGRequestResponse{} }
func (m *QueryDKGRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestResponse) ProtoMessage()    {}
func (*QueryDKGRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{29}
}
func (m *QueryDKGRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestResponse.Merge(m, src)
}
func (m *QueryDKGRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestResponse proto.InternalMessageInfo

func (m *QueryDKGRequestResponse) GetRequest() *DKGRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueryDKGRequestsRequest is the request type for the Query/DKGRequests RPC method.
type QueryDKGRequestsRequest struct {
	Status DKGRequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bitway.btcbridge.DKGRequestStatus" json:"status,omitempty"`
}

func (m *QueryDKGRequestsRequest) Reset()         { *m = QueryDKGRequestsRequest{} }
func (m *QueryDKGRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestsRequest) ProtoMessage()    {}
func (*QueryDKGRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{30}
}
func (m *QueryDKGRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestsRequest.Merge(m, src)
}
func (m *QueryDKGRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestsRequest proto.InternalMessageInfo

func (m *QueryDKGRequestsRequest) GetStatus() DKGRequestStatus {
	if m != nil {
		return m.Status
	}
	return DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED
}

// QueryDKGRequestsResponse is the response type for the Query/DKGRequests RPC method.
type QueryDKGRequestsResponse struct {
	Requests []*DKGRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryDKGRequestsResponse) Reset()         { *m = QueryDKGRequestsResponse{} }
func (m *QueryDKGRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestsResponse) ProtoMessage()    {}
func (*QueryDKGRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{31}
}
func (m *QueryDKGRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestsResponse.Merge(m, src)
}
func (m *QueryDKGRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestsResponse proto.InternalMessageInfo

func (m *QueryDKGRequestsResponse) GetRequests() []*DKGRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// QueryAllDKGRequestsRequest is the request type for the Query/AllDKGRequests RPC method.
type QueryAllDKGRequestsRequest struct {
}

func (m *QueryAllDKGRequestsRequest) Reset()         { *m = QueryAllDKGRequestsRequest{} }
func (m *QueryAllDKGRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDKGRequestsRequest) ProtoMessage()    {}
func (*QueryAllDKGRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{32}
}
func (m *QueryAllDKGRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDKGRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDKGRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDKGRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDKGRequestsRequest.Merge(m, src)
}
func (m *QueryAllDKGRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDKGRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDKGRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDKGRequestsRequest proto.InternalMessageInfo

// QueryAllDKGRequestsResponse is the response type for the Query/AllDKGRequests RPC method.
type QueryAllDKGRequestsResponse struct {
	Requests []*DKGRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryAllDKGRequestsResponse) Reset()         { *m = QueryAllDKGRequestsResponse{} }
func (m *QueryAllDKGRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDKGRequestsResponse) ProtoMessage()    {}
func (*QueryAllDKGRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{33}
}
func (m *QueryAllDKGRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDKGRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDKGRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDKGRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDKGRequestsResponse.Merge(m, src)
}
func (m *QueryAllDKGRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDKGRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDKGRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDKGRequestsResponse proto.InternalMessageInfo

func (m *QueryAllDKGRequestsResponse) GetRequests() []*DKGRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// QueryDKGCompletionRequestsRequest is the request type for the Query/DKGCompletionRequests RPC method.
type QueryDKGCompletionRequestsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDKGCompletionRequestsRequest) Reset()         { *m = QueryDKGCompletionRequestsRequest{} }
func (m *QueryDKGCompletionRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGCompletionRequestsRequest) ProtoMessage()    {}
func (*QueryDKGCompletionRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{34}
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGCompletionRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGCompletionRequestsRequest.Merge(m, src)
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGCompletionRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGCompletionRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGCompletionRequestsRequest proto.InternalMessageInfo

func (m *QueryDKGCompletionRequestsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryDKGCompletionRequestsResponse is the response type for the Query/DKGCompletionRequests RPC method.
type QueryDKGCompletionRequestsResponse struct {
	Requests []*DKGCompletionRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryDKGCompletionRequestsResponse) Reset()         { *m = QueryDKGCompletionRequestsResponse{} }
func (m *QueryDKGCompletionRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGCompletionRequestsResponse) ProtoMessage()    {}
func (*QueryDKGCompletionRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{35}
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGCompletionRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGCompletionRequestsResponse.Merge(m, src)
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGCompletionRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGCompletionRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGCompletionRequestsResponse proto.InternalMessageInfo

func (m *QueryDKGCompletionRequestsResponse) GetRequests() []*DKGCompletionRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type QueryRefreshingRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRefreshingRequestRequest) Reset()         { *m = QueryRefreshingRequestRequest{} }
func (m *QueryRefreshingRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingRequestRequest) ProtoMessage()    {}
func (*QueryRefreshingRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{36}
}
func (m *QueryRefreshingRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingRequestRequest.Merge(m, src)
}
func (m *QueryRefreshingRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingRequestRequest proto.InternalMessageInfo

func (m *QueryRefreshingRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryRefreshingRequestResponse struct {
	Request *RefreshingRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryRefreshingRequestResponse) Reset()         { *m = QueryRefreshingRequestResponse{} }
func (m *QueryRefreshingRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingRequestResponse) ProtoMessage()    {}
func (*QueryRefreshingRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{37}
}
func (m *QueryRefreshingRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingRequestResponse.Merge(m, src)
}
func (m *QueryRefreshingRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingRequestResponse proto.InternalMessageInfo

func (m *QueryRefreshingRequestResponse) GetRequest() *RefreshingRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueryRefreshingRequestsRequest struct {
	Status     RefreshingStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=bitway.btcbridge.RefreshingStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRefreshingRequestsRequest) Reset()         { *m = QueryRefreshingRequestsRequest{} }
func (m *QueryRefreshingRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingRequestsRequest) ProtoMessage()    {}
func (*QueryRefreshingRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{38}
}
func (m *QueryRefreshingRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingRequestsRequest.Merge(m, src)
}
func (m *QueryRefreshingRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingRequestsRequest proto.InternalMessageInfo

func (m *QueryRefreshingRequestsRequest) GetStatus() RefreshingStatus {
	if m != nil {
		return m.Status
	}
	return RefreshingStatus_REFRESHING_STATUS_UNSPECIFIED
}

func (m *QueryRefreshingRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRefreshingRequestsResponse struct {
	Requests   []*RefreshingRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRefreshingRequestsResponse) Reset()         { *m = QueryRefreshingRequestsResponse{} }
func (m *QueryRefreshingRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingRequestsResponse) ProtoMessage()    {}
func (*QueryRefreshingRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{39}
}
func (m *QueryRefreshingRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingRequestsResponse.Merge(m, src)
}
func (m *QueryRefreshingRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingRequestsResponse proto.InternalMessageInfo

func (m *QueryRefreshingRequestsResponse) GetRequests() []*RefreshingRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QueryRefreshingRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRefreshingCompletionsRequest struct {
	Id         uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRefreshingCompletionsRequest) Reset()         { *m = QueryRefreshingCompletionsRequest{} }
func (m *QueryRefreshingCompletionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingCompletionsRequest) ProtoMessage()    {}
func (*QueryRefreshingCompletionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{40}
}
func (m *QueryRefreshingCompletionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingCompletionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingCompletionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingCompletionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingCompletionsRequest.Merge(m, src)
}
func (m *QueryRefreshingCompletionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingCompletionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingCompletionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingCompletionsRequest proto.InternalMessageInfo

func (m *QueryRefreshingCompletionsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryRefreshingCompletionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRefreshingCompletionsResponse struct {
	Completions []*RefreshingCompletion `protobuf:"bytes,1,rep,name=completions,proto3" json:"completions,omitempty"`
	Pagination  *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRefreshingCompletionsResponse) Reset()         { *m = QueryRefreshingCompletionsResponse{} }
func (m *QueryRefreshingCompletionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRefreshingCompletionsResponse) ProtoMessage()    {}
func (*QueryRefreshingCompletionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{41}
}
func (m *QueryRefreshingCompletionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefreshingCompletionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefreshingCompletionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefreshingCompletionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefreshingCompletionsResponse.Merge(m, src)
}
func (m *QueryRefreshingCompletionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefreshingCompletionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefreshingCompletionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefreshingCompletionsResponse proto.InternalMessageInfo

func (m *QueryRefreshingCompletionsResponse) GetCompletions() []*RefreshingCompletion {
	if m != nil {
		return m.Completions
	}
	return nil
}

func (m *QueryRefreshingCompletionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIBCDepositScriptRequest is the request type for the Query/IBCDepositScript RPC method.
type QueryIBCDepositScriptRequest struct {
	ChannelId        string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	RecipientAddress string `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
}

func (m *QueryIBCDepositScriptRequest) Reset()         { *m = QueryIBCDepositScriptRequest{} }
func (m *QueryIBCDepositScriptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCDepositScriptRequest) ProtoMessage()    {}
func (*QueryIBCDepositScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{42}
}
func (m *QueryIBCDepositScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCDepositScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCDepositScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCDepositScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCDepositScriptRequest.Merge(m, src)
}
func (m *QueryIBCDepositScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCDepositScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCDepositScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCDepositScriptRequest proto.InternalMessageInfo

func (m *QueryIBCDepositScriptRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryIBCDepositScriptRequest) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

// QueryIBCDepositScriptResponse is the response type for the Query/IBCDepositScript RPC method.
type QueryIBCDepositScriptResponse struct {
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *QueryIBCDepositScriptResponse) Reset()         { *m = QueryIBCDepositScriptResponse{} }
func (m *QueryIBCDepositScriptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIBCDepositScriptResponse) ProtoMessage()    {}
func (*QueryIBCDepositScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{43}
}
func (m *QueryIBCDepositScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCDepositScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCDepositScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCDepositScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCDepositScriptResponse.Merge(m, src)
}
func (m *QueryIBCDepositScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCDepositScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCDepositScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCDepositScriptResponse proto.InternalMessageInfo

func (m *QueryIBCDepositScriptResponse) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

// QueryRateLimitRequest is the request type for the Query/RateLimit RPC method.
type QueryRateLimitRequest struct {
}

func (m *QueryRateLimitRequest) Reset()         { *m = QueryRateLimitRequest{} }
func (m *QueryRateLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitRequest) ProtoMessage()    {}
func (*QueryRateLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{44}
}
func (m *QueryRateLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitRequest.Merge(m, src)
}
func (m *QueryRateLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitRequest proto.InternalMessageInfo

// QueryRateLimitResponse is the response type for the Query/RateLimit RPC method.
type QueryRateLimitResponse struct {
	RateLimit *RateLimit `protobuf:"bytes,1,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (m *QueryRateLimitResponse) Reset()         { *m = QueryRateLimitResponse{} }
func (m *QueryRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitResponse) ProtoMessage()    {}
func (*QueryRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{45}
}
func (m *QueryRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitResponse.Merge(m, src)
}
func (m *QueryRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitResponse proto.InternalMessageInfo

func (m *QueryRateLimitResponse) GetRateLimit() *RateLimit {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

// QueryRateLimitByAddressRequest is the request type for the Query/RateLimitByAddress RPC method.
type QueryRateLimitByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRateLimitByAddressRequest) Reset()         { *m = QueryRateLimitByAddressRequest{} }
func (m *QueryRateLimitByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitByAddressRequest) ProtoMessage()    {}
func (*QueryRateLimitByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{46}
}
func (m *QueryRateLimitByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitByAddressRequest.Merge(m, src)
}
func (m *QueryRateLimitByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitByAddressRequest proto.InternalMessageInfo

func (m *QueryRateLimitByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryRateLimitByAddressResponse is the response type for the Query/RateLimitByAddress RPC method.
type QueryRateLimitByAddressResponse struct {
	// Address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Starting time for the current epoch
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// End time for the current epoch
	EndTime time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// Maximum withdrawable amount for the current epoch; 0 means no limit
	Quota int64 `protobuf:"varint,4,opt,name=quota,proto3" json:"quota,omitempty"`
	// Used quota currently
	Used int64 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *QueryRateLimitByAddressResponse) Reset()         { *m = QueryRateLimitByAddressResponse{} }
func (m *QueryRateLimitByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitByAddressResponse) ProtoMessage()    {}
func (*QueryRateLimitByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2db215f5737906e, []int{47}
}
func (m *QueryRateLimitByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitByAddressResponse.Merge(m, src)
}
func (m *QueryRateLimitByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitByAddressResponse proto.InternalMessageInfo

func (m *QueryRateLimitByAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRateLimitByAddressResponse) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *QueryRateLimitByAddressResponse) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *QueryRateLimitByAddressResponse) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *QueryRateLimitByAddressResponse) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryWithdrawRequestsByAddressRequest)(nil), "bitway.btcbridge.QueryWithdrawRequestsByAddressRequest")
	proto.RegisterType((*QueryWithdrawRequestsByAddressResponse)(nil), "bitway.btcbridge.QueryWithdrawRequestsByAddressResponse")
	proto.RegisterType((*QueryWithdrawRequestsByTxHashRequest)(nil), "bitway.btcbridge.QueryWithdrawRequestsByTxHashRequest")
	proto.RegisterType((*QueryWithdrawRequestsByTxHashResponse)(nil), "bitway.btcbridge.QueryWithdrawRequestsByTxHashResponse")
	proto.RegisterType((*QueryPendingBtcWithdrawRequestsRequest)(nil), "bitway.btcbridge.QueryPendingBtcWithdrawRequestsRequest")
	proto.RegisterType((*QueryPendingBtcWithdrawRequestsResponse)(nil), "bitway.btcbridge.QueryPendingBtcWithdrawRequestsResponse")
	proto.RegisterType((*QuerySigningRequestRequest)(nil), "bitway.btcbridge.QuerySigningRequestRequest")
	proto.RegisterType((*QuerySigningRequestResponse)(nil), "bitway.btcbridge.QuerySigningRequestResponse")
	proto.RegisterType((*QuerySigningRequestsRequest)(nil), "bitway.btcbridge.QuerySigningRequestsRequest")
	proto.RegisterType((*QuerySigningRequestsResponse)(nil), "bitway.btcbridge.QuerySigningRequestsResponse")
	proto.RegisterType((*QuerySigningRequestsByAddressRequest)(nil), "bitway.btcbridge.QuerySigningRequestsByAddressRequest")
	proto.RegisterType((*QuerySigningRequestsByAddressResponse)(nil), "bitway.btcbridge.QuerySigningRequestsByAddressResponse")
	proto.RegisterType((*QuerySigningRequestByTxHashRequest)(nil), "bitway.btcbridge.QuerySigningRequestByTxHashRequest")
	proto.RegisterType((*QuerySigningRequestByTxHashResponse)(nil), "bitway.btcbridge.QuerySigningRequestByTxHashResponse")
	proto.RegisterType((*QueryPendingSigningRequestsRequest)(nil), "bitway.btcbridge.QueryPendingSigningRequestsRequest")
	proto.RegisterType((*QueryPendingSigningRequestsResponse)(nil), "bitway.btcbridge.QueryPendingSigningRequestsResponse")
	proto.RegisterType((*QueryFeeRateRequest)(nil), "bitway.btcbridge.QueryFeeRateRequest")
	proto.RegisterType((*QueryFeeRateResponse)(nil), "bitway.btcbridge.QueryFeeRateResponse")
	proto.RegisterType((*QueryWithdrawalNetworkFeeRequest)(nil), "bitway.btcbridge.QueryWithdrawalNetworkFeeRequest")
	proto.RegisterType((*QueryWithdrawalNetworkFeeResponse)(nil), "bitway.btcbridge.QueryWithdrawalNetworkFeeResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "bitway.btcbridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitway.btcbridge.QueryParamsResponse")
	proto.RegisterType((*QueryUTXOsRequest)(nil), "bitway.btcbridge.QueryUTXOsRequest")
	proto.RegisterType((*QueryUTXOsResponse)(nil), "bitway.btcbridge.QueryUTXOsResponse")
	proto.RegisterType((*QueryUTXOsByAddressRequest)(nil), "bitway.btcbridge.QueryUTXOsByAddressRequest")
	proto.RegisterType((*QueryUTXOsByAddressResponse)(nil), "bitway.btcbridge.QueryUTXOsByAddressResponse")
	proto.RegisterType((*QueryUTXOCountAndBalancesByAddressRequest)(nil), "bitway.btcbridge.QueryUTXOCountAndBalancesByAddressRequest")
	proto.RegisterType((*QueryUTXOCountAndBalancesByAddressResponse)(nil), "bitway.btcbridge.QueryUTXOCountAndBalancesByAddressResponse")
	proto.RegisterType((*QueryDKGRequestRequest)(nil), "bitway.btcbridge.QueryDKGRequestRequest")
	proto.RegisterType((*QueryDKGRequestResponse)(nil), "bitway.btcbridge.QueryDKGRequestResponse")
	proto.RegisterType((*QueryDKGRequestsRequest)(nil), "bitway.btcbridge.QueryDKGRequestsRequest")
	proto.RegisterType((*QueryDKGRequestsResponse)(nil), "bitway.btcbridge.QueryDKGRequestsResponse")
	proto.RegisterType((*QueryAllDKGRequestsRequest)(nil), "bitway.btcbridge.QueryAllDKGRequestsRequest")
	proto.RegisterType((*QueryAllDKGRequestsResponse)(nil), "bitway.btcbridge.QueryAllDKGRequestsResponse")
	proto.RegisterType((*QueryDKGCompletionRequestsRequest)(nil), "bitway.btcbridge.QueryDKGCompletionRequestsRequest")
	proto.RegisterType((*QueryDKGCompletionRequestsResponse)(nil), "bitway.btcbridge.QueryDKGCompletionRequestsResponse")
	proto.RegisterType((*QueryRefreshingRequestRequest)(nil), "bitway.btcbridge.QueryRefreshingRequestRequest")
	proto.RegisterType((*QueryRefreshingRequestResponse)(nil), "bitway.btcbridge.QueryRefreshingRequestResponse")
	proto.RegisterType((*QueryRefreshingRequestsRequest)(nil), "bitway.btcbridge.QueryRefreshingRequestsRequest")
	proto.RegisterType((*QueryRefreshingRequestsResponse)(nil), "bitway.btcbridge.QueryRefreshingRequestsResponse")
	proto.RegisterType((*QueryRefreshingCompletionsRequest)(nil), "bitway.btcbridge.QueryRefreshingCompletionsRequest")
	proto.RegisterType((*QueryRefreshingCompletionsResponse)(nil), "bitway.btcbridge.QueryRefreshingCompletionsResponse")
	proto.RegisterType((*QueryIBCDepositScriptRequest)(nil), "bitway.btcbridge.QueryIBCDepositScriptRequest")
	proto.RegisterType((*QueryIBCDepositScriptResponse)(nil), "bitway.btcbridge.QueryIBCDepositScriptResponse")
	proto.RegisterType((*QueryRateLimitRequest)(nil), "bitway.btcbridge.QueryRateLimitRequest")
	proto.RegisterType((*QueryRateLimitResponse)(nil), "bitway.btcbridge.QueryRateLimitResponse")
	proto.RegisterType((*QueryRateLimitByAddressRequest)(nil), "bitway.btcbridge.QueryRateLimitByAddressRequest")
	proto.RegisterType((*QueryRateLimitByAddressResponse)(nil), "bitway.btcbridge.QueryRateLimitByAddressResponse")
}

func init() { proto.RegisterFile("bitway/btcbridge/query.proto", fileDescriptor_c2db215f5737906e) }

var fileDescriptor_c2db215f5737906e = []byte{
	// 2048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0xc5, 0x1f, 0x89, 0x2b, 0x4b, 0xc8, 0xbe, 0xf5, 0x26, 0xe3, 0x8e, 0x3d, 0x9e, 0x74,
	0x1c, 0xdb, 0xf1, 0x3a, 0xd3, 0xeb, 0x8f, 0xb5, 0x13, 0x13, 0xb4, 0xca, 0x38, 0x6c, 0xb2, 0xca,
	0x02, 0xd9, 0x8e, 0x57, 0x0b, 0x5c, 0xac, 0x9e, 0x99, 0xf2, 0xb8, 0xd9, 0x99, 0xee, 0x49, 0x77,
	0xcf, 0xc6, 0x96, 0x89, 0x84, 0x38, 0xb1, 0xb7, 0x08, 0x6e, 0x20, 0x90, 0x90, 0x00, 0x09, 0x21,
	0xbe, 0x84, 0x04, 0xe2, 0x82, 0x38, 0xa1, 0xe5, 0x82, 0x82, 0xe0, 0xc0, 0x09, 0x50, 0xc2, 0x0d,
	0xfe, 0x08, 0xd4, 0xd5, 0xaf, 0x7b, 0x66, 0xba, 0xba, 0xba, 0x7b, 0x8c, 0xad, 0xcd, 0xad, 0xbb,
	0xea, 0x7d, 0xfc, 0xde, 0xab, 0x57, 0x55, 0xaf, 0x7e, 0x74, 0xb2, 0x6a, 0x7a, 0x8f, 0x8c, 0x7d,
	0xad, 0xea, 0xd5, 0xaa, 0x8e, 0x59, 0x6f, 0x30, 0xed, 0x61, 0x87, 0x39, 0xfb, 0xe5, 0xb6, 0x63,
	0x7b, 0x36, 0x9c, 0x0b, 0x66, 0xcb, 0xd1, 0xac, 0x32, 0xde, 0xb0, 0x1b, 0x36, 0x9f, 0xd4, 0xfc,
	0xaf, 0x40, 0x4e, 0x99, 0x6c, 0xd8, 0x76, 0xa3, 0xc9, 0x34, 0xa3, 0x6d, 0x6a, 0x86, 0x65, 0xd9,
	0x9e, 0xe1, 0x99, 0xb6, 0xe5, 0xe2, 0xec, 0x34, 0xce, 0xf2, 0xbf, 0x6a, 0x67, 0x47, 0xf3, 0xcc,
	0x16, 0x73, 0x3d, 0xa3, 0xd5, 0x46, 0x81, 0x85, 0x9a, 0xed, 0xb6, 0x6c, 0x57, 0xab, 0x1a, 0x2e,
	0xfa, 0xd7, 0x3e, 0x5c, 0xaa, 0x32, 0xcf, 0x58, 0xd2, 0xda, 0x46, 0xc3, 0xb4, 0xb8, 0x35, 0x94,
	0x9d, 0x12, 0x00, 0xb7, 0x0d, 0xc7, 0x68, 0x85, 0xbe, 0x4a, 0xc2, 0x74, 0xf4, 0x15, 0x48, 0xa8,
	0x1f, 0x11, 0x7a, 0xe5, 0x5d, 0xdf, 0xc7, 0xfb, 0xa6, 0xb7, 0x5b, 0x77, 0x8c, 0x47, 0x3a, 0x7b,
	0xd8, 0x61, 0xae, 0xe7, 0x56, 0xf6, 0x6f, 0xd5, 0xeb, 0x0e, 0x73, 0x5d, 0x1c, 0x80, 0x02, 0x3d,
	0x65, 0x04, 0x23, 0x05, 0x52, 0x22, 0xf3, 0x63, 0x7a, 0xf8, 0x0b, 0x6f, 0x51, 0xda, 0x05, 0x56,
	0x38, 0x59, 0x22, 0xf3, 0x67, 0x96, 0x67, 0xcb, 0x41, 0x14, 0x65, 0x3f, 0x8a, 0x72, 0x90, 0x45,
	0x8c, 0xa2, 0x7c, 0xdf, 0x68, 0x30, 0xb4, 0xaa, 0xf7, 0x68, 0xaa, 0xbf, 0x24, 0x74, 0x36, 0x0b,
	0x8b, 0xdb, 0xb6, 0x2d, 0x97, 0xc1, 0x67, 0xe9, 0x69, 0x07, 0x27, 0x0b, 0xa4, 0x34, 0x34, 0x7f,
	0x66, 0xf9, 0x52, 0x39, 0xbe, 0x3a, 0xe5, 0x98, 0x19, 0x3d, 0x52, 0x81, 0x3b, 0x09, 0x88, 0xe7,
	0x32, 0x11, 0x07, 0xbe, 0xfb, 0x20, 0x6f, 0xd0, 0x19, 0x09, 0xe2, 0xad, 0xbd, 0xbb, 0x86, 0xbb,
	0x1b, 0x26, 0x0f, 0xe8, 0xb0, 0xb7, 0x67, 0xd6, 0x31, 0x73, 0xfc, 0x5b, 0xdd, 0x91, 0x66, 0x3e,
	0xd4, 0x3d, 0x92, 0x60, 0xd5, 0x36, 0x66, 0xf5, 0x3e, 0xb3, 0xea, 0xa6, 0xd5, 0xa8, 0x78, 0xb5,
	0xb8, 0xc7, 0x10, 0x65, 0xff, 0x42, 0x92, 0x43, 0x2f, 0xe4, 0xaf, 0x08, 0x9d, 0xcb, 0x74, 0xf9,
	0x82, 0xad, 0xe4, 0x75, 0xaa, 0x70, 0xc8, 0x0f, 0xcc, 0x86, 0x65, 0x5a, 0x8d, 0xd0, 0x13, 0x66,
	0x46, 0xa1, 0xa7, 0x5d, 0xff, 0xd3, 0xaa, 0x31, 0x9e, 0x97, 0x61, 0x3d, 0xfa, 0x57, 0xbf, 0x4c,
	0x2f, 0x26, 0x6a, 0x62, 0x80, 0x1b, 0xf4, 0x14, 0xa2, 0xc5, 0x8c, 0x96, 0xc4, 0xf8, 0x62, 0xaa,
	0xa1, 0x82, 0xfa, 0x7d, 0x92, 0x68, 0x3b, 0x5a, 0xb0, 0x75, 0x3a, 0xea, 0x7a, 0x86, 0xd7, 0x09,
	0xb6, 0xe4, 0xd9, 0xe5, 0x69, 0xa9, 0xe9, 0x07, 0x5c, 0x4c, 0x47, 0xf1, 0x23, 0xdb, 0xb2, 0x3f,
	0x22, 0x74, 0x32, 0x19, 0x20, 0x46, 0x7f, 0x53, 0x58, 0xde, 0xec, 0xf0, 0x8f, 0x61, 0x75, 0xbf,
	0x49, 0x70, 0xa3, 0xc6, 0x70, 0x7e, 0x02, 0xa7, 0xdc, 0xcf, 0xc3, 0x13, 0x57, 0x0e, 0xe5, 0xc5,
	0xca, 0xdd, 0x75, 0xaa, 0x26, 0xe0, 0xcd, 0x73, 0xc2, 0x19, 0xf4, 0x72, 0xaa, 0xe6, 0x11, 0xec,
	0x90, 0x26, 0x82, 0xc3, 0x93, 0x46, 0xb2, 0x4f, 0x8e, 0xea, 0x60, 0xfb, 0x35, 0xc1, 0x88, 0x64,
	0xee, 0x30, 0xa2, 0x4d, 0x61, 0xe5, 0xe6, 0xc4, 0x90, 0x36, 0xed, 0x56, 0xdb, 0xa8, 0x79, 0xc7,
	0xbf, 0x80, 0xaf, 0xd2, 0x57, 0x38, 0xe8, 0xb7, 0x18, 0xd3, 0x0d, 0x2f, 0x0c, 0x4c, 0x7d, 0x87,
	0x8e, 0xf7, 0x0f, 0x23, 0xf8, 0x55, 0x7a, 0x7a, 0x87, 0xb1, 0x6d, 0xc7, 0xf0, 0x18, 0xa6, 0x6a,
	0x42, 0x04, 0x1f, 0x2a, 0x9d, 0xda, 0x09, 0x3e, 0x54, 0x9b, 0x96, 0xfa, 0x6e, 0x33, 0xa3, 0xf9,
	0x05, 0xe6, 0x3d, 0xb2, 0x9d, 0x0f, 0x7c, 0xc9, 0xcc, 0xcd, 0x75, 0x9e, 0x8e, 0x1a, 0x2d, 0xbb,
	0x63, 0x79, 0x3c, 0xce, 0x31, 0x1d, 0xff, 0x60, 0xa2, 0x07, 0xcb, 0x50, 0x89, 0xcc, 0x0f, 0x75,
	0x1d, 0xde, 0xa7, 0x97, 0x52, 0x1c, 0x62, 0x2c, 0x13, 0xb1, 0x58, 0xba, 0xfa, 0x70, 0x8e, 0x0e,
	0xed, 0x30, 0x86, 0xfe, 0xfc, 0x4f, 0x75, 0x9c, 0x42, 0xb0, 0xb8, 0xbc, 0x85, 0x0a, 0xd3, 0xf4,
	0x79, 0xcc, 0x5e, 0x38, 0x8a, 0x96, 0xd7, 0xe8, 0x68, 0xd0, 0x6a, 0x61, 0x8e, 0x0a, 0x62, 0x8e,
	0x02, 0x8d, 0xca, 0xf0, 0xc7, 0xff, 0x98, 0x3e, 0xa1, 0xa3, 0xb4, 0xfa, 0x0a, 0x7d, 0x99, 0x9b,
	0x7b, 0x6f, 0xeb, 0x4b, 0x5f, 0x8c, 0x7c, 0x54, 0xd0, 0x33, 0x0e, 0xa2, 0x8b, 0x45, 0x3a, 0xd2,
	0xf1, 0xf6, 0xec, 0xb0, 0x84, 0xce, 0x8b, 0x1e, 0x7c, 0x79, 0x3d, 0x10, 0x52, 0xd7, 0xf0, 0x02,
	0xe3, 0x36, 0xf2, 0x9f, 0x6b, 0xea, 0x3d, 0xbc, 0x62, 0xe2, 0x7a, 0x87, 0x02, 0xf1, 0x39, 0x7a,
	0x35, 0x32, 0xb6, 0xe9, 0xaf, 0xe0, 0x2d, 0xab, 0x5e, 0x31, 0x9a, 0x86, 0x55, 0x63, 0x83, 0x60,
	0xfa, 0x2e, 0xa1, 0x0b, 0x79, 0xec, 0x20, 0xc6, 0x71, 0x3a, 0x52, 0xe3, 0xc5, 0xe3, 0x9b, 0xf9,
	0x94, 0x1e, 0xfc, 0xf8, 0xa3, 0x1f, 0x1a, 0xcd, 0x4e, 0xb0, 0xc4, 0x43, 0x7a, 0xf0, 0x03, 0xb7,
	0xe8, 0x4b, 0x4e, 0xc7, 0x62, 0xa1, 0xb1, 0xc2, 0x10, 0x0f, 0x6b, 0x4a, 0x0c, 0x4b, 0xef, 0x4a,
	0xe9, 0x7d, 0x2a, 0xea, 0x3c, 0x3d, 0xcf, 0xc1, 0xdd, 0xbe, 0x77, 0x27, 0xd6, 0x26, 0x9c, 0xa5,
	0x27, 0xf1, 0x08, 0x1c, 0xd6, 0x4f, 0x9a, 0x75, 0xf5, 0x5d, 0x7a, 0x41, 0x90, 0x8c, 0xea, 0x27,
	0x76, 0xe8, 0x4d, 0x8a, 0x10, 0x7a, 0xd4, 0xa2, 0x03, 0xef, 0x3d, 0xc1, 0x64, 0x94, 0xcf, 0x8d,
	0x58, 0x37, 0xa0, 0xa6, 0x59, 0xec, 0x6f, 0x08, 0xd4, 0x2d, 0x5a, 0x10, 0xcd, 0x22, 0xd4, 0xeb,
	0xc2, 0x69, 0x96, 0x8e, 0xb5, 0xdb, 0x7a, 0x4e, 0x62, 0x4d, 0xde, 0x6a, 0x36, 0x45, 0xbc, 0xea,
	0xfb, 0x58, 0x79, 0xf1, 0xd9, 0xff, 0xdb, 0xed, 0x0a, 0x1e, 0x0d, 0xb7, 0xef, 0xdd, 0xf1, 0x0f,
	0xd9, 0x26, 0xf3, 0x8f, 0xc1, 0x78, 0xb6, 0xe2, 0x6b, 0xb5, 0x8b, 0x37, 0x89, 0x44, 0x09, 0x41,
	0x55, 0x04, 0x50, 0xb3, 0x89, 0xa0, 0x04, 0x13, 0x3d, 0xf0, 0x34, 0x3a, 0xc5, 0x3d, 0xe9, 0x6c,
	0xc7, 0x61, 0xee, 0xae, 0xd8, 0x6d, 0xc6, 0xa1, 0x6d, 0xd3, 0xa2, 0x4c, 0x21, 0xea, 0xa2, 0x63,
	0xd5, 0x74, 0x39, 0xa1, 0xa0, 0x05, 0xed, 0xa8, 0xa8, 0x7e, 0x48, 0x64, 0x1e, 0x06, 0x29, 0xae,
	0xae, 0xf2, 0x31, 0x75, 0x9b, 0x3f, 0x25, 0x74, 0x5a, 0x0a, 0x13, 0x33, 0xf1, 0xa6, 0xb0, 0x40,
	0xb9, 0x52, 0x71, 0x0c, 0xd7, 0xee, 0x01, 0x56, 0x61, 0xd7, 0x59, 0xb7, 0x28, 0x64, 0x55, 0x78,
	0x64, 0xa9, 0xfa, 0x2d, 0xc1, 0x72, 0x96, 0x78, 0xc7, 0x6c, 0xdd, 0xa5, 0x67, 0x6a, 0xdd, 0x61,
	0x79, 0x45, 0x27, 0x59, 0xd1, 0x7b, 0x55, 0x8f, 0x2e, 0x6d, 0x5f, 0xc5, 0x17, 0xc5, 0xdb, 0x95,
	0xcd, 0xdb, 0xac, 0x6d, 0xbb, 0xa6, 0xf7, 0xa0, 0xe6, 0x98, 0xed, 0x68, 0x73, 0x4c, 0x51, 0x5a,
	0xdb, 0x35, 0x2c, 0x8b, 0x35, 0xb7, 0xa3, 0x76, 0x73, 0x0c, 0x47, 0xde, 0xae, 0xc3, 0x6b, 0xf4,
	0x65, 0x87, 0xd5, 0xcc, 0xb6, 0xc9, 0x2c, 0x6f, 0x3b, 0xbc, 0x5e, 0x82, 0x4b, 0xfe, 0x5c, 0x34,
	0x81, 0x17, 0x88, 0xba, 0x8e, 0x3b, 0x51, 0xf4, 0x85, 0xf9, 0x39, 0x4f, 0x47, 0x5d, 0x3e, 0x82,
	0x8e, 0xf0, 0x4f, 0xbd, 0x40, 0x5f, 0x0d, 0xb2, 0x6b, 0x78, 0xec, 0x1d, 0xb3, 0x65, 0x86, 0xe8,
	0xd4, 0x2d, 0xbc, 0x1b, 0x7a, 0x26, 0xa2, 0x2e, 0x97, 0xfa, 0x6d, 0xc8, 0x76, 0xd3, 0x1f, 0xc5,
	0x5d, 0x7a, 0x31, 0x21, 0xd3, 0x91, 0xe2, 0x98, 0x13, 0x7e, 0xaa, 0x1b, 0xe1, 0xf6, 0x0c, 0x47,
	0x06, 0xb8, 0x4b, 0xff, 0x13, 0x6d, 0x9a, 0x04, 0x65, 0xc4, 0x26, 0x6f, 0xcc, 0x36, 0x29, 0x75,
	0x3d, 0xc3, 0xf1, 0xb6, 0x3d, 0xb3, 0xc5, 0x70, 0x59, 0x95, 0x72, 0x40, 0x61, 0x95, 0x43, 0x0a,
	0xab, 0xbc, 0x15, 0x52, 0x58, 0x95, 0xd3, 0x7e, 0xb3, 0xf3, 0xe4, 0x9f, 0xd3, 0x44, 0x1f, 0xe3,
	0x7a, 0xfe, 0x8c, 0xbf, 0x27, 0x99, 0x55, 0x0f, 0x4c, 0x0c, 0x0d, 0x60, 0xe2, 0x14, 0xb3, 0xea,
	0xdc, 0xc0, 0x38, 0x1d, 0x79, 0xd8, 0xb1, 0x3d, 0xa3, 0x30, 0x1c, 0x5c, 0xe5, 0xfc, 0xc7, 0x7f,
	0x72, 0x74, 0x5c, 0x56, 0x2f, 0x8c, 0xf0, 0x41, 0xfe, 0xbd, 0xfc, 0xdf, 0x12, 0x1d, 0xe1, 0xd1,
	0xc2, 0xd7, 0xe8, 0x99, 0x9e, 0xbe, 0x0d, 0x66, 0xc4, 0x54, 0x8b, 0xcd, 0x9e, 0x72, 0x25, 0x43,
	0x2a, 0xc8, 0x97, 0x5a, 0xfa, 0xc6, 0x5f, 0xff, 0xfd, 0xed, 0x93, 0x0a, 0x14, 0x34, 0x09, 0xff,
	0x06, 0x5f, 0x27, 0xf4, 0xa5, 0xde, 0xee, 0x1a, 0x64, 0x96, 0xfb, 0x9b, 0x72, 0x65, 0x36, 0x4b,
	0x0c, 0x11, 0x5c, 0xe2, 0x08, 0x2e, 0xc2, 0x84, 0x88, 0x60, 0x87, 0x31, 0xbf, 0x72, 0xe0, 0x77,
	0x84, 0x4e, 0x48, 0x3b, 0x64, 0x58, 0x96, 0x38, 0x4a, 0xe9, 0xdf, 0x95, 0x95, 0x81, 0x74, 0x10,
	0xe9, 0x0a, 0x47, 0x7a, 0x0d, 0x5e, 0x13, 0x91, 0x3e, 0x8a, 0xf4, 0x7c, 0xd0, 0x1a, 0x73, 0x3d,
	0xb3, 0xc5, 0x0f, 0x01, 0xf8, 0x5b, 0x78, 0x21, 0x49, 0xa9, 0x40, 0x58, 0xcf, 0x00, 0x23, 0x7b,
	0xe2, 0x2b, 0xd7, 0x07, 0x57, 0xc4, 0x50, 0xde, 0xe4, 0xa1, 0xdc, 0x80, 0xf5, 0xd4, 0x50, 0xc2,
	0x9b, 0x44, 0xc3, 0x3d, 0xa4, 0x1d, 0xe0, 0xc7, 0x63, 0xf8, 0x13, 0xc1, 0x03, 0x47, 0xc6, 0xf9,
	0xc1, 0x5a, 0x6e, 0x70, 0x7d, 0xcf, 0x6f, 0x65, 0x7d, 0x60, 0x3d, 0x8c, 0x69, 0x9d, 0xc7, 0xb4,
	0x04, 0x5a, 0xbe, 0x98, 0xbc, 0x3d, 0xed, 0xc0, 0x7f, 0xdb, 0x3f, 0x86, 0xbf, 0x84, 0xe7, 0x8a,
	0x9c, 0xe4, 0x03, 0x59, 0xaa, 0x33, 0xa9, 0x48, 0xe5, 0xc6, 0x21, 0x34, 0x31, 0xa2, 0x1b, 0x3c,
	0xa2, 0x15, 0x58, 0xca, 0x17, 0x51, 0xd5, 0xab, 0x69, 0xed, 0xc0, 0x2a, 0xfc, 0x84, 0xe0, 0x63,
	0xaf, 0xff, 0x51, 0x0e, 0x8b, 0x12, 0x34, 0x89, 0x64, 0xa1, 0x72, 0x2d, 0xa7, 0x34, 0xe2, 0x7d,
	0x83, 0xe3, 0xd5, 0xe0, 0x9a, 0x88, 0xd7, 0x0d, 0x34, 0xba, 0x60, 0x0f, 0x42, 0xd6, 0xf1, 0x31,
	0xfc, 0x80, 0xe0, 0xfb, 0x3d, 0x46, 0x42, 0x40, 0x3e, 0xf7, 0x51, 0xa6, 0xcb, 0x79, 0xc5, 0x11,
	0xee, 0x02, 0x87, 0x3b, 0x03, 0x6a, 0x36, 0x5c, 0xf8, 0x73, 0x58, 0xef, 0x32, 0xae, 0x4b, 0x5a,
	0xef, 0x19, 0x3c, 0x9d, 0xb4, 0xde, 0xb3, 0x48, 0x35, 0xf5, 0x26, 0x87, 0xbf, 0x06, 0xab, 0x39,
	0xb2, 0x2d, 0x6e, 0xe0, 0x3f, 0x24, 0x13, 0xb2, 0xd1, 0xf6, 0x5d, 0xcd, 0x05, 0x2b, 0xbe, 0x79,
	0xdf, 0x18, 0x50, 0x0b, 0x43, 0x59, 0xe5, 0xa1, 0x94, 0x61, 0x31, 0x47, 0x28, 0xdd, 0x7d, 0xfb,
	0xc7, 0x30, 0x84, 0x64, 0x0e, 0x4b, 0x1a, 0x42, 0x2a, 0xc3, 0x26, 0x0d, 0x21, 0x9d, 0x28, 0x53,
	0x37, 0x78, 0x08, 0xab, 0xb0, 0x9c, 0x23, 0x04, 0xdc, 0xa4, 0x5a, 0x2d, 0xe0, 0xcd, 0x60, 0x8f,
	0xd2, 0x2e, 0x71, 0x01, 0x97, 0x25, 0x00, 0x7a, 0x79, 0x16, 0x65, 0x26, 0x5d, 0x08, 0x41, 0x4d,
	0x73, 0x50, 0x13, 0x70, 0x41, 0x04, 0xc5, 0x59, 0x0e, 0xf8, 0x5e, 0x78, 0x4c, 0xf4, 0x73, 0x26,
	0xd2, 0x63, 0x22, 0x91, 0x92, 0x91, 0x1e, 0x13, 0xc9, 0x44, 0x8c, 0x7a, 0x95, 0xa3, 0xba, 0x0c,
	0x97, 0x24, 0xa8, 0x7a, 0xaa, 0xf4, 0x69, 0xd8, 0xfc, 0xa7, 0xd2, 0x27, 0xf0, 0x99, 0x14, 0x00,
	0x59, 0xe4, 0x8d, 0x72, 0xf3, 0x70, 0xca, 0x18, 0x8c, 0xc6, 0x83, 0xb9, 0x0a, 0x73, 0x99, 0xc1,
	0x68, 0xfe, 0x1b, 0xd2, 0x85, 0x6f, 0x11, 0xfa, 0xe9, 0x18, 0x41, 0x01, 0xf3, 0x12, 0x08, 0x02,
	0x2f, 0xa3, 0x5c, 0xcd, 0x21, 0x99, 0x7d, 0xbc, 0xd5, 0x3f, 0x88, 0xaa, 0x51, 0x3b, 0xf0, 0xb7,
	0xd2, 0x13, 0x42, 0xcf, 0xc5, 0x59, 0x13, 0xc8, 0xf6, 0x15, 0xe5, 0x70, 0x21, 0x8f, 0x28, 0xe2,
	0xba, 0xc2, 0x71, 0x4d, 0xc3, 0x54, 0x2a, 0x2e, 0xf8, 0x4e, 0x58, 0x9a, 0xfd, 0xa4, 0x8a, 0xb4,
	0x34, 0x13, 0x99, 0x19, 0x69, 0x69, 0x26, 0x33, 0x35, 0xea, 0x2c, 0xc7, 0x56, 0x82, 0x62, 0x2a,
	0x36, 0x17, 0x7e, 0x4f, 0x90, 0x0f, 0x4a, 0xe4, 0x58, 0x60, 0x45, 0x9e, 0x0e, 0x29, 0x8d, 0xa3,
	0xac, 0x0e, 0xa6, 0x94, 0x7d, 0xe7, 0xfa, 0x88, 0xbb, 0x0f, 0xdb, 0xfe, 0x05, 0xff, 0x05, 0x09,
	0x9f, 0x77, 0x71, 0x02, 0x01, 0x34, 0x09, 0x0e, 0x19, 0xc9, 0xa3, 0xbc, 0x9e, 0x5f, 0x01, 0x41,
	0x2f, 0x73, 0xd0, 0x8b, 0xb0, 0x20, 0x82, 0x76, 0x22, 0xa5, 0x9e, 0x5e, 0xc1, 0x47, 0xfc, 0x33,
	0x82, 0x7c, 0xa1, 0x48, 0x99, 0x40, 0x6e, 0x04, 0x51, 0xb2, 0x97, 0x06, 0xd0, 0x40, 0xd0, 0xd7,
	0x38, 0xe8, 0x39, 0xb8, 0x92, 0x0b, 0x74, 0xb7, 0x44, 0x12, 0x79, 0x0b, 0x69, 0x89, 0xa4, 0x71,
	0x2c, 0xd2, 0x12, 0x49, 0xa5, 0x46, 0xd2, 0x4a, 0xa4, 0x07, 0x78, 0x0f, 0x05, 0x12, 0x24, 0xfc,
	0xc7, 0x04, 0xa9, 0x81, 0x38, 0xa7, 0x00, 0xb2, 0x46, 0x4b, 0x42, 0x74, 0x28, 0x5a, 0x6e, 0x79,
	0x44, 0xbc, 0xc8, 0x11, 0xcf, 0xc2, 0x4c, 0x42, 0x51, 0x07, 0x0a, 0x9a, 0x59, 0xad, 0x6d, 0x07,
	0x14, 0x06, 0x7c, 0x44, 0xe8, 0xd9, 0x7e, 0x5e, 0x00, 0xe6, 0x64, 0x89, 0x8a, 0xb1, 0x1c, 0xca,
	0x7c, 0xb6, 0x20, 0x62, 0x9a, 0xe1, 0x98, 0x8a, 0x30, 0x99, 0x90, 0xc5, 0x88, 0x0d, 0x81, 0xdf,
	0x44, 0x55, 0x2a, 0x70, 0x14, 0xf2, 0x2a, 0x95, 0x71, 0x21, 0xf2, 0x2a, 0x95, 0x12, 0x20, 0xea,
	0x1a, 0x87, 0xf9, 0x3a, 0x94, 0xd3, 0x60, 0x8a, 0xfd, 0x60, 0xe5, 0xee, 0xc7, 0xcf, 0x8a, 0xe4,
	0xe9, 0xb3, 0x22, 0xf9, 0xd7, 0xb3, 0x22, 0x79, 0xf2, 0xbc, 0x78, 0xe2, 0xe9, 0xf3, 0xe2, 0x89,
	0xbf, 0x3f, 0x2f, 0x9e, 0xf8, 0x4a, 0xb9, 0x61, 0x7a, 0xbb, 0x9d, 0x6a, 0xb9, 0x66, 0xb7, 0xd0,
	0x66, 0xd3, 0xa8, 0xba, 0xa1, 0xf9, 0xbd, 0x1e, 0x07, 0xde, 0x7e, 0x9b, 0xb9, 0xd5, 0x51, 0xce,
	0x84, 0xac, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x65, 0x99, 0xd5, 0xfa, 0x83, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryFeeRate queries the bitcoin network fee rate on the bitway chain.
	QueryFeeRate(ctx context.Context, in *QueryFeeRateRequest, opts ...grpc.CallOption) (*QueryFeeRateResponse, error)
	// QueryWithdrawalNetworkFee queries the estimated btc network fee for the given withdrawal.
	QueryWithdrawalNetworkFee(ctx context.Context, in *QueryWithdrawalNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawalNetworkFeeResponse, error)
	// QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
	QueryWithdrawRequestsByAddress(ctx context.Context, in *QueryWithdrawRequestsByAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByAddressResponse, error)
	// QueryWithdrawRequestsByTxHash queries the withdrawal requests by the given tx hash.
	QueryWithdrawRequestsByTxHash(ctx context.Context, in *QueryWithdrawRequestsByTxHashRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByTxHashResponse, error)
	// QueryPendingBtcWithdrawRequests queries the pending btc withdrawal requests.
	QueryPendingBtcWithdrawRequests(ctx context.Context, in *QueryPendingBtcWithdrawRequestsRequest, opts ...grpc.CallOption) (*QueryPendingBtcWithdrawRequestsResponse, error)
	// QuerySigningRequest queries the signing request by sequence.
	QuerySigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error)
	// QueryPendingSigningRequests queries the pending signing requests.
	QueryPendingSigningRequests(ctx context.Context, in *QueryPendingSigningRequestsRequest, opts ...grpc.CallOption) (*QueryPendingSigningRequestsResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error)
	// QueryRefreshingRequest queries the refreshing request by the given id.
	QueryRefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error)
	// QueryRefreshingRequests queries the refreshing requests by the given status.
	QueryRefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error)
	// QueryRefreshingCompletions queries refreshing completions by the given request id.
	QueryRefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error)
	// QueryIBCDepositScript queries the deposit OP_RETURN script for cross-chain via IBC.
	QueryIBCDepositScript(ctx context.Context, in *QueryIBCDepositScriptRequest, opts ...grpc.CallOption) (*QueryIBCDepositScriptResponse, error)
	// QueryRateLimit queries the current rate limit
	QueryRateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error)
	// QueryRateLimitByAddress queries the current rate limit by the given address
	QueryRateLimitByAddress(ctx context.Context, in *QueryRateLimitByAddressRequest, opts ...grpc.CallOption) (*QueryRateLimitByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryFeeRate(ctx context.Context, in *QueryFeeRateRequest, opts ...grpc.CallOption) (*QueryFeeRateResponse, error) {
	out := new(QueryFeeRateResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawalNetworkFee(ctx context.Context, in *QueryWithdrawalNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawalNetworkFeeResponse, error) {
	out := new(QueryWithdrawalNetworkFeeResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryWithdrawalNetworkFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawRequestsByAddress(ctx context.Context, in *QueryWithdrawRequestsByAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByAddressResponse, error) {
	out := new(QueryWithdrawRequestsByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryWithdrawRequestsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawRequestsByTxHash(ctx context.Context, in *QueryWithdrawRequestsByTxHashRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByTxHashResponse, error) {
	out := new(QueryWithdrawRequestsByTxHashResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryWithdrawRequestsByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingBtcWithdrawRequests(ctx context.Context, in *QueryPendingBtcWithdrawRequestsRequest, opts ...grpc.CallOption) (*QueryPendingBtcWithdrawRequestsResponse, error) {
	out := new(QueryPendingBtcWithdrawRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryPendingBtcWithdrawRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error) {
	out := new(QuerySigningRequestResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QuerySigningRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error) {
	out := new(QuerySigningRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QuerySigningRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error) {
	out := new(QuerySigningRequestsByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QuerySigningRequestsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error) {
	out := new(QuerySigningRequestByTxHashResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QuerySigningRequestByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingSigningRequests(ctx context.Context, in *QueryPendingSigningRequestsRequest, opts ...grpc.CallOption) (*QueryPendingSigningRequestsResponse, error) {
	out := new(QueryPendingSigningRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryPendingSigningRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error) {
	out := new(QueryUTXOsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryUTXOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error) {
	out := new(QueryUTXOsByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryUTXOsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	out := new(QueryUTXOCountAndBalancesByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryUTXOCountAndBalancesByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error) {
	out := new(QueryDKGRequestResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryDKGRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error) {
	out := new(QueryDKGRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryDKGRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error) {
	out := new(QueryAllDKGRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryAllDKGRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error) {
	out := new(QueryDKGCompletionRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryDKGCompletionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error) {
	out := new(QueryRefreshingRequestResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryRefreshingRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error) {
	out := new(QueryRefreshingRequestsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryRefreshingRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error) {
	out := new(QueryRefreshingCompletionsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryRefreshingCompletions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIBCDepositScript(ctx context.Context, in *QueryIBCDepositScriptRequest, opts ...grpc.CallOption) (*QueryIBCDepositScriptResponse, error) {
	out := new(QueryIBCDepositScriptResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryIBCDepositScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error) {
	out := new(QueryRateLimitResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRateLimitByAddress(ctx context.Context, in *QueryRateLimitByAddressRequest, opts ...grpc.CallOption) (*QueryRateLimitByAddressResponse, error) {
	out := new(QueryRateLimitByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Query/QueryRateLimitByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryFeeRate queries the bitcoin network fee rate on the bitway chain.
	QueryFeeRate(context.Context, *QueryFeeRateRequest) (*QueryFeeRateResponse, error)
	// QueryWithdrawalNetworkFee queries the estimated btc network fee for the given withdrawal.
	QueryWithdrawalNetworkFee(context.Context, *QueryWithdrawalNetworkFeeRequest) (*QueryWithdrawalNetworkFeeResponse, error)
	// QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
	QueryWithdrawRequestsByAddress(context.Context, *QueryWithdrawRequestsByAddressRequest) (*QueryWithdrawRequestsByAddressResponse, error)
	// QueryWithdrawRequestsByTxHash queries the withdrawal requests by the given tx hash.
	QueryWithdrawRequestsByTxHash(context.Context, *QueryWithdrawRequestsByTxHashRequest) (*QueryWithdrawRequestsByTxHashResponse, error)
	// QueryPendingBtcWithdrawRequests queries the pending btc withdrawal requests.
	QueryPendingBtcWithdrawRequests(context.Context, *QueryPendingBtcWithdrawRequestsRequest) (*QueryPendingBtcWithdrawRequestsResponse, error)
	// QuerySigningRequest queries the signing request by sequence.
	QuerySigningRequest(context.Context, *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(context.Context, *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(context.Context, *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error)
	// QueryPendingSigningRequests queries the pending signing requests.
	QueryPendingSigningRequests(context.Context, *QueryPendingSigningRequestsRequest) (*QueryPendingSigningRequestsResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(context.Context, *QueryUTXOsRequest) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(context.Context, *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(context.Context, *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(context.Context, *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(context.Context, *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error)
	// QueryRefreshingRequest queries the refreshing request by the given id.
	QueryRefreshingRequest(context.Context, *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error)
	// QueryRefreshingRequests queries the refreshing requests by the given status.
	QueryRefreshingRequests(context.Context, *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error)
	// QueryRefreshingCompletions queries refreshing completions by the given request id.
	QueryRefreshingCompletions(context.Context, *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error)
	// QueryIBCDepositScript queries the deposit OP_RETURN script for cross-chain via IBC.
	QueryIBCDepositScript(context.Context, *QueryIBCDepositScriptRequest) (*QueryIBCDepositScriptResponse, error)
	// QueryRateLimit queries the current rate limit
	QueryRateLimit(context.Context, *QueryRateLimitRequest) (*QueryRateLimitResponse, error)
	// QueryRateLimitByAddress queries the current rate limit by the given address
	QueryRateLimitByAddress(context.Context, *QueryRateLimitByAddressRequest) (*QueryRateLimitByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryFeeRate(ctx context.Context, req *QueryFeeRateRequest) (*QueryFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeeRate not implemented")
}
func (*UnimplementedQueryServer) QueryWithdrawalNetworkFee(ctx context.Context, req *QueryWithdrawalNetworkFeeRequest) (*QueryWithdrawalNetworkFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawalNetworkFee not implemented")
}
func (*UnimplementedQueryServer) QueryWithdrawRequestsByAddress(ctx context.Context, req *QueryWithdrawRequestsByAddressRequest) (*QueryWithdrawRequestsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawRequestsByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryWithdrawRequestsByTxHash(ctx context.Context, req *QueryWithdrawRequestsByTxHashRequest) (*QueryWithdrawRequestsByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawRequestsByTxHash not implemented")
}
func (*UnimplementedQueryServer) QueryPendingBtcWithdrawRequests(ctx context.Context, req *QueryPendingBtcWithdrawRequestsRequest) (*QueryPendingBtcWithdrawRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingBtcWithdrawRequests not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequest(ctx context.Context, req *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequest not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequests(ctx context.Context, req *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequests not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequestsByAddress(ctx context.Context, req *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestsByAddress not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequestByTxHash(ctx context.Context, req *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestByTxHash not implemented")
}
func (*UnimplementedQueryServer) QueryPendingSigningRequests(ctx context.Context, req *QueryPendingSigningRequestsRequest) (*QueryPendingSigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingSigningRequests not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOs(ctx context.Context, req *QueryUTXOsRequest) (*QueryUTXOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOs not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOsByAddress(ctx context.Context, req *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOsByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOCountAndBalancesByAddress(ctx context.Context, req *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOCountAndBalancesByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryDKGRequest(ctx context.Context, req *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequest not implemented")
}
func (*UnimplementedQueryServer) QueryDKGRequests(ctx context.Context, req *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequests not implemented")
}
func (*UnimplementedQueryServer) QueryAllDKGRequests(ctx context.Context, req *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllDKGRequests not implemented")
}
func (*UnimplementedQueryServer) QueryDKGCompletionRequests(ctx context.Context, req *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGCompletionRequests not implemented")
}
func (*UnimplementedQueryServer) QueryRefreshingRequest(ctx context.Context, req *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingRequest not implemented")
}
func (*UnimplementedQueryServer) QueryRefreshingRequests(ctx context.Context, req *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingRequests not implemented")
}
func (*UnimplementedQueryServer) QueryRefreshingCompletions(ctx context.Context, req *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingCompletions not implemented")
}
func (*UnimplementedQueryServer) QueryIBCDepositScript(ctx context.Context, req *QueryIBCDepositScriptRequest) (*QueryIBCDepositScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIBCDepositScript not implemented")
}
func (*UnimplementedQueryServer) QueryRateLimit(ctx context.Context, req *QueryRateLimitRequest) (*QueryRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRateLimit not implemented")
}
func (*UnimplementedQueryServer) QueryRateLimitByAddress(ctx context.Context, req *QueryRateLimitByAddressRequest) (*QueryRateLimitByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRateLimitByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryFeeRate(ctx, req.(*QueryFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawalNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalNetworkFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawalNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryWithdrawalNetworkFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawalNetworkFee(ctx, req.(*QueryWithdrawalNetworkFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawRequestsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawRequestsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawRequestsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryWithdrawRequestsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawRequestsByAddress(ctx, req.(*QueryWithdrawRequestsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawRequestsByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawRequestsByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawRequestsByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryWithdrawRequestsByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawRequestsByTxHash(ctx, req.(*QueryWithdrawRequestsByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingBtcWithdrawRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingBtcWithdrawRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingBtcWithdrawRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryPendingBtcWithdrawRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingBtcWithdrawRequests(ctx, req.(*QueryPendingBtcWithdrawRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QuerySigningRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequest(ctx, req.(*QuerySigningRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QuerySigningRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequests(ctx, req.(*QuerySigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QuerySigningRequestsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, req.(*QuerySigningRequestsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QuerySigningRequestByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, req.(*QuerySigningRequestByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingSigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingSigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryPendingSigningRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingSigningRequests(ctx, req.(*QueryPendingSigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryUTXOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOs(ctx, req.(*QueryUTXOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryUTXOsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, req.(*QueryUTXOsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOCountAndBalancesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOCountAndBalancesByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryUTXOCountAndBalancesByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, req.(*QueryUTXOCountAndBalancesByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryDKGRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequest(ctx, req.(*QueryDKGRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryDKGRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequests(ctx, req.(*QueryDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryAllDKGRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, req.(*QueryAllDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGCompletionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGCompletionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryDKGCompletionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, req.(*QueryDKGCompletionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryRefreshingRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingRequest(ctx, req.(*QueryRefreshingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryRefreshingRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingRequests(ctx, req.(*QueryRefreshingRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryRefreshingCompletions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingCompletions(ctx, req.(*QueryRefreshingCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIBCDepositScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCDepositScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIBCDepositScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryIBCDepositScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIBCDepositScript(ctx, req.(*QueryIBCDepositScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRateLimit(ctx, req.(*QueryRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRateLimitByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRateLimitByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Query/QueryRateLimitByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRateLimitByAddress(ctx, req.(*QueryRateLimitByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.btcbridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryFeeRate",
			Handler:    _Query_QueryFeeRate_Handler,
		},
		{
			MethodName: "QueryWithdrawalNetworkFee",
			Handler:    _Query_QueryWithdrawalNetworkFee_Handler,
		},
		{
			MethodName: "QueryWithdrawRequestsByAddress",
			Handler:    _Query_QueryWithdrawRequestsByAddress_Handler,
		},
		{
			MethodName: "QueryWithdrawRequestsByTxHash",
			Handler:    _Query_QueryWithdrawRequestsByTxHash_Handler,
		},
		{
			MethodName: "QueryPendingBtcWithdrawRequests",
			Handler:    _Query_QueryPendingBtcWithdrawRequests_Handler,
		},
		{
			MethodName: "QuerySigningRequest",
			Handler:    _Query_QuerySigningRequest_Handler,
		},
		{
			MethodName: "QuerySigningRequests",
			Handler:    _Query_QuerySigningRequests_Handler,
		},
		{
			MethodName: "QuerySigningRequestsByAddress",
			Handler:    _Query_QuerySigningRequestsByAddress_Handler,
		},
		{
			MethodName: "QuerySigningRequestByTxHash",
			Handler:    _Query_QuerySigningRequestByTxHash_Handler,
		},
		{
			MethodName: "QueryPendingSigningRequests",
			Handler:    _Query_QueryPendingSigningRequests_Handler,
		},
		{
			MethodName: "QueryUTXOs",
			Handler:    _Query_QueryUTXOs_Handler,
		},
		{
			MethodName: "QueryUTXOsByAddress",
			Handler:    _Query_QueryUTXOsByAddress_Handler,
		},
		{
			MethodName: "QueryUTXOCountAndBalancesByAddress",
			Handler:    _Query_QueryUTXOCountAndBalancesByAddress_Handler,
		},
		{
			MethodName: "QueryDKGRequest",
			Handler:    _Query_QueryDKGRequest_Handler,
		},
		{
			MethodName: "QueryDKGRequests",
			Handler:    _Query_QueryDKGRequests_Handler,
		},
		{
			MethodName: "QueryAllDKGRequests",
			Handler:    _Query_QueryAllDKGRequests_Handler,
		},
		{
			MethodName: "QueryDKGCompletionRequests",
			Handler:    _Query_QueryDKGCompletionRequests_Handler,
		},
		{
			MethodName: "QueryRefreshingRequest",
			Handler:    _Query_QueryRefreshingRequest_Handler,
		},
		{
			MethodName: "QueryRefreshingRequests",
			Handler:    _Query_QueryRefreshingRequests_Handler,
		},
		{
			MethodName: "QueryRefreshingCompletions",
			Handler:    _Query_QueryRefreshingCompletions_Handler,
		},
		{
			MethodName: "QueryIBCDepositScript",
			Handler:    _Query_QueryIBCDepositScript_Handler,
		},
		{
			MethodName: "QueryRateLimit",
			Handler:    _Query_QueryRateLimit_Handler,
		},
		{
			MethodName: "QueryRateLimitByAddress",
			Handler:    _Query_QueryRateLimitByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/btcbridge/query.proto",
}

func (m *QueryWithdrawRequestsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawRequestsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawRequestsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawRequestsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawRequestsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawRequestsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawRequestsByTxHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawRequestsByTxHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawRequestsByTxHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawRequestsByTxHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawRequestsByTxHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawRequestsByTxHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingBtcWithdrawRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBtcWithdrawRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBtcWithdrawRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingBtcWithdrawRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBtcWithdrawRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBtcWithdrawRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestByTxHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestByTxHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestByTxHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestByTxHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestByTxHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestByTxHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSigningRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSigningRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSigningRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSigningRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSigningRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSigningRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRate != nil {
		{
			size, err := m.FeeRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalNetworkFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalNetworkFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalNetworkFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalNetworkFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalNetworkFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalNetworkFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x12
	}
	if m.FeeRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for iNdEx := len(m.Utxos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utxos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for iNdEx := len(m.Utxos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utxos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuneBalances) > 0 {
		for iNdEx := len(m.RuneBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuneBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDKGRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDKGRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDKGRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDKGRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDKGRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDKGRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGCompletionRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGCompletionRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGCompletionRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGCompletionRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGCompletionRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGCompletionRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingCompletionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingCompletionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingCompletionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefreshingCompletionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefreshingCompletionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefreshingCompletionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Completions) > 0 {
		for iNdEx := len(m.Completions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Completions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCDepositScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCDepositScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCDepositScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCDepositScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCDepositScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCDepositScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Used != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x28
	}
	if m.Quota != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x20
	}
	n22, err22 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err22 != nil {
		return 0, err22
	}
	i -= n22
	i = encodeVarintQuery(dAtA, i, uint64(n22))
	i--
	dAtA[i] = 0x1a
	n23, err23 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err23 != nil {
		return 0, err23
	}
	i -= n23
	i = encodeVarintQuery(dAtA, i, uint64(n23))
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryWithdrawRequestsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawRequestsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawRequestsByTxHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawRequestsByTxHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingBtcWithdrawRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingBtcWithdrawRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func (m *QuerySigningRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestByTxHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestByTxHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSigningRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSigningRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRate != nil {
		l = m.FeeRate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalNetworkFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeeRate != 0 {
		n += 1 + sovQuery(uint64(m.FeeRate))
	}
	return n
}

func (m *QueryWithdrawalNetworkFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRate != 0 {
		n += 1 + sovQuery(uint64(m.FeeRate))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUTXOsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUTXOsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUTXOsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUTXOsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	if len(m.RuneBalances) > 0 {
		for _, e := range m.RuneBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDKGRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDKGRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDKGRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryDKGRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllDKGRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDKGRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDKGCompletionRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDKGCompletionRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRefreshingRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRefreshingRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefreshingRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefreshingRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefreshingCompletionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefreshingCompletionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Completions) > 0 {
		for _, e := range m.Completions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCDepositScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCDepositScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovQuery(uint64(l))
	if m.Quota != 0 {
		n += 1 + sovQuery(uint64(m.Quota))
	}
	if m.Used != 0 {
		n += 1 + sovQuery(uint64(m.Used))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryWithdrawRequestsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawRequestsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &WithdrawRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawRequestsByTxHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByTxHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByTxHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawRequestsByTxHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByTxHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawRequestsByTxHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &WithdrawRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBtcWithdrawRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBtcWithdrawRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBtcWithdrawRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBtcWithdrawRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBtcWithdrawRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBtcWithdrawRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &WithdrawRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SigningRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &SigningRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &SigningRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestByTxHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestByTxHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SigningRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSigningRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSigningRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSigningRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSigningRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSigningRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSigningRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &CompactSigningRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeRate == nil {
				m.FeeRate = &FeeRate{}
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalNetworkFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalNetworkFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalNetworkFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalNetworkFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalNetworkFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalNetworkFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &UTXO{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &UTXO{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneBalances = append(m.RuneBalances, &RuneBalance{})
			if err := m.RuneBalances[len(m.RuneBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &DKGRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DKGRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDKGRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDKGRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDKGRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDKGRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDKGRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDKGRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGCompletionRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGCompletionRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGCompletionRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RefreshingRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RefreshingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &RefreshingRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingCompletionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingCompletionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingCompletionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefreshingCompletionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefreshingCompletionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefreshingCompletionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Completions = append(m.Completions, &RefreshingCompletion{})
			if err := m.Completions[len(m.Completions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCDepositScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCDepositScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCDepositScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCDepositScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCDepositScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCDepositScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimit == nil {
				m.RateLimit = &RateLimit{}
			}
			if err := m.RateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
