// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/btcbridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitDepositTransaction defines the Msg/SubmitDepositTransaction request type.
type MsgSubmitDepositTransaction struct {
	// this is the relayer address who submits the bitcoin transaction to the bitway chain
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// the tx bytes in base64 format
	// used for parsing the sender of the transaction
	PrevTxBytes string `protobuf:"bytes,3,opt,name=prev_tx_bytes,json=prevTxBytes,proto3" json:"prev_tx_bytes,omitempty"`
	// the tx bytes in base64 format
	TxBytes string   `protobuf:"bytes,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Proof   []string `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgSubmitDepositTransaction) Reset()         { *m = MsgSubmitDepositTransaction{} }
func (m *MsgSubmitDepositTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDepositTransaction) ProtoMessage()    {}
func (*MsgSubmitDepositTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{0}
}
func (m *MsgSubmitDepositTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDepositTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDepositTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDepositTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDepositTransaction.Merge(m, src)
}
func (m *MsgSubmitDepositTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDepositTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDepositTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDepositTransaction proto.InternalMessageInfo

func (m *MsgSubmitDepositTransaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitDepositTransaction) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *MsgSubmitDepositTransaction) GetPrevTxBytes() string {
	if m != nil {
		return m.PrevTxBytes
	}
	return ""
}

func (m *MsgSubmitDepositTransaction) GetTxBytes() string {
	if m != nil {
		return m.TxBytes
	}
	return ""
}

func (m *MsgSubmitDepositTransaction) GetProof() []string {
	if m != nil {
		return m.Proof
	}
	return nil
}

// MsgSubmitDepositTransactionResponse defines the Msg/SubmitDepositTransaction response type.
type MsgSubmitDepositTransactionResponse struct {
}

func (m *MsgSubmitDepositTransactionResponse) Reset()         { *m = MsgSubmitDepositTransactionResponse{} }
func (m *MsgSubmitDepositTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDepositTransactionResponse) ProtoMessage()    {}
func (*MsgSubmitDepositTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{1}
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDepositTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDepositTransactionResponse.Merge(m, src)
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDepositTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDepositTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDepositTransactionResponse proto.InternalMessageInfo

// MsgSubmitWithdrawTransaction defines the Msg/SubmitWithdrawTransaction request type.
type MsgSubmitWithdrawTransaction struct {
	// this is the relayer address who submits the bitcoin transaction to the bitway chain
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// the tx bytes in base64 format
	TxBytes string   `protobuf:"bytes,3,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Proof   []string `protobuf:"bytes,4,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgSubmitWithdrawTransaction) Reset()         { *m = MsgSubmitWithdrawTransaction{} }
func (m *MsgSubmitWithdrawTransaction) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawTransaction) ProtoMessage()    {}
func (*MsgSubmitWithdrawTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{2}
}
func (m *MsgSubmitWithdrawTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawTransaction.Merge(m, src)
}
func (m *MsgSubmitWithdrawTransaction) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawTransaction proto.InternalMessageInfo

func (m *MsgSubmitWithdrawTransaction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitWithdrawTransaction) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *MsgSubmitWithdrawTransaction) GetTxBytes() string {
	if m != nil {
		return m.TxBytes
	}
	return ""
}

func (m *MsgSubmitWithdrawTransaction) GetProof() []string {
	if m != nil {
		return m.Proof
	}
	return nil
}

// MsgSubmitWithdrawTransactionResponse defines the Msg/SubmitWithdrawTransaction response type.
type MsgSubmitWithdrawTransactionResponse struct {
}

func (m *MsgSubmitWithdrawTransactionResponse) Reset()         { *m = MsgSubmitWithdrawTransactionResponse{} }
func (m *MsgSubmitWithdrawTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawTransactionResponse) ProtoMessage()    {}
func (*MsgSubmitWithdrawTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{3}
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.Merge(m, src)
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawTransactionResponse proto.InternalMessageInfo

// MsgSubmitFeeRate defines the Msg/SubmitFeeRate request type.
type MsgSubmitFeeRate struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	FeeRate int64  `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *MsgSubmitFeeRate) Reset()         { *m = MsgSubmitFeeRate{} }
func (m *MsgSubmitFeeRate) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFeeRate) ProtoMessage()    {}
func (*MsgSubmitFeeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{4}
}
func (m *MsgSubmitFeeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFeeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFeeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFeeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFeeRate.Merge(m, src)
}
func (m *MsgSubmitFeeRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFeeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFeeRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFeeRate proto.InternalMessageInfo

func (m *MsgSubmitFeeRate) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitFeeRate) GetFeeRate() int64 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

// MsgSubmitFeeRateResponse defines the Msg/SubmitFeeRate response type.
type MsgSubmitFeeRateResponse struct {
}

func (m *MsgSubmitFeeRateResponse) Reset()         { *m = MsgSubmitFeeRateResponse{} }
func (m *MsgSubmitFeeRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFeeRateResponse) ProtoMessage()    {}
func (*MsgSubmitFeeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{5}
}
func (m *MsgSubmitFeeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFeeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFeeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFeeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFeeRateResponse.Merge(m, src)
}
func (m *MsgSubmitFeeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFeeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFeeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFeeRateResponse proto.InternalMessageInfo

// MsgUpdateTrustedNonBtcRelayers defines the Msg/UpdateTrustedNonBtcRelayers request type.
type MsgUpdateTrustedNonBtcRelayers struct {
	Sender   string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Relayers []string `protobuf:"bytes,2,rep,name=relayers,proto3" json:"relayers,omitempty"`
}

func (m *MsgUpdateTrustedNonBtcRelayers) Reset()         { *m = MsgUpdateTrustedNonBtcRelayers{} }
func (m *MsgUpdateTrustedNonBtcRelayers) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrustedNonBtcRelayers) ProtoMessage()    {}
func (*MsgUpdateTrustedNonBtcRelayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{6}
}
func (m *MsgUpdateTrustedNonBtcRelayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrustedNonBtcRelayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrustedNonBtcRelayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrustedNonBtcRelayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrustedNonBtcRelayers.Merge(m, src)
}
func (m *MsgUpdateTrustedNonBtcRelayers) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrustedNonBtcRelayers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrustedNonBtcRelayers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrustedNonBtcRelayers proto.InternalMessageInfo

func (m *MsgUpdateTrustedNonBtcRelayers) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateTrustedNonBtcRelayers) GetRelayers() []string {
	if m != nil {
		return m.Relayers
	}
	return nil
}

// MsgUpdateTrustedNonBtcRelayersResponse defines the Msg/UpdateTrustedNonBtcRelayers response type.
type MsgUpdateTrustedNonBtcRelayersResponse struct {
}

func (m *MsgUpdateTrustedNonBtcRelayersResponse) Reset() {
	*m = MsgUpdateTrustedNonBtcRelayersResponse{}
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrustedNonBtcRelayersResponse) ProtoMessage()    {}
func (*MsgUpdateTrustedNonBtcRelayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{7}
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrustedNonBtcRelayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrustedNonBtcRelayersResponse.Merge(m, src)
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrustedNonBtcRelayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrustedNonBtcRelayersResponse proto.InternalMessageInfo

// MsgUpdateTrustedFeeProviders defines the Msg/UpdateTrustedFeeProviders request type.
type MsgUpdateTrustedFeeProviders struct {
	Sender       string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	FeeProviders []string `protobuf:"bytes,2,rep,name=FeeProviders,proto3" json:"FeeProviders,omitempty"`
}

func (m *MsgUpdateTrustedFeeProviders) Reset()         { *m = MsgUpdateTrustedFeeProviders{} }
func (m *MsgUpdateTrustedFeeProviders) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrustedFeeProviders) ProtoMessage()    {}
func (*MsgUpdateTrustedFeeProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{8}
}
func (m *MsgUpdateTrustedFeeProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrustedFeeProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrustedFeeProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrustedFeeProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrustedFeeProviders.Merge(m, src)
}
func (m *MsgUpdateTrustedFeeProviders) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrustedFeeProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrustedFeeProviders.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrustedFeeProviders proto.InternalMessageInfo

func (m *MsgUpdateTrustedFeeProviders) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateTrustedFeeProviders) GetFeeProviders() []string {
	if m != nil {
		return m.FeeProviders
	}
	return nil
}

// MsgUpdateTrustedFeeProvidersResponse defines the Msg/UpdateTrustedFeeProviders response type.
type MsgUpdateTrustedFeeProvidersResponse struct {
}

func (m *MsgUpdateTrustedFeeProvidersResponse) Reset()         { *m = MsgUpdateTrustedFeeProvidersResponse{} }
func (m *MsgUpdateTrustedFeeProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrustedFeeProvidersResponse) ProtoMessage()    {}
func (*MsgUpdateTrustedFeeProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{9}
}
func (m *MsgUpdateTrustedFeeProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrustedFeeProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrustedFeeProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrustedFeeProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrustedFeeProvidersResponse.Merge(m, src)
}
func (m *MsgUpdateTrustedFeeProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrustedFeeProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrustedFeeProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrustedFeeProvidersResponse proto.InternalMessageInfo

// MsgWithdrawToBitcoin defines the Msg/WithdrawToBitcoin request type.
type MsgWithdrawToBitcoin struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// withdraw amount in satoshi, etc: 100000000sat = 1btc
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgWithdrawToBitcoin) Reset()         { *m = MsgWithdrawToBitcoin{} }
func (m *MsgWithdrawToBitcoin) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawToBitcoin) ProtoMessage()    {}
func (*MsgWithdrawToBitcoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{10}
}
func (m *MsgWithdrawToBitcoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawToBitcoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawToBitcoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawToBitcoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawToBitcoin.Merge(m, src)
}
func (m *MsgWithdrawToBitcoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawToBitcoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawToBitcoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawToBitcoin proto.InternalMessageInfo

func (m *MsgWithdrawToBitcoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawToBitcoin) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgWithdrawToBitcoinResponse defines the Msg/WithdrawToBitcoin response type.
type MsgWithdrawToBitcoinResponse struct {
}

func (m *MsgWithdrawToBitcoinResponse) Reset()         { *m = MsgWithdrawToBitcoinResponse{} }
func (m *MsgWithdrawToBitcoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawToBitcoinResponse) ProtoMessage()    {}
func (*MsgWithdrawToBitcoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{11}
}
func (m *MsgWithdrawToBitcoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawToBitcoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawToBitcoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawToBitcoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawToBitcoinResponse.Merge(m, src)
}
func (m *MsgWithdrawToBitcoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawToBitcoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawToBitcoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawToBitcoinResponse proto.InternalMessageInfo

// MsgSubmitSignatures defines the Msg/SubmitSignatures request type.
type MsgSubmitSignatures struct {
	Sender     string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Txid       string   `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Signatures []string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *MsgSubmitSignatures) Reset()         { *m = MsgSubmitSignatures{} }
func (m *MsgSubmitSignatures) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSignatures) ProtoMessage()    {}
func (*MsgSubmitSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{12}
}
func (m *MsgSubmitSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSignatures.Merge(m, src)
}
func (m *MsgSubmitSignatures) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSignatures proto.InternalMessageInfo

func (m *MsgSubmitSignatures) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitSignatures) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *MsgSubmitSignatures) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// MsgSubmitSignaturesResponse defines the Msg/SubmitSignatures response type.
type MsgSubmitSignaturesResponse struct {
}

func (m *MsgSubmitSignaturesResponse) Reset()         { *m = MsgSubmitSignaturesResponse{} }
func (m *MsgSubmitSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSignaturesResponse) ProtoMessage()    {}
func (*MsgSubmitSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{13}
}
func (m *MsgSubmitSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSignaturesResponse.Merge(m, src)
}
func (m *MsgSubmitSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSignaturesResponse proto.InternalMessageInfo

// MsgConsolidateVaults is the Msg/ConsolidateVaults request type.
type MsgConsolidateVaults struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// vault version
	VaultVersion uint64 `protobuf:"varint,2,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty"`
	// btc consolidation
	BtcConsolidation *BtcConsolidation `protobuf:"bytes,3,opt,name=btc_consolidation,json=btcConsolidation,proto3" json:"btc_consolidation,omitempty"`
	// runes consolidations
	RunesConsolidations []*RunesConsolidation `protobuf:"bytes,4,rep,name=runes_consolidations,json=runesConsolidations,proto3" json:"runes_consolidations,omitempty"`
}

func (m *MsgConsolidateVaults) Reset()         { *m = MsgConsolidateVaults{} }
func (m *MsgConsolidateVaults) String() string { return proto.CompactTextString(m) }
func (*MsgConsolidateVaults) ProtoMessage()    {}
func (*MsgConsolidateVaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{14}
}
func (m *MsgConsolidateVaults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConsolidateVaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConsolidateVaults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConsolidateVaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConsolidateVaults.Merge(m, src)
}
func (m *MsgConsolidateVaults) XXX_Size() int {
	return m.Size()
}
func (m *MsgConsolidateVaults) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConsolidateVaults.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConsolidateVaults proto.InternalMessageInfo

func (m *MsgConsolidateVaults) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgConsolidateVaults) GetVaultVersion() uint64 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

func (m *MsgConsolidateVaults) GetBtcConsolidation() *BtcConsolidation {
	if m != nil {
		return m.BtcConsolidation
	}
	return nil
}

func (m *MsgConsolidateVaults) GetRunesConsolidations() []*RunesConsolidation {
	if m != nil {
		return m.RunesConsolidations
	}
	return nil
}

// MsgConsolidateVaultsResponse defines the Msg/ConsolidateVaults response type.
type MsgConsolidateVaultsResponse struct {
}

func (m *MsgConsolidateVaultsResponse) Reset()         { *m = MsgConsolidateVaultsResponse{} }
func (m *MsgConsolidateVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConsolidateVaultsResponse) ProtoMessage()    {}
func (*MsgConsolidateVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{15}
}
func (m *MsgConsolidateVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConsolidateVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConsolidateVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConsolidateVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConsolidateVaultsResponse.Merge(m, src)
}
func (m *MsgConsolidateVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConsolidateVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConsolidateVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConsolidateVaultsResponse proto.InternalMessageInfo

// MsgInitiateDKG is the Msg/InitiateDKG request type.
type MsgInitiateDKG struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// expected participant set
	Participants []*DKGParticipant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	// threshold required to perform DKG
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// asset types of vaults to be generated
	VaultTypes []AssetType `protobuf:"varint,4,rep,packed,name=vault_types,json=vaultTypes,proto3,enum=bitway.btcbridge.AssetType" json:"vault_types,omitempty"`
	// indicates if transferring the current vaults to the newly generated vaults when the DKG request is completed
	EnableTransfer bool `protobuf:"varint,5,opt,name=enable_transfer,json=enableTransfer,proto3" json:"enable_transfer,omitempty"`
	// target number of the UTXOs to be transferred each time
	TargetUtxoNum uint32 `protobuf:"varint,6,opt,name=target_utxo_num,json=targetUtxoNum,proto3" json:"target_utxo_num,omitempty"`
}

func (m *MsgInitiateDKG) Reset()         { *m = MsgInitiateDKG{} }
func (m *MsgInitiateDKG) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateDKG) ProtoMessage()    {}
func (*MsgInitiateDKG) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{16}
}
func (m *MsgInitiateDKG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateDKG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateDKG.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateDKG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateDKG.Merge(m, src)
}
func (m *MsgInitiateDKG) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateDKG) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateDKG.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateDKG proto.InternalMessageInfo

func (m *MsgInitiateDKG) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgInitiateDKG) GetParticipants() []*DKGParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *MsgInitiateDKG) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *MsgInitiateDKG) GetVaultTypes() []AssetType {
	if m != nil {
		return m.VaultTypes
	}
	return nil
}

func (m *MsgInitiateDKG) GetEnableTransfer() bool {
	if m != nil {
		return m.EnableTransfer
	}
	return false
}

func (m *MsgInitiateDKG) GetTargetUtxoNum() uint32 {
	if m != nil {
		return m.TargetUtxoNum
	}
	return 0
}

// MsgInitiateDKGResponse defines the Msg/InitiateDKG response type.
type MsgInitiateDKGResponse struct {
}

func (m *MsgInitiateDKGResponse) Reset()         { *m = MsgInitiateDKGResponse{} }
func (m *MsgInitiateDKGResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateDKGResponse) ProtoMessage()    {}
func (*MsgInitiateDKGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{17}
}
func (m *MsgInitiateDKGResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateDKGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateDKGResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateDKGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateDKGResponse.Merge(m, src)
}
func (m *MsgInitiateDKGResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateDKGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateDKGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateDKGResponse proto.InternalMessageInfo

// MsgCompleteDKG is the Msg/CompleteDKG request type.
type MsgCompleteDKG struct {
	// the sender
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// DKG request id
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// new vaults generated by DKG
	Vaults []string `protobuf:"bytes,3,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,4,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCompleteDKG) Reset()         { *m = MsgCompleteDKG{} }
func (m *MsgCompleteDKG) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteDKG) ProtoMessage()    {}
func (*MsgCompleteDKG) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{18}
}
func (m *MsgCompleteDKG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteDKG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteDKG.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteDKG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteDKG.Merge(m, src)
}
func (m *MsgCompleteDKG) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteDKG) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteDKG.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteDKG proto.InternalMessageInfo

func (m *MsgCompleteDKG) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCompleteDKG) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgCompleteDKG) GetVaults() []string {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *MsgCompleteDKG) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

func (m *MsgCompleteDKG) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// MsgCompleteDKGResponse defines the Msg/CompleteDKG response type.
type MsgCompleteDKGResponse struct {
}

func (m *MsgCompleteDKGResponse) Reset()         { *m = MsgCompleteDKGResponse{} }
func (m *MsgCompleteDKGResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteDKGResponse) ProtoMessage()    {}
func (*MsgCompleteDKGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{19}
}
func (m *MsgCompleteDKGResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteDKGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteDKGResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteDKGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteDKGResponse.Merge(m, src)
}
func (m *MsgCompleteDKGResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteDKGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteDKGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteDKGResponse proto.InternalMessageInfo

// MsgRefresh defines the Msg/Refresh request type.
type MsgRefresh struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// list of DKGs corresponding to key shares to be refreshed
	DkgIds []uint64 `protobuf:"varint,2,rep,packed,name=dkg_ids,json=dkgIds,proto3" json:"dkg_ids,omitempty"`
	// removed participant set
	RemovedParticipants []string `protobuf:"bytes,3,rep,name=removed_participants,json=removedParticipants,proto3" json:"removed_participants,omitempty"`
	// new threshold set corresponding to the DKGs
	Thresholds []uint32 `protobuf:"varint,4,rep,packed,name=thresholds,proto3" json:"thresholds,omitempty"`
	// timeout duration per DKG refreshing
	TimeoutDuration time.Duration `protobuf:"bytes,5,opt,name=timeout_duration,json=timeoutDuration,proto3,stdduration" json:"timeout_duration"`
}

func (m *MsgRefresh) Reset()         { *m = MsgRefresh{} }
func (m *MsgRefresh) String() string { return proto.CompactTextString(m) }
func (*MsgRefresh) ProtoMessage()    {}
func (*MsgRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{20}
}
func (m *MsgRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefresh.Merge(m, src)
}
func (m *MsgRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefresh proto.InternalMessageInfo

func (m *MsgRefresh) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRefresh) GetDkgIds() []uint64 {
	if m != nil {
		return m.DkgIds
	}
	return nil
}

func (m *MsgRefresh) GetRemovedParticipants() []string {
	if m != nil {
		return m.RemovedParticipants
	}
	return nil
}

func (m *MsgRefresh) GetThresholds() []uint32 {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

func (m *MsgRefresh) GetTimeoutDuration() time.Duration {
	if m != nil {
		return m.TimeoutDuration
	}
	return 0
}

// MsgRefreshResponse defines the Msg/Refresh response type.
type MsgRefreshResponse struct {
}

func (m *MsgRefreshResponse) Reset()         { *m = MsgRefreshResponse{} }
func (m *MsgRefreshResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefreshResponse) ProtoMessage()    {}
func (*MsgRefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{21}
}
func (m *MsgRefreshResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefreshResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefreshResponse.Merge(m, src)
}
func (m *MsgRefreshResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefreshResponse proto.InternalMessageInfo

// MsgCompleteRefreshing defines the Msg/CompleteRefreshing request type.
type MsgCompleteRefreshing struct {
	// sender
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// request id
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCompleteRefreshing) Reset()         { *m = MsgCompleteRefreshing{} }
func (m *MsgCompleteRefreshing) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteRefreshing) ProtoMessage()    {}
func (*MsgCompleteRefreshing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{22}
}
func (m *MsgCompleteRefreshing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteRefreshing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteRefreshing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteRefreshing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteRefreshing.Merge(m, src)
}
func (m *MsgCompleteRefreshing) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteRefreshing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteRefreshing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteRefreshing proto.InternalMessageInfo

func (m *MsgCompleteRefreshing) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCompleteRefreshing) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgCompleteRefreshing) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

func (m *MsgCompleteRefreshing) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// MsgCompleteRefreshingResponse defines the Msg/CompleteRefreshing response type.
type MsgCompleteRefreshingResponse struct {
}

func (m *MsgCompleteRefreshingResponse) Reset()         { *m = MsgCompleteRefreshingResponse{} }
func (m *MsgCompleteRefreshingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteRefreshingResponse) ProtoMessage()    {}
func (*MsgCompleteRefreshingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{23}
}
func (m *MsgCompleteRefreshingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteRefreshingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteRefreshingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteRefreshingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteRefreshingResponse.Merge(m, src)
}
func (m *MsgCompleteRefreshingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteRefreshingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteRefreshingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteRefreshingResponse proto.InternalMessageInfo

// MsgTransferVault is the Msg/TransferVault request type.
type MsgTransferVault struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// version of the source vault
	SourceVersion uint64 `protobuf:"varint,2,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
	// version of the destination vault
	DestVersion uint64 `protobuf:"varint,3,opt,name=dest_version,json=destVersion,proto3" json:"dest_version,omitempty"`
	// asset type
	AssetType AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=bitway.btcbridge.AssetType" json:"asset_type,omitempty"`
	// a set of optional pre-built PSBTs to perform the asset transfer
	Psbts []string `protobuf:"bytes,5,rep,name=psbts,proto3" json:"psbts,omitempty"`
	// target number of the UTXOs to be transferred; only take effect when psbt not provided
	TargetUtxoNum uint32 `protobuf:"varint,6,opt,name=target_utxo_num,json=targetUtxoNum,proto3" json:"target_utxo_num,omitempty"`
}

func (m *MsgTransferVault) Reset()         { *m = MsgTransferVault{} }
func (m *MsgTransferVault) String() string { return proto.CompactTextString(m) }
func (*MsgTransferVault) ProtoMessage()    {}
func (*MsgTransferVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{24}
}
func (m *MsgTransferVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferVault.Merge(m, src)
}
func (m *MsgTransferVault) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferVault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferVault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferVault proto.InternalMessageInfo

func (m *MsgTransferVault) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgTransferVault) GetSourceVersion() uint64 {
	if m != nil {
		return m.SourceVersion
	}
	return 0
}

func (m *MsgTransferVault) GetDestVersion() uint64 {
	if m != nil {
		return m.DestVersion
	}
	return 0
}

func (m *MsgTransferVault) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *MsgTransferVault) GetPsbts() []string {
	if m != nil {
		return m.Psbts
	}
	return nil
}

func (m *MsgTransferVault) GetTargetUtxoNum() uint32 {
	if m != nil {
		return m.TargetUtxoNum
	}
	return 0
}

// MsgTransferVaultResponse defines the Msg/TransferVault response type.
type MsgTransferVaultResponse struct {
}

func (m *MsgTransferVaultResponse) Reset()         { *m = MsgTransferVaultResponse{} }
func (m *MsgTransferVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferVaultResponse) ProtoMessage()    {}
func (*MsgTransferVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{25}
}
func (m *MsgTransferVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferVaultResponse.Merge(m, src)
}
func (m *MsgTransferVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferVaultResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/btcbridge parameters to be updated.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{26}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8f879fc570c1be, []int{27}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitDepositTransaction)(nil), "bitway.btcbridge.MsgSubmitDepositTransaction")
	proto.RegisterType((*MsgSubmitDepositTransactionResponse)(nil), "bitway.btcbridge.MsgSubmitDepositTransactionResponse")
	proto.RegisterType((*MsgSubmitWithdrawTransaction)(nil), "bitway.btcbridge.MsgSubmitWithdrawTransaction")
	proto.RegisterType((*MsgSubmitWithdrawTransactionResponse)(nil), "bitway.btcbridge.MsgSubmitWithdrawTransactionResponse")
	proto.RegisterType((*MsgSubmitFeeRate)(nil), "bitway.btcbridge.MsgSubmitFeeRate")
	proto.RegisterType((*MsgSubmitFeeRateResponse)(nil), "bitway.btcbridge.MsgSubmitFeeRateResponse")
	proto.RegisterType((*MsgUpdateTrustedNonBtcRelayers)(nil), "bitway.btcbridge.MsgUpdateTrustedNonBtcRelayers")
	proto.RegisterType((*MsgUpdateTrustedNonBtcRelayersResponse)(nil), "bitway.btcbridge.MsgUpdateTrustedNonBtcRelayersResponse")
	proto.RegisterType((*MsgUpdateTrustedFeeProviders)(nil), "bitway.btcbridge.MsgUpdateTrustedFeeProviders")
	proto.RegisterType((*MsgUpdateTrustedFeeProvidersResponse)(nil), "bitway.btcbridge.MsgUpdateTrustedFeeProvidersResponse")
	proto.RegisterType((*MsgWithdrawToBitcoin)(nil), "bitway.btcbridge.MsgWithdrawToBitcoin")
	proto.RegisterType((*MsgWithdrawToBitcoinResponse)(nil), "bitway.btcbridge.MsgWithdrawToBitcoinResponse")
	proto.RegisterType((*MsgSubmitSignatures)(nil), "bitway.btcbridge.MsgSubmitSignatures")
	proto.RegisterType((*MsgSubmitSignaturesResponse)(nil), "bitway.btcbridge.MsgSubmitSignaturesResponse")
	proto.RegisterType((*MsgConsolidateVaults)(nil), "bitway.btcbridge.MsgConsolidateVaults")
	proto.RegisterType((*MsgConsolidateVaultsResponse)(nil), "bitway.btcbridge.MsgConsolidateVaultsResponse")
	proto.RegisterType((*MsgInitiateDKG)(nil), "bitway.btcbridge.MsgInitiateDKG")
	proto.RegisterType((*MsgInitiateDKGResponse)(nil), "bitway.btcbridge.MsgInitiateDKGResponse")
	proto.RegisterType((*MsgCompleteDKG)(nil), "bitway.btcbridge.MsgCompleteDKG")
	proto.RegisterType((*MsgCompleteDKGResponse)(nil), "bitway.btcbridge.MsgCompleteDKGResponse")
	proto.RegisterType((*MsgRefresh)(nil), "bitway.btcbridge.MsgRefresh")
	proto.RegisterType((*MsgRefreshResponse)(nil), "bitway.btcbridge.MsgRefreshResponse")
	proto.RegisterType((*MsgCompleteRefreshing)(nil), "bitway.btcbridge.MsgCompleteRefreshing")
	proto.RegisterType((*MsgCompleteRefreshingResponse)(nil), "bitway.btcbridge.MsgCompleteRefreshingResponse")
	proto.RegisterType((*MsgTransferVault)(nil), "bitway.btcbridge.MsgTransferVault")
	proto.RegisterType((*MsgTransferVaultResponse)(nil), "bitway.btcbridge.MsgTransferVaultResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "bitway.btcbridge.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "bitway.btcbridge.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("bitway/btcbridge/tx.proto", fileDescriptor_2d8f879fc570c1be) }

var fileDescriptor_2d8f879fc570c1be = []byte{
	// 1412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4f, 0x8f, 0xd3, 0x46,
	0x14, 0x5f, 0x27, 0xd9, 0x7f, 0x2f, 0x9b, 0xdd, 0xc5, 0x6c, 0x21, 0x6b, 0x20, 0x84, 0x00, 0xcb,
	0x82, 0x44, 0x52, 0x52, 0x15, 0x55, 0xa8, 0x97, 0x86, 0x15, 0x14, 0xa1, 0xd0, 0x95, 0x59, 0x40,
	0xad, 0x2a, 0x59, 0x76, 0x3c, 0xeb, 0x58, 0x9b, 0x78, 0x2c, 0xcf, 0x38, 0x24, 0x37, 0xd4, 0xf6,
	0xd2, 0x5b, 0xd5, 0xaa, 0x52, 0x3f, 0x41, 0xcf, 0xf4, 0xd0, 0xef, 0xc0, 0x91, 0x63, 0x4f, 0x6d,
	0x05, 0x07, 0xbe, 0x41, 0xcf, 0x95, 0xc7, 0x93, 0x89, 0xbd, 0xfe, 0x93, 0xa5, 0x3d, 0xc5, 0xf3,
	0xde, 0x6f, 0xde, 0xfb, 0xbd, 0xf7, 0xe6, 0xcd, 0x3c, 0x05, 0xb6, 0x0d, 0x9b, 0x3e, 0xd7, 0x27,
	0x2d, 0x83, 0xf6, 0x0c, 0xcf, 0x36, 0x2d, 0xd4, 0xa2, 0xe3, 0xa6, 0xeb, 0x61, 0x8a, 0xe5, 0xcd,
	0x50, 0xd5, 0x14, 0x2a, 0xe5, 0x6c, 0x0f, 0x93, 0x21, 0x26, 0xad, 0x21, 0xb1, 0x5a, 0xa3, 0x5b,
	0xc1, 0x4f, 0x08, 0x55, 0xb6, 0x2c, 0x6c, 0x61, 0xf6, 0xd9, 0x0a, 0xbe, 0xb8, 0xb4, 0x66, 0x61,
	0x6c, 0x0d, 0x50, 0x8b, 0xad, 0x0c, 0xff, 0xb0, 0x65, 0xfa, 0x9e, 0x4e, 0x6d, 0xec, 0x70, 0xfd,
	0x85, 0x84, 0x6f, 0x57, 0xf7, 0xf4, 0x21, 0xe1, 0xea, 0x7a, 0x42, 0x2d, 0xbe, 0x42, 0x44, 0xe3,
	0x77, 0x09, 0xce, 0x75, 0x89, 0xf5, 0xd8, 0x37, 0x86, 0x36, 0xdd, 0x43, 0x2e, 0x26, 0x36, 0x3d,
	0xf0, 0x74, 0x87, 0xe8, 0xbd, 0xc0, 0x8d, 0x7c, 0x06, 0x96, 0x08, 0x72, 0x4c, 0xe4, 0x55, 0xa5,
	0xba, 0xb4, 0xbb, 0xaa, 0xf2, 0x95, 0x7c, 0x1e, 0x56, 0x8d, 0x01, 0xee, 0x1d, 0xf5, 0x75, 0xd2,
	0xaf, 0x16, 0x98, 0x6a, 0x26, 0x90, 0x1b, 0x50, 0x71, 0x3d, 0x34, 0xd2, 0xe8, 0x58, 0x33, 0x26,
	0x14, 0x91, 0x6a, 0x91, 0x21, 0xca, 0x81, 0xf0, 0x60, 0xdc, 0x09, 0x44, 0xf2, 0x36, 0xac, 0x08,
	0x75, 0x89, 0xa9, 0x97, 0x29, 0x57, 0x6d, 0xc1, 0xa2, 0xeb, 0x61, 0x7c, 0x58, 0x5d, 0xac, 0x17,
	0x77, 0x57, 0xd5, 0x70, 0x71, 0xa7, 0xfc, 0xcd, 0xbb, 0x97, 0x37, 0xb8, 0xff, 0xc6, 0x55, 0xb8,
	0x9c, 0x43, 0x5b, 0x45, 0xc4, 0xc5, 0x0e, 0x41, 0x8d, 0x1f, 0x25, 0x38, 0x2f, 0x70, 0xcf, 0x6c,
	0xda, 0x37, 0x3d, 0xfd, 0xf9, 0xff, 0x8f, 0x2f, 0xca, 0xbd, 0x98, 0xc1, 0xbd, 0x94, 0xc9, 0x7d,
	0x07, 0xae, 0xe4, 0x71, 0x12, 0xe4, 0x55, 0xd8, 0x14, 0xb8, 0x7b, 0x08, 0xa9, 0x3a, 0x45, 0x99,
	0x7c, 0xb7, 0x61, 0xe5, 0x10, 0x21, 0xcd, 0xd3, 0x29, 0x62, 0x74, 0x8b, 0xea, 0xf2, 0x61, 0xb8,
	0x25, 0xee, 0x5b, 0x81, 0xea, 0x71, 0x9b, 0xc2, 0x9f, 0x0e, 0xb5, 0x2e, 0xb1, 0x9e, 0xb8, 0xa6,
	0x4e, 0xd1, 0x81, 0xe7, 0x13, 0x8a, 0xcc, 0x47, 0xd8, 0xe9, 0xd0, 0x9e, 0x8a, 0x06, 0xfa, 0x04,
	0x79, 0x24, 0xd3, 0xbb, 0x02, 0x2b, 0x1e, 0xc7, 0x54, 0x0b, 0x2c, 0x6e, 0xb1, 0x8e, 0xbb, 0xdf,
	0x85, 0x9d, 0x7c, 0x17, 0x82, 0x8c, 0xc5, 0x0a, 0x17, 0x43, 0xde, 0x43, 0x68, 0xdf, 0xc3, 0x23,
	0xdb, 0xcc, 0xa3, 0xd2, 0x80, 0xb5, 0x28, 0x8e, 0xd3, 0x89, 0xc9, 0xd2, 0xaa, 0x91, 0xe9, 0x48,
	0x10, 0x7a, 0x0c, 0x5b, 0x5d, 0x62, 0x89, 0x7a, 0xe1, 0x8e, 0x4d, 0x7b, 0xd8, 0xce, 0x3e, 0x41,
	0x67, 0x60, 0x49, 0x1f, 0x62, 0xdf, 0xa1, 0xfc, 0xf8, 0xf0, 0x55, 0xdc, 0x79, 0x8d, 0x45, 0x99,
	0x30, 0x2a, 0x9c, 0x3a, 0x70, 0x5a, 0x94, 0xeb, 0xb1, 0x6d, 0x39, 0x3a, 0xf5, 0x3d, 0x94, 0x1d,
	0xbc, 0x0c, 0x25, 0x3a, 0xb6, 0x4d, 0xee, 0x91, 0x7d, 0xcb, 0x35, 0x00, 0x22, 0x76, 0x56, 0x8b,
	0x2c, 0x1d, 0x11, 0x49, 0x9c, 0xcf, 0x85, 0xc8, 0x6d, 0x30, 0xf3, 0x27, 0xe8, 0xfc, 0x54, 0x60,
	0x49, 0xb8, 0x8b, 0x1d, 0x82, 0x07, 0x76, 0x90, 0xb1, 0xa7, 0xba, 0x3f, 0xa0, 0x24, 0x68, 0x17,
	0xdd, 0xa7, 0x7d, 0xec, 0xd9, 0x74, 0xc2, 0x39, 0xcd, 0x04, 0xf2, 0x65, 0xa8, 0x8c, 0x02, 0x9c,
	0x36, 0x42, 0x1e, 0xb1, 0xb1, 0xc3, 0xf8, 0x95, 0xd4, 0x35, 0x26, 0x7c, 0x1a, 0xca, 0xe4, 0x2f,
	0xe0, 0x94, 0x41, 0x7b, 0x5a, 0x4f, 0xd8, 0x0e, 0x80, 0x41, 0x73, 0x95, 0xdb, 0x8d, 0xe6, 0xf1,
	0x7b, 0xb4, 0xd9, 0xa1, 0xbd, 0xbb, 0x51, 0xa4, 0xba, 0x69, 0x1c, 0x93, 0xc8, 0xcf, 0x60, 0xcb,
	0xf3, 0x1d, 0x44, 0xe2, 0x26, 0x09, 0x6b, 0xcc, 0x72, 0xfb, 0x4a, 0xd2, 0xa6, 0x1a, 0xa0, 0xe3,
	0x56, 0x4f, 0x7b, 0x09, 0x19, 0xb9, 0xb3, 0x1e, 0x64, 0x6c, 0x16, 0x1e, 0x2f, 0x62, 0x22, 0x29,
	0x22, 0x6b, 0xbf, 0x15, 0x60, 0xbd, 0x4b, 0xac, 0x07, 0x8e, 0x4d, 0x6d, 0x9d, 0xa2, 0xbd, 0x87,
	0xf7, 0xe7, 0xe4, 0x6b, 0x0f, 0xd6, 0x5c, 0xdd, 0xa3, 0x76, 0xcf, 0x76, 0x75, 0x87, 0x86, 0x67,
	0xb8, 0xdc, 0xae, 0x27, 0x19, 0xef, 0x3d, 0xbc, 0xbf, 0x3f, 0x03, 0xaa, 0xb1, 0x5d, 0x81, 0x0f,
	0xda, 0xf7, 0x10, 0xe9, 0xe3, 0x81, 0xc9, 0x12, 0x59, 0x51, 0x67, 0x02, 0xf9, 0x53, 0x28, 0x87,
	0x35, 0xa1, 0x13, 0x17, 0x85, 0x49, 0x59, 0x6f, 0x9f, 0x4b, 0xba, 0xf8, 0x8c, 0x10, 0x44, 0x0f,
	0x26, 0x2e, 0x52, 0x81, 0xe1, 0x83, 0x4f, 0x22, 0x5f, 0x83, 0x0d, 0xe4, 0xe8, 0xc6, 0x00, 0x69,
	0x34, 0xb8, 0xb8, 0x0e, 0x91, 0x57, 0x5d, 0xac, 0x4b, 0xbb, 0x2b, 0xea, 0x7a, 0x28, 0x3e, 0xe0,
	0x52, 0x79, 0x07, 0x36, 0xa8, 0xee, 0x59, 0x88, 0x6a, 0x3e, 0x1d, 0x63, 0xcd, 0xf1, 0x87, 0xd5,
	0x25, 0x46, 0xa5, 0x12, 0x8a, 0x9f, 0xd0, 0x31, 0x7e, 0xe4, 0x0f, 0x13, 0x39, 0xad, 0xc2, 0x99,
	0x78, 0xca, 0x44, 0x36, 0x7f, 0x95, 0x58, 0x36, 0xef, 0xe2, 0xa1, 0x3b, 0x40, 0x61, 0x36, 0xb3,
	0xda, 0x61, 0x1d, 0x0a, 0xbc, 0x19, 0x4a, 0x6a, 0xc1, 0x36, 0x03, 0x1c, 0x8b, 0x61, 0xda, 0x06,
	0x7c, 0x25, 0x5f, 0x87, 0xcd, 0xe0, 0x8c, 0x20, 0x87, 0xf8, 0x44, 0x73, 0x7d, 0xe3, 0x08, 0x4d,
	0xf8, 0x93, 0xb4, 0x21, 0xe4, 0xfb, 0x4c, 0x1c, 0x24, 0x55, 0xf4, 0x0e, 0x0b, 0x79, 0x55, 0x9d,
	0x09, 0xe2, 0xbd, 0x14, 0x86, 0x10, 0xe1, 0x29, 0x42, 0xf8, 0x47, 0x02, 0xe8, 0x12, 0x4b, 0x45,
	0x87, 0x41, 0x35, 0xe6, 0x1c, 0x86, 0xb3, 0xb0, 0x6c, 0x1e, 0x59, 0x9a, 0x6d, 0x86, 0xe7, 0xa0,
	0xa4, 0x2e, 0x99, 0x47, 0xd6, 0x03, 0x93, 0xc8, 0xb7, 0x60, 0xcb, 0x43, 0x43, 0x3c, 0x42, 0xa6,
	0x16, 0x3b, 0x2d, 0x61, 0x6c, 0xa7, 0xb9, 0x6e, 0x3f, 0x7a, 0x24, 0x6a, 0x00, 0xe2, 0x04, 0x84,
	0x35, 0xaf, 0xa8, 0x11, 0x89, 0xfc, 0x08, 0x36, 0xa9, 0x3d, 0x44, 0xd8, 0xa7, 0xda, 0x74, 0xd0,
	0x60, 0x41, 0x96, 0xdb, 0xdb, 0xcd, 0x70, 0x12, 0x69, 0x4e, 0x27, 0x91, 0xe6, 0x1e, 0x07, 0x74,
	0x56, 0x5e, 0xfd, 0x79, 0x71, 0xe1, 0x97, 0xbf, 0x2e, 0x4a, 0xea, 0x06, 0xdf, 0x3c, 0x55, 0x25,
	0xaa, 0xba, 0x05, 0xf2, 0x2c, 0x6e, 0x91, 0x8e, 0x9f, 0x25, 0xf8, 0x20, 0x92, 0x29, 0xae, 0xb6,
	0x1d, 0xeb, 0xc4, 0x85, 0x4d, 0x2b, 0x60, 0xf1, 0x04, 0x05, 0x2c, 0xe5, 0x16, 0xf0, 0x22, 0x5c,
	0x48, 0xa5, 0x25, 0x88, 0x7f, 0x57, 0x60, 0x2f, 0xf4, 0xf4, 0xb0, 0xb3, 0xb6, 0x9f, 0x53, 0xcd,
	0xab, 0xb0, 0x4e, 0xb0, 0xef, 0xf5, 0xd0, 0xb1, 0xbb, 0xb0, 0x12, 0x4a, 0xa7, 0x97, 0xe1, 0x25,
	0x58, 0x33, 0x11, 0x99, 0x5d, 0x98, 0x45, 0x06, 0x2a, 0x07, 0xb2, 0x29, 0xe4, 0x0e, 0x80, 0x1e,
	0xf4, 0x26, 0x6b, 0x60, 0x16, 0xc9, 0x9c, 0xfe, 0x5d, 0xd5, 0xa7, 0x9f, 0x6c, 0x48, 0x21, 0x06,
	0x25, 0x62, 0xc0, 0x0a, 0x16, 0xff, 0xb9, 0x57, 0xc3, 0x99, 0x22, 0x96, 0x05, 0x91, 0xa2, 0xe7,
	0xb0, 0x21, 0x5e, 0xd7, 0x7d, 0x36, 0x9a, 0xce, 0x49, 0xd0, 0x6d, 0x58, 0x0a, 0x47, 0x58, 0x96,
	0x98, 0x72, 0xbb, 0x9a, 0x0c, 0x29, 0xb4, 0xd3, 0x29, 0x05, 0xe7, 0x4e, 0xe5, 0xe8, 0x04, 0xa9,
	0x6d, 0x38, 0x7b, 0xcc, 0xf1, 0x94, 0x53, 0xfb, 0xc5, 0x1a, 0x14, 0xbb, 0xc4, 0x92, 0x5f, 0x48,
	0x50, 0xcd, 0x1c, 0x7c, 0x6f, 0x26, 0xfd, 0xe6, 0x0c, 0x9c, 0xca, 0xc7, 0xef, 0x05, 0x9f, 0x52,
	0x91, 0xbf, 0x95, 0x60, 0x3b, 0x7b, 0x38, 0x6d, 0xe6, 0x18, 0x4d, 0xc1, 0x2b, 0xb7, 0xdf, 0x0f,
	0x2f, 0x58, 0x68, 0x50, 0x89, 0x4f, 0x99, 0x8d, 0x1c, 0x43, 0x1c, 0xa3, 0xdc, 0x98, 0x8f, 0x11,
	0x0e, 0xbe, 0x97, 0xe0, 0x5c, 0xde, 0x5c, 0xf9, 0x61, 0xaa, 0xad, 0x9c, 0x1d, 0xca, 0x27, 0xef,
	0xbb, 0x23, 0x96, 0xf2, 0xec, 0xb1, 0xb2, 0x39, 0xdf, 0x6e, 0x14, 0x9f, 0x91, 0xf2, 0xb9, 0xd3,
	0xa4, 0x7c, 0x04, 0xa7, 0x92, 0xa3, 0xe4, 0x4e, 0xaa, 0xb1, 0x04, 0x4e, 0x69, 0x9e, 0x0c, 0x27,
	0x9c, 0xf5, 0x61, 0x33, 0x31, 0x42, 0x5e, 0xcd, 0x29, 0xdf, 0x0c, 0xa6, 0xdc, 0x3c, 0x11, 0x2c,
	0x1a, 0x56, 0x72, 0x38, 0x4c, 0x0f, 0x2b, 0x81, 0xcb, 0x08, 0x2b, 0x73, 0xae, 0x92, 0xbf, 0x84,
	0x72, 0x74, 0xa6, 0xaa, 0xa7, 0x6e, 0x8f, 0x20, 0x94, 0xdd, 0x79, 0x88, 0xa8, 0xe9, 0xe8, 0x80,
	0x51, 0xcf, 0x60, 0x26, 0x10, 0x19, 0xa6, 0x53, 0x1e, 0x7f, 0xb9, 0x0b, 0xcb, 0xe2, 0xe1, 0x4f,
	0xdd, 0xc4, 0xb5, 0xca, 0x95, 0x3c, 0xad, 0x30, 0xe7, 0x80, 0x9c, 0xf2, 0x70, 0x5e, 0xcb, 0xa5,
	0x33, 0x03, 0x2a, 0xad, 0x13, 0x02, 0xa3, 0x77, 0x45, 0xfc, 0xbd, 0x4b, 0xbf, 0x2b, 0x62, 0x98,
	0x8c, 0xbb, 0x22, 0xf5, 0xc5, 0x90, 0xbf, 0x86, 0xb5, 0xd8, 0x73, 0x71, 0x29, 0xa7, 0xc3, 0x42,
	0x88, 0x72, 0x7d, 0x2e, 0x64, 0x6a, 0x5d, 0x59, 0x7c, 0xf1, 0xee, 0xe5, 0x0d, 0xa9, 0xf3, 0xf9,
	0xab, 0x37, 0x35, 0xe9, 0xf5, 0x9b, 0x9a, 0xf4, 0xf7, 0x9b, 0x9a, 0xf4, 0xc3, 0xdb, 0xda, 0xc2,
	0xeb, 0xb7, 0xb5, 0x85, 0x3f, 0xde, 0xd6, 0x16, 0xbe, 0x6a, 0x5a, 0x36, 0xed, 0xfb, 0x46, 0xb3,
	0x87, 0x87, 0xad, 0xd0, 0xea, 0x40, 0x37, 0x08, 0xff, 0x6c, 0x8d, 0xa3, 0xff, 0xf2, 0x04, 0x93,
	0xb0, 0xb1, 0xc4, 0x06, 0xa2, 0x8f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x44, 0x72, 0x53, 0x31,
	0x06, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SubmitDepositTransaction(ctx context.Context, in *MsgSubmitDepositTransaction, opts ...grpc.CallOption) (*MsgSubmitDepositTransactionResponse, error)
	// SubmitWithdrawalTransaction submits the bitcoin withdrawal transaction to the bitway chain.
	SubmitWithdrawTransaction(ctx context.Context, in *MsgSubmitWithdrawTransaction, opts ...grpc.CallOption) (*MsgSubmitWithdrawTransactionResponse, error)
	// SubmitFeeRate submits the bitcoin network fee rate to the bitway chain.
	SubmitFeeRate(ctx context.Context, in *MsgSubmitFeeRate, opts ...grpc.CallOption) (*MsgSubmitFeeRateResponse, error)
	// UpdateTrustedNonBtcRelayers updates the trusted non-btc asset relayers.
	UpdateTrustedNonBtcRelayers(ctx context.Context, in *MsgUpdateTrustedNonBtcRelayers, opts ...grpc.CallOption) (*MsgUpdateTrustedNonBtcRelayersResponse, error)
	// UpdateTrustedFeeProviders updates the trusted fee providers.
	UpdateTrustedFeeProviders(ctx context.Context, in *MsgUpdateTrustedFeeProviders, opts ...grpc.CallOption) (*MsgUpdateTrustedFeeProvidersResponse, error)
	// WithdrawToBitcoin withdraws the asset to bitcoin.
	WithdrawToBitcoin(ctx context.Context, in *MsgWithdrawToBitcoin, opts ...grpc.CallOption) (*MsgWithdrawToBitcoinResponse, error)
	// SubmitSignatures submits the signatures of the signing request to the bitway chain.
	SubmitSignatures(ctx context.Context, in *MsgSubmitSignatures, opts ...grpc.CallOption) (*MsgSubmitSignaturesResponse, error)
	// ConsolidateVaults performs the utxo consolidation for the given vaults.
	ConsolidateVaults(ctx context.Context, in *MsgConsolidateVaults, opts ...grpc.CallOption) (*MsgConsolidateVaultsResponse, error)
	// InitiateDKG initiates the DKG request.
	InitiateDKG(ctx context.Context, in *MsgInitiateDKG, opts ...grpc.CallOption) (*MsgInitiateDKGResponse, error)
	// CompleteDKG completes the given DKG request.
	CompleteDKG(ctx context.Context, in *MsgCompleteDKG, opts ...grpc.CallOption) (*MsgCompleteDKGResponse, error)
	// Refresh refreshes key shares.
	Refresh(ctx context.Context, in *MsgRefresh, opts ...grpc.CallOption) (*MsgRefreshResponse, error)
	// CompleteRefreshing completes the given refreshing request by the participant.
	CompleteRefreshing(ctx context.Context, in *MsgCompleteRefreshing, opts ...grpc.CallOption) (*MsgCompleteRefreshingResponse, error)
	// TransferVault transfers the vault asset from the source version to the destination version.
	TransferVault(ctx context.Context, in *MsgTransferVault, opts ...grpc.CallOption) (*MsgTransferVaultResponse, error)
	// UpdateParams defines a governance operation for updating the x/btcbridge module
	// parameters. The authority defaults to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitDepositTransaction(ctx context.Context, in *MsgSubmitDepositTransaction, opts ...grpc.CallOption) (*MsgSubmitDepositTransactionResponse, error) {
	out := new(MsgSubmitDepositTransactionResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/SubmitDepositTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWithdrawTransaction(ctx context.Context, in *MsgSubmitWithdrawTransaction, opts ...grpc.CallOption) (*MsgSubmitWithdrawTransactionResponse, error) {
	out := new(MsgSubmitWithdrawTransactionResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/SubmitWithdrawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitFeeRate(ctx context.Context, in *MsgSubmitFeeRate, opts ...grpc.CallOption) (*MsgSubmitFeeRateResponse, error) {
	out := new(MsgSubmitFeeRateResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/SubmitFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTrustedNonBtcRelayers(ctx context.Context, in *MsgUpdateTrustedNonBtcRelayers, opts ...grpc.CallOption) (*MsgUpdateTrustedNonBtcRelayersResponse, error) {
	out := new(MsgUpdateTrustedNonBtcRelayersResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/UpdateTrustedNonBtcRelayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTrustedFeeProviders(ctx context.Context, in *MsgUpdateTrustedFeeProviders, opts ...grpc.CallOption) (*MsgUpdateTrustedFeeProvidersResponse, error) {
	out := new(MsgUpdateTrustedFeeProvidersResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/UpdateTrustedFeeProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawToBitcoin(ctx context.Context, in *MsgWithdrawToBitcoin, opts ...grpc.CallOption) (*MsgWithdrawToBitcoinResponse, error) {
	out := new(MsgWithdrawToBitcoinResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/WithdrawToBitcoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitSignatures(ctx context.Context, in *MsgSubmitSignatures, opts ...grpc.CallOption) (*MsgSubmitSignaturesResponse, error) {
	out := new(MsgSubmitSignaturesResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/SubmitSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConsolidateVaults(ctx context.Context, in *MsgConsolidateVaults, opts ...grpc.CallOption) (*MsgConsolidateVaultsResponse, error) {
	out := new(MsgConsolidateVaultsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/ConsolidateVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateDKG(ctx context.Context, in *MsgInitiateDKG, opts ...grpc.CallOption) (*MsgInitiateDKGResponse, error) {
	out := new(MsgInitiateDKGResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/InitiateDKG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteDKG(ctx context.Context, in *MsgCompleteDKG, opts ...grpc.CallOption) (*MsgCompleteDKGResponse, error) {
	out := new(MsgCompleteDKGResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/CompleteDKG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Refresh(ctx context.Context, in *MsgRefresh, opts ...grpc.CallOption) (*MsgRefreshResponse, error) {
	out := new(MsgRefreshResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteRefreshing(ctx context.Context, in *MsgCompleteRefreshing, opts ...grpc.CallOption) (*MsgCompleteRefreshingResponse, error) {
	out := new(MsgCompleteRefreshingResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/CompleteRefreshing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferVault(ctx context.Context, in *MsgTransferVault, opts ...grpc.CallOption) (*MsgTransferVaultResponse, error) {
	out := new(MsgTransferVaultResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/TransferVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/bitway.btcbridge.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SubmitDepositTransaction(context.Context, *MsgSubmitDepositTransaction) (*MsgSubmitDepositTransactionResponse, error)
	// SubmitWithdrawalTransaction submits the bitcoin withdrawal transaction to the bitway chain.
	SubmitWithdrawTransaction(context.Context, *MsgSubmitWithdrawTransaction) (*MsgSubmitWithdrawTransactionResponse, error)
	// SubmitFeeRate submits the bitcoin network fee rate to the bitway chain.
	SubmitFeeRate(context.Context, *MsgSubmitFeeRate) (*MsgSubmitFeeRateResponse, error)
	// UpdateTrustedNonBtcRelayers updates the trusted non-btc asset relayers.
	UpdateTrustedNonBtcRelayers(context.Context, *MsgUpdateTrustedNonBtcRelayers) (*MsgUpdateTrustedNonBtcRelayersResponse, error)
	// UpdateTrustedFeeProviders updates the trusted fee providers.
	UpdateTrustedFeeProviders(context.Context, *MsgUpdateTrustedFeeProviders) (*MsgUpdateTrustedFeeProvidersResponse, error)
	// WithdrawToBitcoin withdraws the asset to bitcoin.
	WithdrawToBitcoin(context.Context, *MsgWithdrawToBitcoin) (*MsgWithdrawToBitcoinResponse, error)
	// SubmitSignatures submits the signatures of the signing request to the bitway chain.
	SubmitSignatures(context.Context, *MsgSubmitSignatures) (*MsgSubmitSignaturesResponse, error)
	// ConsolidateVaults performs the utxo consolidation for the given vaults.
	ConsolidateVaults(context.Context, *MsgConsolidateVaults) (*MsgConsolidateVaultsResponse, error)
	// InitiateDKG initiates the DKG request.
	InitiateDKG(context.Context, *MsgInitiateDKG) (*MsgInitiateDKGResponse, error)
	// CompleteDKG completes the given DKG request.
	CompleteDKG(context.Context, *MsgCompleteDKG) (*MsgCompleteDKGResponse, error)
	// Refresh refreshes key shares.
	Refresh(context.Context, *MsgRefresh) (*MsgRefreshResponse, error)
	// CompleteRefreshing completes the given refreshing request by the participant.
	CompleteRefreshing(context.Context, *MsgCompleteRefreshing) (*MsgCompleteRefreshingResponse, error)
	// TransferVault transfers the vault asset from the source version to the destination version.
	TransferVault(context.Context, *MsgTransferVault) (*MsgTransferVaultResponse, error)
	// UpdateParams defines a governance operation for updating the x/btcbridge module
	// parameters. The authority defaults to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitDepositTransaction(ctx context.Context, req *MsgSubmitDepositTransaction) (*MsgSubmitDepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDepositTransaction not implemented")
}
func (*UnimplementedMsgServer) SubmitWithdrawTransaction(ctx context.Context, req *MsgSubmitWithdrawTransaction) (*MsgSubmitWithdrawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWithdrawTransaction not implemented")
}
func (*UnimplementedMsgServer) SubmitFeeRate(ctx context.Context, req *MsgSubmitFeeRate) (*MsgSubmitFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeeRate not implemented")
}
func (*UnimplementedMsgServer) UpdateTrustedNonBtcRelayers(ctx context.Context, req *MsgUpdateTrustedNonBtcRelayers) (*MsgUpdateTrustedNonBtcRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustedNonBtcRelayers not implemented")
}
func (*UnimplementedMsgServer) UpdateTrustedFeeProviders(ctx context.Context, req *MsgUpdateTrustedFeeProviders) (*MsgUpdateTrustedFeeProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustedFeeProviders not implemented")
}
func (*UnimplementedMsgServer) WithdrawToBitcoin(ctx context.Context, req *MsgWithdrawToBitcoin) (*MsgWithdrawToBitcoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawToBitcoin not implemented")
}
func (*UnimplementedMsgServer) SubmitSignatures(ctx context.Context, req *MsgSubmitSignatures) (*MsgSubmitSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignatures not implemented")
}
func (*UnimplementedMsgServer) ConsolidateVaults(ctx context.Context, req *MsgConsolidateVaults) (*MsgConsolidateVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsolidateVaults not implemented")
}
func (*UnimplementedMsgServer) InitiateDKG(ctx context.Context, req *MsgInitiateDKG) (*MsgInitiateDKGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateDKG not implemented")
}
func (*UnimplementedMsgServer) CompleteDKG(ctx context.Context, req *MsgCompleteDKG) (*MsgCompleteDKGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteDKG not implemented")
}
func (*UnimplementedMsgServer) Refresh(ctx context.Context, req *MsgRefresh) (*MsgRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedMsgServer) CompleteRefreshing(ctx context.Context, req *MsgCompleteRefreshing) (*MsgCompleteRefreshingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRefreshing not implemented")
}
func (*UnimplementedMsgServer) TransferVault(ctx context.Context, req *MsgTransferVault) (*MsgTransferVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferVault not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitDepositTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitDepositTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitDepositTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/SubmitDepositTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitDepositTransaction(ctx, req.(*MsgSubmitDepositTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWithdrawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWithdrawTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWithdrawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/SubmitWithdrawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWithdrawTransaction(ctx, req.(*MsgSubmitWithdrawTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitFeeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/SubmitFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitFeeRate(ctx, req.(*MsgSubmitFeeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTrustedNonBtcRelayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTrustedNonBtcRelayers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTrustedNonBtcRelayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/UpdateTrustedNonBtcRelayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTrustedNonBtcRelayers(ctx, req.(*MsgUpdateTrustedNonBtcRelayers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTrustedFeeProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTrustedFeeProviders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTrustedFeeProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/UpdateTrustedFeeProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTrustedFeeProviders(ctx, req.(*MsgUpdateTrustedFeeProviders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawToBitcoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawToBitcoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawToBitcoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/WithdrawToBitcoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawToBitcoin(ctx, req.(*MsgWithdrawToBitcoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/SubmitSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitSignatures(ctx, req.(*MsgSubmitSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConsolidateVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConsolidateVaults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConsolidateVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/ConsolidateVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConsolidateVaults(ctx, req.(*MsgConsolidateVaults))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateDKG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/InitiateDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateDKG(ctx, req.(*MsgInitiateDKG))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteDKG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/CompleteDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteDKG(ctx, req.(*MsgCompleteDKG))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefresh)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Refresh(ctx, req.(*MsgRefresh))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteRefreshing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteRefreshing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteRefreshing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/CompleteRefreshing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteRefreshing(ctx, req.(*MsgCompleteRefreshing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferVault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/TransferVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferVault(ctx, req.(*MsgTransferVault))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.btcbridge.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.btcbridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitDepositTransaction",
			Handler:    _Msg_SubmitDepositTransaction_Handler,
		},
		{
			MethodName: "SubmitWithdrawTransaction",
			Handler:    _Msg_SubmitWithdrawTransaction_Handler,
		},
		{
			MethodName: "SubmitFeeRate",
			Handler:    _Msg_SubmitFeeRate_Handler,
		},
		{
			MethodName: "UpdateTrustedNonBtcRelayers",
			Handler:    _Msg_UpdateTrustedNonBtcRelayers_Handler,
		},
		{
			MethodName: "UpdateTrustedFeeProviders",
			Handler:    _Msg_UpdateTrustedFeeProviders_Handler,
		},
		{
			MethodName: "WithdrawToBitcoin",
			Handler:    _Msg_WithdrawToBitcoin_Handler,
		},
		{
			MethodName: "SubmitSignatures",
			Handler:    _Msg_SubmitSignatures_Handler,
		},
		{
			MethodName: "ConsolidateVaults",
			Handler:    _Msg_ConsolidateVaults_Handler,
		},
		{
			MethodName: "InitiateDKG",
			Handler:    _Msg_InitiateDKG_Handler,
		},
		{
			MethodName: "CompleteDKG",
			Handler:    _Msg_CompleteDKG_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Msg_Refresh_Handler,
		},
		{
			MethodName: "CompleteRefreshing",
			Handler:    _Msg_CompleteRefreshing_Handler,
		},
		{
			MethodName: "TransferVault",
			Handler:    _Msg_TransferVault_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/btcbridge/tx.proto",
}

func (m *MsgSubmitDepositTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDepositTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDepositTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevTxBytes) > 0 {
		i -= len(m.PrevTxBytes)
		copy(dAtA[i:], m.PrevTxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrevTxBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitDepositTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDepositTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDepositTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWithdrawTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWithdrawTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFeeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFeeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFeeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFeeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFeeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFeeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrustedNonBtcRelayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrustedNonBtcRelayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrustedNonBtcRelayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for iNdEx := len(m.Relayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relayers[iNdEx])
			copy(dAtA[i:], m.Relayers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Relayers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrustedNonBtcRelayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrustedNonBtcRelayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrustedNonBtcRelayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrustedFeeProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrustedFeeProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrustedFeeProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeProviders) > 0 {
		for iNdEx := len(m.FeeProviders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeeProviders[iNdEx])
			copy(dAtA[i:], m.FeeProviders[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.FeeProviders[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrustedFeeProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrustedFeeProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrustedFeeProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawToBitcoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawToBitcoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawToBitcoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawToBitcoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawToBitcoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawToBitcoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConsolidateVaults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConsolidateVaults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConsolidateVaults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunesConsolidations) > 0 {
		for iNdEx := len(m.RunesConsolidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RunesConsolidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BtcConsolidation != nil {
		{
			size, err := m.BtcConsolidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VaultVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConsolidateVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConsolidateVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConsolidateVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitiateDKG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateDKG) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateDKG) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetUtxoNum != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TargetUtxoNum))
		i--
		dAtA[i] = 0x30
	}
	if m.EnableTransfer {
		i--
		if m.EnableTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VaultTypes) > 0 {
		dAtA3 := make([]byte, len(m.VaultTypes)*10)
		var j2 int
		for _, num := range m.VaultTypes {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.Threshold != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateDKGResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateDKGResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateDKGResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteDKG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteDKG) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteDKG) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vaults[iNdEx])
			copy(dAtA[i:], m.Vaults[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Vaults[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteDKGResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteDKGResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteDKGResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TimeoutDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTx(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	if len(m.Thresholds) > 0 {
		dAtA6 := make([]byte, len(m.Thresholds)*10)
		var j5 int
		for _, num := range m.Thresholds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTx(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemovedParticipants) > 0 {
		for iNdEx := len(m.RemovedParticipants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemovedParticipants[iNdEx])
			copy(dAtA[i:], m.RemovedParticipants[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RemovedParticipants[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DkgIds) > 0 {
		dAtA8 := make([]byte, len(m.DkgIds)*10)
		var j7 int
		for _, num := range m.DkgIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTx(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefreshResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefreshResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefreshResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteRefreshing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteRefreshing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteRefreshing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteRefreshingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteRefreshingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteRefreshingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetUtxoNum != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TargetUtxoNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Psbts) > 0 {
		for iNdEx := len(m.Psbts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Psbts[iNdEx])
			copy(dAtA[i:], m.Psbts[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Psbts[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.AssetType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x20
	}
	if m.DestVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SourceVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitDepositTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrevTxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, s := range m.Proof {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitDepositTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitWithdrawTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, s := range m.Proof {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitWithdrawTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitFeeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeRate != 0 {
		n += 1 + sovTx(uint64(m.FeeRate))
	}
	return n
}

func (m *MsgSubmitFeeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTrustedNonBtcRelayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Relayers) > 0 {
		for _, s := range m.Relayers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateTrustedNonBtcRelayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTrustedFeeProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FeeProviders) > 0 {
		for _, s := range m.FeeProviders {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateTrustedFeeProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawToBitcoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawToBitcoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConsolidateVaults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovTx(uint64(m.VaultVersion))
	}
	if m.BtcConsolidation != nil {
		l = m.BtcConsolidation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RunesConsolidations) > 0 {
		for _, e := range m.RunesConsolidations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgConsolidateVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitiateDKG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovTx(uint64(m.Threshold))
	}
	if len(m.VaultTypes) > 0 {
		l = 0
		for _, e := range m.VaultTypes {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.EnableTransfer {
		n += 2
	}
	if m.TargetUtxoNum != 0 {
		n += 1 + sovTx(uint64(m.TargetUtxoNum))
	}
	return n
}

func (m *MsgInitiateDKGResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteDKG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if len(m.Vaults) > 0 {
		for _, s := range m.Vaults {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteDKGResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DkgIds) > 0 {
		l = 0
		for _, e := range m.DkgIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.RemovedParticipants) > 0 {
		for _, s := range m.RemovedParticipants {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Thresholds) > 0 {
		l = 0
		for _, e := range m.Thresholds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRefreshResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteRefreshing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteRefreshingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SourceVersion != 0 {
		n += 1 + sovTx(uint64(m.SourceVersion))
	}
	if m.DestVersion != 0 {
		n += 1 + sovTx(uint64(m.DestVersion))
	}
	if m.AssetType != 0 {
		n += 1 + sovTx(uint64(m.AssetType))
	}
	if len(m.Psbts) > 0 {
		for _, s := range m.Psbts {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TargetUtxoNum != 0 {
		n += 1 + sovTx(uint64(m.TargetUtxoNum))
	}
	return n
}

func (m *MsgTransferVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitDepositTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDepositTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDepositTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevTxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitDepositTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWithdrawTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWithdrawTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFeeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFeeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFeeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFeeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFeeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFeeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrustedNonBtcRelayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrustedNonBtcRelayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrustedNonBtcRelayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayers = append(m.Relayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrustedNonBtcRelayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrustedNonBtcRelayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrustedNonBtcRelayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrustedFeeProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrustedFeeProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrustedFeeProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeProviders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeProviders = append(m.FeeProviders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrustedFeeProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrustedFeeProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrustedFeeProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawToBitcoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawToBitcoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawToBitcoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawToBitcoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawToBitcoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawToBitcoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConsolidateVaults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConsolidateVaults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConsolidateVaults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcConsolidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcConsolidation == nil {
				m.BtcConsolidation = &BtcConsolidation{}
			}
			if err := m.BtcConsolidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunesConsolidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunesConsolidations = append(m.RunesConsolidations, &RunesConsolidation{})
			if err := m.RunesConsolidations[len(m.RunesConsolidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConsolidateVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConsolidateVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConsolidateVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateDKG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateDKG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateDKG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &DKGParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v AssetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultTypes = append(m.VaultTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.VaultTypes) == 0 {
					m.VaultTypes = make([]AssetType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AssetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AssetType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultTypes = append(m.VaultTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultTypes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTransfer = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUtxoNum", wireType)
			}
			m.TargetUtxoNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUtxoNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateDKGResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateDKGResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateDKGResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteDKG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteDKG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteDKG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteDKGResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteDKGResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteDKGResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DkgIds = append(m.DkgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DkgIds) == 0 {
					m.DkgIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DkgIds = append(m.DkgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DkgIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedParticipants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedParticipants = append(m.RemovedParticipants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Thresholds = append(m.Thresholds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Thresholds) == 0 {
					m.Thresholds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Thresholds = append(m.Thresholds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Thresholds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TimeoutDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefreshResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefreshResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefreshResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteRefreshing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteRefreshing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteRefreshing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteRefreshingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteRefreshingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteRefreshingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceVersion", wireType)
			}
			m.SourceVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestVersion", wireType)
			}
			m.DestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psbts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psbts = append(m.Psbts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUtxoNum", wireType)
			}
			m.TargetUtxoNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUtxoNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
