// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/liquidation/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryLiquidationRequest is request type for the Query/Liquidation RPC method.
type QueryLiquidationRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLiquidationRequest) Reset()         { *m = QueryLiquidationRequest{} }
func (m *QueryLiquidationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationRequest) ProtoMessage()    {}
func (*QueryLiquidationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{2}
}
func (m *QueryLiquidationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationRequest.Merge(m, src)
}
func (m *QueryLiquidationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationRequest proto.InternalMessageInfo

func (m *QueryLiquidationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryLiquidationResponse is response type for the Query/Liquidation RPC method.
type QueryLiquidationResponse struct {
	Liquidation *Liquidation `protobuf:"bytes,1,opt,name=liquidation,proto3" json:"liquidation,omitempty"`
}

func (m *QueryLiquidationResponse) Reset()         { *m = QueryLiquidationResponse{} }
func (m *QueryLiquidationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationResponse) ProtoMessage()    {}
func (*QueryLiquidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{3}
}
func (m *QueryLiquidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationResponse.Merge(m, src)
}
func (m *QueryLiquidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationResponse proto.InternalMessageInfo

func (m *QueryLiquidationResponse) GetLiquidation() *Liquidation {
	if m != nil {
		return m.Liquidation
	}
	return nil
}

// QueryLiquidationsRequest is request type for the Query/Liquidations RPC method.
type QueryLiquidationsRequest struct {
	Status     LiquidationStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=bitway.liquidation.LiquidationStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidationsRequest) Reset()         { *m = QueryLiquidationsRequest{} }
func (m *QueryLiquidationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationsRequest) ProtoMessage()    {}
func (*QueryLiquidationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{4}
}
func (m *QueryLiquidationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationsRequest.Merge(m, src)
}
func (m *QueryLiquidationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationsRequest proto.InternalMessageInfo

func (m *QueryLiquidationsRequest) GetStatus() LiquidationStatus {
	if m != nil {
		return m.Status
	}
	return LiquidationStatus_LIQUIDATION_STATUS_UNSPECIFIED
}

func (m *QueryLiquidationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLiquidationsResponse is response type for the Query/Liquidations RPC method.
type QueryLiquidationsResponse struct {
	Liquidations []*Liquidation      `protobuf:"bytes,1,rep,name=liquidations,proto3" json:"liquidations,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidationsResponse) Reset()         { *m = QueryLiquidationsResponse{} }
func (m *QueryLiquidationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationsResponse) ProtoMessage()    {}
func (*QueryLiquidationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{5}
}
func (m *QueryLiquidationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationsResponse.Merge(m, src)
}
func (m *QueryLiquidationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationsResponse proto.InternalMessageInfo

func (m *QueryLiquidationsResponse) GetLiquidations() []*Liquidation {
	if m != nil {
		return m.Liquidations
	}
	return nil
}

func (m *QueryLiquidationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLiquidationRecordRequest is request type for the Query/LiquidationRecord RPC method.
type QueryLiquidationRecordRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLiquidationRecordRequest) Reset()         { *m = QueryLiquidationRecordRequest{} }
func (m *QueryLiquidationRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationRecordRequest) ProtoMessage()    {}
func (*QueryLiquidationRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{6}
}
func (m *QueryLiquidationRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationRecordRequest.Merge(m, src)
}
func (m *QueryLiquidationRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationRecordRequest proto.InternalMessageInfo

func (m *QueryLiquidationRecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryLiquidationRecordResponse is response type for the Query/LiquidationRecord RPC method.
type QueryLiquidationRecordResponse struct {
	LiquidationRecord *LiquidationRecord `protobuf:"bytes,1,opt,name=liquidation_record,json=liquidationRecord,proto3" json:"liquidation_record,omitempty"`
}

func (m *QueryLiquidationRecordResponse) Reset()         { *m = QueryLiquidationRecordResponse{} }
func (m *QueryLiquidationRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationRecordResponse) ProtoMessage()    {}
func (*QueryLiquidationRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{7}
}
func (m *QueryLiquidationRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationRecordResponse.Merge(m, src)
}
func (m *QueryLiquidationRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationRecordResponse proto.InternalMessageInfo

func (m *QueryLiquidationRecordResponse) GetLiquidationRecord() *LiquidationRecord {
	if m != nil {
		return m.LiquidationRecord
	}
	return nil
}

// QueryLiquidationRecordsRequest is request type for the Query/LiquidationRecords RPC method.
type QueryLiquidationRecordsRequest struct {
	LiquidationId uint64             `protobuf:"varint,1,opt,name=liquidation_id,json=liquidationId,proto3" json:"liquidation_id,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidationRecordsRequest) Reset()         { *m = QueryLiquidationRecordsRequest{} }
func (m *QueryLiquidationRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationRecordsRequest) ProtoMessage()    {}
func (*QueryLiquidationRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{8}
}
func (m *QueryLiquidationRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationRecordsRequest.Merge(m, src)
}
func (m *QueryLiquidationRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationRecordsRequest proto.InternalMessageInfo

func (m *QueryLiquidationRecordsRequest) GetLiquidationId() uint64 {
	if m != nil {
		return m.LiquidationId
	}
	return 0
}

func (m *QueryLiquidationRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLiquidationRecordsResponse is response type for the Query/LiquidationRecords RPC method.
type QueryLiquidationRecordsResponse struct {
	LiquidationRecords []*LiquidationRecord `protobuf:"bytes,1,rep,name=liquidation_records,json=liquidationRecords,proto3" json:"liquidation_records,omitempty"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidationRecordsResponse) Reset()         { *m = QueryLiquidationRecordsResponse{} }
func (m *QueryLiquidationRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationRecordsResponse) ProtoMessage()    {}
func (*QueryLiquidationRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2920d6540ef79a22, []int{9}
}
func (m *QueryLiquidationRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationRecordsResponse.Merge(m, src)
}
func (m *QueryLiquidationRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationRecordsResponse proto.InternalMessageInfo

func (m *QueryLiquidationRecordsResponse) GetLiquidationRecords() []*LiquidationRecord {
	if m != nil {
		return m.LiquidationRecords
	}
	return nil
}

func (m *QueryLiquidationRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bitway.liquidation.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitway.liquidation.QueryParamsResponse")
	proto.RegisterType((*QueryLiquidationRequest)(nil), "bitway.liquidation.QueryLiquidationRequest")
	proto.RegisterType((*QueryLiquidationResponse)(nil), "bitway.liquidation.QueryLiquidationResponse")
	proto.RegisterType((*QueryLiquidationsRequest)(nil), "bitway.liquidation.QueryLiquidationsRequest")
	proto.RegisterType((*QueryLiquidationsResponse)(nil), "bitway.liquidation.QueryLiquidationsResponse")
	proto.RegisterType((*QueryLiquidationRecordRequest)(nil), "bitway.liquidation.QueryLiquidationRecordRequest")
	proto.RegisterType((*QueryLiquidationRecordResponse)(nil), "bitway.liquidation.QueryLiquidationRecordResponse")
	proto.RegisterType((*QueryLiquidationRecordsRequest)(nil), "bitway.liquidation.QueryLiquidationRecordsRequest")
	proto.RegisterType((*QueryLiquidationRecordsResponse)(nil), "bitway.liquidation.QueryLiquidationRecordsResponse")
}

func init() { proto.RegisterFile("bitway/liquidation/query.proto", fileDescriptor_2920d6540ef79a22) }

var fileDescriptor_2920d6540ef79a22 = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xb3, 0x79, 0xfa, 0xe4, 0x30, 0x2d, 0x95, 0x3a, 0xad, 0x44, 0x31, 0xad, 0x53, 0x19,
	0xfa, 0xc2, 0x4b, 0xbd, 0x34, 0xbd, 0x70, 0xe1, 0x40, 0x91, 0x40, 0x20, 0x24, 0x4a, 0x40, 0x1c,
	0x90, 0x10, 0x5a, 0xd7, 0x96, 0xb1, 0x94, 0x64, 0x9d, 0xd8, 0x29, 0x44, 0xa8, 0x17, 0xc4, 0x1d,
	0x24, 0x84, 0x38, 0x83, 0xb8, 0xf0, 0x35, 0x38, 0xf5, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x12, 0x3e,
	0x08, 0xca, 0xee, 0x26, 0xdd, 0x60, 0xbb, 0x71, 0xa4, 0xde, 0xac, 0xdd, 0xff, 0xcc, 0xfc, 0x66,
	0xfe, 0xbb, 0x6b, 0x30, 0x9d, 0x20, 0x7e, 0xc9, 0x3a, 0xb4, 0x16, 0x34, 0xdb, 0x81, 0xcb, 0xe2,
	0x80, 0x37, 0x68, 0xb3, 0xed, 0xb5, 0x3a, 0x76, 0xd8, 0xe2, 0x31, 0x47, 0x94, 0xfb, 0xb6, 0xb6,
	0x6f, 0x2c, 0xf8, 0xdc, 0xe7, 0x62, 0x9b, 0xf6, 0xbf, 0xa4, 0xd2, 0x58, 0xf2, 0x39, 0xf7, 0x6b,
	0x1e, 0x65, 0x61, 0x40, 0x59, 0xa3, 0xc1, 0x63, 0x21, 0x8e, 0xd4, 0xee, 0xe5, 0x3d, 0x1e, 0xd5,
	0x79, 0x44, 0x1d, 0x16, 0x79, 0xb2, 0x00, 0xdd, 0xdf, 0x72, 0xbc, 0x98, 0x6d, 0xd1, 0x90, 0xf9,
	0x41, 0x43, 0x88, 0x95, 0xf6, 0x62, 0x0a, 0x93, 0xf6, 0xad, 0x54, 0xe5, 0x14, 0x55, 0xc8, 0x5a,
	0xac, 0xae, 0x4a, 0x5a, 0x0b, 0x80, 0x0f, 0xfb, 0x85, 0x76, 0xc5, 0x62, 0xd5, 0x6b, 0xb6, 0xbd,
	0x28, 0xb6, 0x1e, 0xc0, 0xfc, 0xc8, 0x6a, 0x14, 0xf2, 0x46, 0xe4, 0xe1, 0x75, 0x28, 0xc9, 0xe0,
	0x45, 0xb2, 0x42, 0x36, 0xa6, 0x2b, 0x86, 0x9d, 0x6c, 0xdc, 0x96, 0x31, 0x3b, 0x53, 0x87, 0xbf,
	0xca, 0x85, 0xaa, 0xd2, 0x5b, 0x97, 0xe0, 0xac, 0x48, 0x78, 0xff, 0x58, 0xa8, 0x6a, 0xe1, 0x2c,
	0x14, 0x03, 0x57, 0x24, 0x9c, 0xaa, 0x16, 0x03, 0xd7, 0x7a, 0x06, 0x8b, 0x49, 0xa9, 0x02, 0xb8,
	0x09, 0xd3, 0x5a, 0x29, 0x45, 0x51, 0x4e, 0xa3, 0xd0, 0xa3, 0xf5, 0x18, 0xeb, 0x33, 0x49, 0xe6,
	0x1f, 0xf4, 0x8d, 0x37, 0xa0, 0x14, 0xc5, 0x2c, 0x6e, 0xcb, 0x06, 0x67, 0x2b, 0xab, 0x63, 0x52,
	0x3f, 0x12, 0xe2, 0xaa, 0x0a, 0xc2, 0xdb, 0x00, 0xc7, 0x3e, 0x2d, 0x16, 0x05, 0xdd, 0x9a, 0x2d,
	0x4d, 0xb5, 0xfb, 0xa6, 0xda, 0xf2, 0xd4, 0x28, 0x53, 0xed, 0x5d, 0xe6, 0x7b, 0xaa, 0x74, 0x55,
	0x8b, 0xb4, 0xbe, 0x11, 0x38, 0x97, 0xc2, 0xa8, 0x86, 0x70, 0x0b, 0x66, 0x34, 0x9c, 0x3e, 0xea,
	0x7f, 0x79, 0xa6, 0x30, 0x12, 0x84, 0x77, 0x52, 0x50, 0xd7, 0xc7, 0xa2, 0x4a, 0x82, 0x11, 0x56,
	0x0a, 0xcb, 0x49, 0xbb, 0xf6, 0x78, 0xcb, 0xcd, 0xf2, 0x77, 0x1f, 0xcc, 0xac, 0x00, 0xd5, 0xe0,
	0x63, 0x40, 0x8d, 0xf5, 0x79, 0x4b, 0xec, 0x2a, 0xb3, 0xc7, 0x39, 0xa2, 0x52, 0xcd, 0xd5, 0xfe,
	0x5d, 0xb2, 0xde, 0x91, 0xac, 0xc2, 0x43, 0xfb, 0x57, 0x61, 0x56, 0x2f, 0x3c, 0xc4, 0x3e, 0xa3,
	0xad, 0xde, 0x75, 0x4f, 0xcd, 0xe6, 0xef, 0x04, 0xca, 0x99, 0x44, 0x6a, 0x16, 0x4f, 0x60, 0x3e,
	0x39, 0x8b, 0x81, 0xe7, 0x39, 0x87, 0x81, 0x89, 0x61, 0x9c, 0x9e, 0xff, 0x95, 0xb7, 0x25, 0xf8,
	0x5f, 0x34, 0x81, 0x07, 0x50, 0x92, 0x77, 0x1f, 0xd7, 0xd2, 0xb8, 0x92, 0xcf, 0x8c, 0xb1, 0x3e,
	0x56, 0x27, 0x0b, 0x5a, 0xd6, 0x9b, 0x1f, 0x7f, 0x3e, 0x14, 0x97, 0xd0, 0xa0, 0x99, 0xef, 0x19,
	0x7e, 0x22, 0x30, 0xad, 0xf5, 0x8e, 0x57, 0x32, 0x93, 0x27, 0x1f, 0x21, 0xe3, 0x6a, 0x3e, 0xb1,
	0xc2, 0xd9, 0x14, 0x38, 0xeb, 0xb8, 0x4a, 0x4f, 0x7e, 0x84, 0x23, 0xfa, 0x3a, 0x70, 0x0f, 0xf0,
	0x23, 0x81, 0x19, 0xfd, 0x26, 0x63, 0xae, 0x6a, 0xc3, 0x29, 0x6d, 0xe6, 0x54, 0x2b, 0xb8, 0x0d,
	0x01, 0x67, 0xe1, 0xca, 0x38, 0x38, 0xfc, 0x4a, 0x60, 0x2e, 0x71, 0x5a, 0x70, 0x2b, 0xdf, 0x28,
	0xb4, 0x2b, 0x6e, 0x54, 0x26, 0x09, 0xc9, 0x83, 0xa9, 0x8e, 0xb9, 0x1c, 0xdf, 0x17, 0x02, 0x98,
	0xbc, 0x21, 0x38, 0x41, 0xd1, 0xe1, 0x28, 0xb7, 0x27, 0x8a, 0x51, 0xa4, 0x17, 0x04, 0xe9, 0x32,
	0x9e, 0x3f, 0x81, 0x74, 0xe7, 0xde, 0x61, 0xd7, 0x24, 0x47, 0x5d, 0x93, 0xfc, 0xee, 0x9a, 0xe4,
	0x7d, 0xcf, 0x2c, 0x1c, 0xf5, 0xcc, 0xc2, 0xcf, 0x9e, 0x59, 0x78, 0x7a, 0xcd, 0x0f, 0xe2, 0x17,
	0x6d, 0xc7, 0xde, 0xe3, 0x75, 0x95, 0xa0, 0xc6, 0x9c, 0x68, 0x90, 0xeb, 0xd5, 0x48, 0xb6, 0xb8,
	0x13, 0x7a, 0x91, 0x53, 0x12, 0xbf, 0xe6, 0xed, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x1d,
	0x75, 0x4a, 0x77, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Liquidation queries the specified liquidation by id.
	Liquidation(ctx context.Context, in *QueryLiquidationRequest, opts ...grpc.CallOption) (*QueryLiquidationResponse, error)
	// Liquidations queries the liquidations by the given status.
	Liquidations(ctx context.Context, in *QueryLiquidationsRequest, opts ...grpc.CallOption) (*QueryLiquidationsResponse, error)
	// LiquidationRecord queries the specified liquidation record.
	LiquidationRecord(ctx context.Context, in *QueryLiquidationRecordRequest, opts ...grpc.CallOption) (*QueryLiquidationRecordResponse, error)
	// LiquidationRecords queries the liquidation records of the given liquidation.
	LiquidationRecords(ctx context.Context, in *QueryLiquidationRecordsRequest, opts ...grpc.CallOption) (*QueryLiquidationRecordsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitway.liquidation.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Liquidation(ctx context.Context, in *QueryLiquidationRequest, opts ...grpc.CallOption) (*QueryLiquidationResponse, error) {
	out := new(QueryLiquidationResponse)
	err := c.cc.Invoke(ctx, "/bitway.liquidation.Query/Liquidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Liquidations(ctx context.Context, in *QueryLiquidationsRequest, opts ...grpc.CallOption) (*QueryLiquidationsResponse, error) {
	out := new(QueryLiquidationsResponse)
	err := c.cc.Invoke(ctx, "/bitway.liquidation.Query/Liquidations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationRecord(ctx context.Context, in *QueryLiquidationRecordRequest, opts ...grpc.CallOption) (*QueryLiquidationRecordResponse, error) {
	out := new(QueryLiquidationRecordResponse)
	err := c.cc.Invoke(ctx, "/bitway.liquidation.Query/LiquidationRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationRecords(ctx context.Context, in *QueryLiquidationRecordsRequest, opts ...grpc.CallOption) (*QueryLiquidationRecordsResponse, error) {
	out := new(QueryLiquidationRecordsResponse)
	err := c.cc.Invoke(ctx, "/bitway.liquidation.Query/LiquidationRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Liquidation queries the specified liquidation by id.
	Liquidation(context.Context, *QueryLiquidationRequest) (*QueryLiquidationResponse, error)
	// Liquidations queries the liquidations by the given status.
	Liquidations(context.Context, *QueryLiquidationsRequest) (*QueryLiquidationsResponse, error)
	// LiquidationRecord queries the specified liquidation record.
	LiquidationRecord(context.Context, *QueryLiquidationRecordRequest) (*QueryLiquidationRecordResponse, error)
	// LiquidationRecords queries the liquidation records of the given liquidation.
	LiquidationRecords(context.Context, *QueryLiquidationRecordsRequest) (*QueryLiquidationRecordsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Liquidation(ctx context.Context, req *QueryLiquidationRequest) (*QueryLiquidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquidation not implemented")
}
func (*UnimplementedQueryServer) Liquidations(ctx context.Context, req *QueryLiquidationsRequest) (*QueryLiquidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquidations not implemented")
}
func (*UnimplementedQueryServer) LiquidationRecord(ctx context.Context, req *QueryLiquidationRecordRequest) (*QueryLiquidationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationRecord not implemented")
}
func (*UnimplementedQueryServer) LiquidationRecords(ctx context.Context, req *QueryLiquidationRecordsRequest) (*QueryLiquidationRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationRecords not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.liquidation.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Liquidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Liquidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.liquidation.Query/Liquidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Liquidation(ctx, req.(*QueryLiquidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Liquidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Liquidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.liquidation.Query/Liquidations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Liquidations(ctx, req.(*QueryLiquidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.liquidation.Query/LiquidationRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationRecord(ctx, req.(*QueryLiquidationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.liquidation.Query/LiquidationRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationRecords(ctx, req.(*QueryLiquidationRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.liquidation.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Liquidation",
			Handler:    _Query_Liquidation_Handler,
		},
		{
			MethodName: "Liquidations",
			Handler:    _Query_Liquidations_Handler,
		},
		{
			MethodName: "LiquidationRecord",
			Handler:    _Query_LiquidationRecord_Handler,
		},
		{
			MethodName: "LiquidationRecords",
			Handler:    _Query_LiquidationRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/liquidation/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liquidation != nil {
		{
			size, err := m.Liquidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Liquidations) > 0 {
		for iNdEx := len(m.Liquidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidationRecord != nil {
		{
			size, err := m.LiquidationRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LiquidationId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LiquidationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidationRecords) > 0 {
		for iNdEx := len(m.LiquidationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLiquidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liquidation != nil {
		l = m.Liquidation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Liquidations) > 0 {
		for _, e := range m.Liquidations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLiquidationRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidationRecord != nil {
		l = m.LiquidationRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidationId != 0 {
		n += 1 + sovQuery(uint64(m.LiquidationId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidationRecords) > 0 {
		for _, e := range m.LiquidationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liquidation == nil {
				m.Liquidation = &Liquidation{}
			}
			if err := m.Liquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LiquidationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidations = append(m.Liquidations, &Liquidation{})
			if err := m.Liquidations[len(m.Liquidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidationRecord == nil {
				m.LiquidationRecord = &LiquidationRecord{}
			}
			if err := m.LiquidationRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationId", wireType)
			}
			m.LiquidationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationRecords = append(m.LiquidationRecords, &LiquidationRecord{})
			if err := m.LiquidationRecords[len(m.LiquidationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
