// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/liquidation/liquidation.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidationStatus int32

const (
	LiquidationStatus_LIQUIDATION_STATUS_UNSPECIFIED LiquidationStatus = 0
	LiquidationStatus_LIQUIDATION_STATUS_LIQUIDATING LiquidationStatus = 1
	LiquidationStatus_LIQUIDATION_STATUS_LIQUIDATED  LiquidationStatus = 2
	LiquidationStatus_LIQUIDATION_STATUS_SETTLING    LiquidationStatus = 3
	LiquidationStatus_LIQUIDATION_STATUS_SETTLED     LiquidationStatus = 4
)

var LiquidationStatus_name = map[int32]string{
	0: "LIQUIDATION_STATUS_UNSPECIFIED",
	1: "LIQUIDATION_STATUS_LIQUIDATING",
	2: "LIQUIDATION_STATUS_LIQUIDATED",
	3: "LIQUIDATION_STATUS_SETTLING",
	4: "LIQUIDATION_STATUS_SETTLED",
}

var LiquidationStatus_value = map[string]int32{
	"LIQUIDATION_STATUS_UNSPECIFIED": 0,
	"LIQUIDATION_STATUS_LIQUIDATING": 1,
	"LIQUIDATION_STATUS_LIQUIDATED":  2,
	"LIQUIDATION_STATUS_SETTLING":    3,
	"LIQUIDATION_STATUS_SETTLED":     4,
}

func (x LiquidationStatus) String() string {
	return proto.EnumName(LiquidationStatus_name, int32(x))
}

func (LiquidationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{0}
}

// Signing intent
type SigningIntent int32

const (
	SigningIntent_SIGNING_INTENT_DEFAULT SigningIntent = 0
)

var SigningIntent_name = map[int32]string{
	0: "SIGNING_INTENT_DEFAULT",
}

var SigningIntent_value = map[string]int32{
	"SIGNING_INTENT_DEFAULT": 0,
}

func (x SigningIntent) String() string {
	return proto.EnumName(SigningIntent_name, int32(x))
}

func (SigningIntent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{1}
}

type AssetMetadata struct {
	Denom            string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Symbol           string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals         int32  `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	PriceSymbol      string `protobuf:"bytes,4,opt,name=price_symbol,json=priceSymbol,proto3" json:"price_symbol,omitempty"`
	IsBasePriceAsset bool   `protobuf:"varint,5,opt,name=is_base_price_asset,json=isBasePriceAsset,proto3" json:"is_base_price_asset,omitempty"`
}

func (m *AssetMetadata) Reset()         { *m = AssetMetadata{} }
func (m *AssetMetadata) String() string { return proto.CompactTextString(m) }
func (*AssetMetadata) ProtoMessage()    {}
func (*AssetMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{0}
}
func (m *AssetMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMetadata.Merge(m, src)
}
func (m *AssetMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AssetMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMetadata proto.InternalMessageInfo

func (m *AssetMetadata) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetMetadata) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *AssetMetadata) GetDecimals() int32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *AssetMetadata) GetPriceSymbol() string {
	if m != nil {
		return m.PriceSymbol
	}
	return ""
}

func (m *AssetMetadata) GetIsBasePriceAsset() bool {
	if m != nil {
		return m.IsBasePriceAsset
	}
	return false
}

type LiquidationV1 struct {
	Id                               uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoanId                           string                      `protobuf:"bytes,2,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	Debtor                           string                      `protobuf:"bytes,3,opt,name=debtor,proto3" json:"debtor,omitempty"`
	DCM                              string                      `protobuf:"bytes,4,opt,name=dcm,proto3" json:"dcm,omitempty"`
	CollateralAmount                 types.Coin                  `protobuf:"bytes,5,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount"`
	ActualCollateralAmount           types.Coin                  `protobuf:"bytes,6,opt,name=actual_collateral_amount,json=actualCollateralAmount,proto3" json:"actual_collateral_amount"`
	DebtAmount                       types.Coin                  `protobuf:"bytes,7,opt,name=debt_amount,json=debtAmount,proto3" json:"debt_amount"`
	CollateralAsset                  AssetMetadata               `protobuf:"bytes,8,opt,name=collateral_asset,json=collateralAsset,proto3" json:"collateral_asset"`
	DebtAsset                        AssetMetadata               `protobuf:"bytes,9,opt,name=debt_asset,json=debtAsset,proto3" json:"debt_asset"`
	LiquidationPrice                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=liquidation_price,json=liquidationPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidation_price"`
	LiquidationTime                  time.Time                   `protobuf:"bytes,11,opt,name=liquidation_time,json=liquidationTime,proto3,stdtime" json:"liquidation_time"`
	LiquidatedCollateralAmount       types.Coin                  `protobuf:"bytes,12,opt,name=liquidated_collateral_amount,json=liquidatedCollateralAmount,proto3" json:"liquidated_collateral_amount"`
	LiquidatedDebtAmount             types.Coin                  `protobuf:"bytes,13,opt,name=liquidated_debt_amount,json=liquidatedDebtAmount,proto3" json:"liquidated_debt_amount"`
	LiquidationBonusAmount           types.Coin                  `protobuf:"bytes,14,opt,name=liquidation_bonus_amount,json=liquidationBonusAmount,proto3" json:"liquidation_bonus_amount"`
	ProtocolLiquidationFee           types.Coin                  `protobuf:"bytes,15,opt,name=protocol_liquidation_fee,json=protocolLiquidationFee,proto3" json:"protocol_liquidation_fee"`
	UnliquidatedCollateralAmount     types.Coin                  `protobuf:"bytes,16,opt,name=unliquidated_collateral_amount,json=unliquidatedCollateralAmount,proto3" json:"unliquidated_collateral_amount"`
	LiquidationCet                   string                      `protobuf:"bytes,17,opt,name=liquidation_cet,json=liquidationCet,proto3" json:"liquidation_cet,omitempty"`
	SettlementTx                     string                      `protobuf:"bytes,18,opt,name=settlement_tx,json=settlementTx,proto3" json:"settlement_tx,omitempty"`
	SettlementTxId                   string                      `protobuf:"bytes,19,opt,name=settlement_tx_id,json=settlementTxId,proto3" json:"settlement_tx_id,omitempty"`
	Status                           LiquidationStatus           `protobuf:"varint,20,opt,name=status,proto3,enum=bitway.liquidation.LiquidationStatus" json:"status,omitempty"`
	AccruedInterestDuringLiquidation types.Coin                  `protobuf:"bytes,21,opt,name=accrued_interest_during_liquidation,json=accruedInterestDuringLiquidation,proto3" json:"accrued_interest_during_liquidation"`
}

func (m *LiquidationV1) Reset()         { *m = LiquidationV1{} }
func (m *LiquidationV1) String() string { return proto.CompactTextString(m) }
func (*LiquidationV1) ProtoMessage()    {}
func (*LiquidationV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{1}
}
func (m *LiquidationV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationV1.Merge(m, src)
}
func (m *LiquidationV1) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationV1) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationV1.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationV1 proto.InternalMessageInfo

func (m *LiquidationV1) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LiquidationV1) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *LiquidationV1) GetDebtor() string {
	if m != nil {
		return m.Debtor
	}
	return ""
}

func (m *LiquidationV1) GetDCM() string {
	if m != nil {
		return m.DCM
	}
	return ""
}

func (m *LiquidationV1) GetCollateralAmount() types.Coin {
	if m != nil {
		return m.CollateralAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetActualCollateralAmount() types.Coin {
	if m != nil {
		return m.ActualCollateralAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetDebtAmount() types.Coin {
	if m != nil {
		return m.DebtAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetCollateralAsset() AssetMetadata {
	if m != nil {
		return m.CollateralAsset
	}
	return AssetMetadata{}
}

func (m *LiquidationV1) GetDebtAsset() AssetMetadata {
	if m != nil {
		return m.DebtAsset
	}
	return AssetMetadata{}
}

func (m *LiquidationV1) GetLiquidationTime() time.Time {
	if m != nil {
		return m.LiquidationTime
	}
	return time.Time{}
}

func (m *LiquidationV1) GetLiquidatedCollateralAmount() types.Coin {
	if m != nil {
		return m.LiquidatedCollateralAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetLiquidatedDebtAmount() types.Coin {
	if m != nil {
		return m.LiquidatedDebtAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetLiquidationBonusAmount() types.Coin {
	if m != nil {
		return m.LiquidationBonusAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetProtocolLiquidationFee() types.Coin {
	if m != nil {
		return m.ProtocolLiquidationFee
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetUnliquidatedCollateralAmount() types.Coin {
	if m != nil {
		return m.UnliquidatedCollateralAmount
	}
	return types.Coin{}
}

func (m *LiquidationV1) GetLiquidationCet() string {
	if m != nil {
		return m.LiquidationCet
	}
	return ""
}

func (m *LiquidationV1) GetSettlementTx() string {
	if m != nil {
		return m.SettlementTx
	}
	return ""
}

func (m *LiquidationV1) GetSettlementTxId() string {
	if m != nil {
		return m.SettlementTxId
	}
	return ""
}

func (m *LiquidationV1) GetStatus() LiquidationStatus {
	if m != nil {
		return m.Status
	}
	return LiquidationStatus_LIQUIDATION_STATUS_UNSPECIFIED
}

func (m *LiquidationV1) GetAccruedInterestDuringLiquidation() types.Coin {
	if m != nil {
		return m.AccruedInterestDuringLiquidation
	}
	return types.Coin{}
}

type Liquidation struct {
	Id                               uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoanId                           string                      `protobuf:"bytes,2,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	Debtor                           string                      `protobuf:"bytes,3,opt,name=debtor,proto3" json:"debtor,omitempty"`
	DCM                              string                      `protobuf:"bytes,4,opt,name=dcm,proto3" json:"dcm,omitempty"`
	CollateralAmount                 types.Coin                  `protobuf:"bytes,5,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount"`
	ActualCollateralAmount           types.Coin                  `protobuf:"bytes,6,opt,name=actual_collateral_amount,json=actualCollateralAmount,proto3" json:"actual_collateral_amount"`
	DebtAmount                       types.Coin                  `protobuf:"bytes,7,opt,name=debt_amount,json=debtAmount,proto3" json:"debt_amount"`
	CollateralAsset                  AssetMetadata               `protobuf:"bytes,8,opt,name=collateral_asset,json=collateralAsset,proto3" json:"collateral_asset"`
	DebtAsset                        AssetMetadata               `protobuf:"bytes,9,opt,name=debt_asset,json=debtAsset,proto3" json:"debt_asset"`
	LiquidationPrice                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=liquidation_price,json=liquidationPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidation_price"`
	LiquidationTime                  time.Time                   `protobuf:"bytes,11,opt,name=liquidation_time,json=liquidationTime,proto3,stdtime" json:"liquidation_time"`
	LiquidatedCollateralAmount       types.Coin                  `protobuf:"bytes,12,opt,name=liquidated_collateral_amount,json=liquidatedCollateralAmount,proto3" json:"liquidated_collateral_amount"`
	LiquidatedDebtAmount             types.Coin                  `protobuf:"bytes,13,opt,name=liquidated_debt_amount,json=liquidatedDebtAmount,proto3" json:"liquidated_debt_amount"`
	LiquidationBonusAmount           types.Coin                  `protobuf:"bytes,14,opt,name=liquidation_bonus_amount,json=liquidationBonusAmount,proto3" json:"liquidation_bonus_amount"`
	ProtocolLiquidationFee           types.Coin                  `protobuf:"bytes,15,opt,name=protocol_liquidation_fee,json=protocolLiquidationFee,proto3" json:"protocol_liquidation_fee"`
	UnliquidatedCollateralAmount     types.Coin                  `protobuf:"bytes,16,opt,name=unliquidated_collateral_amount,json=unliquidatedCollateralAmount,proto3" json:"unliquidated_collateral_amount"`
	AccruedInterestDuringLiquidation types.Coin                  `protobuf:"bytes,17,opt,name=accrued_interest_during_liquidation,json=accruedInterestDuringLiquidation,proto3" json:"accrued_interest_during_liquidation"`
	LiquidationCet                   string                      `protobuf:"bytes,18,opt,name=liquidation_cet,json=liquidationCet,proto3" json:"liquidation_cet,omitempty"`
	SettlementTx                     string                      `protobuf:"bytes,19,opt,name=settlement_tx,json=settlementTx,proto3" json:"settlement_tx,omitempty"`
	SettlementTxId                   string                      `protobuf:"bytes,20,opt,name=settlement_tx_id,json=settlementTxId,proto3" json:"settlement_tx_id,omitempty"`
	Status                           LiquidationStatus           `protobuf:"varint,21,opt,name=status,proto3,enum=bitway.liquidation.LiquidationStatus" json:"status,omitempty"`
}

func (m *Liquidation) Reset()         { *m = Liquidation{} }
func (m *Liquidation) String() string { return proto.CompactTextString(m) }
func (*Liquidation) ProtoMessage()    {}
func (*Liquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{2}
}
func (m *Liquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liquidation.Merge(m, src)
}
func (m *Liquidation) XXX_Size() int {
	return m.Size()
}
func (m *Liquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_Liquidation.DiscardUnknown(m)
}

var xxx_messageInfo_Liquidation proto.InternalMessageInfo

func (m *Liquidation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Liquidation) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *Liquidation) GetDebtor() string {
	if m != nil {
		return m.Debtor
	}
	return ""
}

func (m *Liquidation) GetDCM() string {
	if m != nil {
		return m.DCM
	}
	return ""
}

func (m *Liquidation) GetCollateralAmount() types.Coin {
	if m != nil {
		return m.CollateralAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetActualCollateralAmount() types.Coin {
	if m != nil {
		return m.ActualCollateralAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetDebtAmount() types.Coin {
	if m != nil {
		return m.DebtAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetCollateralAsset() AssetMetadata {
	if m != nil {
		return m.CollateralAsset
	}
	return AssetMetadata{}
}

func (m *Liquidation) GetDebtAsset() AssetMetadata {
	if m != nil {
		return m.DebtAsset
	}
	return AssetMetadata{}
}

func (m *Liquidation) GetLiquidationTime() time.Time {
	if m != nil {
		return m.LiquidationTime
	}
	return time.Time{}
}

func (m *Liquidation) GetLiquidatedCollateralAmount() types.Coin {
	if m != nil {
		return m.LiquidatedCollateralAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetLiquidatedDebtAmount() types.Coin {
	if m != nil {
		return m.LiquidatedDebtAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetLiquidationBonusAmount() types.Coin {
	if m != nil {
		return m.LiquidationBonusAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetProtocolLiquidationFee() types.Coin {
	if m != nil {
		return m.ProtocolLiquidationFee
	}
	return types.Coin{}
}

func (m *Liquidation) GetUnliquidatedCollateralAmount() types.Coin {
	if m != nil {
		return m.UnliquidatedCollateralAmount
	}
	return types.Coin{}
}

func (m *Liquidation) GetAccruedInterestDuringLiquidation() types.Coin {
	if m != nil {
		return m.AccruedInterestDuringLiquidation
	}
	return types.Coin{}
}

func (m *Liquidation) GetLiquidationCet() string {
	if m != nil {
		return m.LiquidationCet
	}
	return ""
}

func (m *Liquidation) GetSettlementTx() string {
	if m != nil {
		return m.SettlementTx
	}
	return ""
}

func (m *Liquidation) GetSettlementTxId() string {
	if m != nil {
		return m.SettlementTxId
	}
	return ""
}

func (m *Liquidation) GetStatus() LiquidationStatus {
	if m != nil {
		return m.Status
	}
	return LiquidationStatus_LIQUIDATION_STATUS_UNSPECIFIED
}

type LiquidationRecord struct {
	Id               uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LiquidationId    uint64     `protobuf:"varint,2,opt,name=liquidation_id,json=liquidationId,proto3" json:"liquidation_id,omitempty"`
	Liquidator       string     `protobuf:"bytes,3,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	DebtAmount       types.Coin `protobuf:"bytes,4,opt,name=debt_amount,json=debtAmount,proto3" json:"debt_amount"`
	CollateralAmount types.Coin `protobuf:"bytes,5,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount"`
	BonusAmount      types.Coin `protobuf:"bytes,6,opt,name=bonus_amount,json=bonusAmount,proto3" json:"bonus_amount"`
	Time             time.Time  `protobuf:"bytes,7,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *LiquidationRecord) Reset()         { *m = LiquidationRecord{} }
func (m *LiquidationRecord) String() string { return proto.CompactTextString(m) }
func (*LiquidationRecord) ProtoMessage()    {}
func (*LiquidationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a70eb6f23db56, []int{3}
}
func (m *LiquidationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationRecord.Merge(m, src)
}
func (m *LiquidationRecord) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationRecord proto.InternalMessageInfo

func (m *LiquidationRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LiquidationRecord) GetLiquidationId() uint64 {
	if m != nil {
		return m.LiquidationId
	}
	return 0
}

func (m *LiquidationRecord) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *LiquidationRecord) GetDebtAmount() types.Coin {
	if m != nil {
		return m.DebtAmount
	}
	return types.Coin{}
}

func (m *LiquidationRecord) GetCollateralAmount() types.Coin {
	if m != nil {
		return m.CollateralAmount
	}
	return types.Coin{}
}

func (m *LiquidationRecord) GetBonusAmount() types.Coin {
	if m != nil {
		return m.BonusAmount
	}
	return types.Coin{}
}

func (m *LiquidationRecord) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("bitway.liquidation.LiquidationStatus", LiquidationStatus_name, LiquidationStatus_value)
	proto.RegisterEnum("bitway.liquidation.SigningIntent", SigningIntent_name, SigningIntent_value)
	proto.RegisterType((*AssetMetadata)(nil), "bitway.liquidation.AssetMetadata")
	proto.RegisterType((*LiquidationV1)(nil), "bitway.liquidation.LiquidationV1")
	proto.RegisterType((*Liquidation)(nil), "bitway.liquidation.Liquidation")
	proto.RegisterType((*LiquidationRecord)(nil), "bitway.liquidation.LiquidationRecord")
}

func init() {
	proto.RegisterFile("bitway/liquidation/liquidation.proto", fileDescriptor_4e7a70eb6f23db56)
}

var fileDescriptor_4e7a70eb6f23db56 = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0x5e, 0x27, 0x9b, 0xaf, 0x77, 0xb3, 0x89, 0x33, 0x49, 0x83, 0xb3, 0x2d, 0xde, 0x24, 0xa5,
	0x22, 0x2a, 0xaa, 0x97, 0x94, 0x0b, 0x17, 0x24, 0xb2, 0xf1, 0x26, 0x32, 0xda, 0x6e, 0x8b, 0xd7,
	0x41, 0x2a, 0x07, 0xac, 0xb1, 0x3d, 0xdd, 0x8e, 0xb0, 0x3d, 0x61, 0x3d, 0x86, 0xe4, 0x5f, 0xf4,
	0x1f, 0x20, 0xce, 0x5c, 0xb9, 0x73, 0xed, 0xb1, 0xe2, 0x84, 0x38, 0x04, 0x94, 0xfc, 0x09, 0x8e,
	0xc8, 0x63, 0x6f, 0x76, 0xd2, 0xa4, 0xc5, 0x41, 0x15, 0xa7, 0xdc, 0xfc, 0x7e, 0x3d, 0xf3, 0xce,
	0xfb, 0xf1, 0x8c, 0x0c, 0x1f, 0x78, 0x94, 0xff, 0x80, 0x8f, 0x5b, 0x21, 0xfd, 0x2e, 0xa5, 0x01,
	0xe6, 0x94, 0xc5, 0xf2, 0xb7, 0x71, 0x38, 0x64, 0x9c, 0x21, 0x94, 0x7b, 0x19, 0x92, 0xa5, 0xb1,
	0x32, 0x60, 0x03, 0x26, 0xcc, 0xad, 0xec, 0x2b, 0xf7, 0x6c, 0x34, 0x07, 0x8c, 0x0d, 0x42, 0xd2,
	0x12, 0x92, 0x97, 0x3e, 0x6b, 0x71, 0x1a, 0x91, 0x84, 0xe3, 0xe8, 0xb0, 0x70, 0xd0, 0x7d, 0x96,
	0x44, 0x2c, 0x69, 0x79, 0x38, 0x21, 0xad, 0xef, 0xb7, 0x3d, 0xc2, 0xf1, 0x76, 0xcb, 0x67, 0xb4,
	0x38, 0xaa, 0xb1, 0x96, 0xdb, 0xdd, 0x1c, 0x39, 0x17, 0x72, 0xd3, 0xe6, 0xcf, 0x0a, 0xd4, 0x77,
	0x92, 0x84, 0xf0, 0x47, 0x84, 0xe3, 0x00, 0x73, 0x8c, 0x56, 0x60, 0x2a, 0x20, 0x31, 0x8b, 0x34,
	0x65, 0x5d, 0xd9, 0x9a, 0xb3, 0x73, 0x01, 0xad, 0xc2, 0x74, 0x72, 0x1c, 0x79, 0x2c, 0xd4, 0x26,
	0x84, 0xba, 0x90, 0x50, 0x03, 0x66, 0x03, 0xe2, 0xd3, 0x08, 0x87, 0x89, 0x36, 0xb9, 0xae, 0x6c,
	0x4d, 0xd9, 0xe7, 0x32, 0xda, 0x80, 0xf9, 0xc3, 0x21, 0xf5, 0x89, 0x5b, 0x44, 0x56, 0x45, 0x64,
	0x4d, 0xe8, 0xfa, 0x79, 0xf8, 0x03, 0x58, 0xa6, 0x89, 0x9b, 0xe5, 0xed, 0xe6, 0xae, 0x38, 0xcb,
	0x45, 0x9b, 0x5a, 0x57, 0xb6, 0x66, 0x6d, 0x95, 0x26, 0x6d, 0x9c, 0x90, 0x27, 0x99, 0x41, 0xe4,
	0xb8, 0xf9, 0x53, 0x0d, 0xea, 0xdd, 0x71, 0xbd, 0xbe, 0xda, 0x46, 0x0b, 0x30, 0x41, 0x03, 0x91,
	0x6a, 0xd5, 0x9e, 0xa0, 0x01, 0x7a, 0x0f, 0x66, 0x42, 0x86, 0x63, 0x97, 0x06, 0xa3, 0x44, 0x33,
	0xd1, 0x0a, 0xb2, 0x0b, 0x04, 0xc4, 0xe3, 0x6c, 0x28, 0xd2, 0x9c, 0xb3, 0x0b, 0x09, 0xad, 0xc1,
	0x64, 0xe0, 0x47, 0x79, 0x6e, 0xed, 0x99, 0xd3, 0x93, 0xe6, 0xa4, 0xb9, 0xfb, 0xc8, 0xce, 0x74,
	0xa8, 0x0b, 0x4b, 0x3e, 0x0b, 0x43, 0xcc, 0xc9, 0x10, 0x87, 0x2e, 0x8e, 0x58, 0x1a, 0xe7, 0xa9,
	0xd5, 0x1e, 0xae, 0x19, 0x45, 0x15, 0xb3, 0xd4, 0x8d, 0xa2, 0xe4, 0xc6, 0x2e, 0xa3, 0x71, 0xbb,
	0xfa, 0xf2, 0xa4, 0x59, 0xb1, 0xd5, 0x71, 0xe4, 0x8e, 0x08, 0x44, 0x4f, 0x41, 0xc3, 0x3e, 0x4f,
	0x71, 0xe8, 0x5e, 0x06, 0x9d, 0x2e, 0x07, 0xba, 0x9a, 0x03, 0xec, 0xbe, 0x0e, 0xfd, 0x39, 0xd4,
	0xb2, 0xdb, 0x8c, 0xd0, 0x66, 0xca, 0xa1, 0x41, 0x16, 0x53, 0x20, 0xd8, 0xa0, 0xca, 0x59, 0x89,
	0x26, 0xcc, 0x0a, 0x98, 0x0d, 0xe3, 0xf2, 0x9c, 0x1a, 0x17, 0x26, 0xa6, 0x80, 0x5b, 0x94, 0x6e,
	0x9c, 0x99, 0xd1, 0x1e, 0x40, 0x9e, 0x95, 0x40, 0x9b, 0xbb, 0x1e, 0xda, 0x9c, 0x48, 0x4e, 0xe0,
	0x7c, 0x03, 0x4b, 0x92, 0x77, 0x3e, 0x27, 0x1a, 0x88, 0x7e, 0x6d, 0x67, 0xbe, 0x7f, 0x9c, 0x34,
	0x6f, 0xe7, 0x57, 0x4d, 0x82, 0x6f, 0x0d, 0xca, 0x5a, 0x11, 0xe6, 0xcf, 0x8d, 0x2e, 0x19, 0x60,
	0xff, 0xd8, 0x24, 0xfe, 0x6f, 0xbf, 0x3c, 0x80, 0xa2, 0x12, 0x26, 0xf1, 0x6d, 0x55, 0xc2, 0x12,
	0x93, 0x85, 0x1e, 0x83, 0xac, 0x73, 0xb3, 0xe5, 0xd2, 0x6a, 0x22, 0xdb, 0x86, 0x91, 0x6f, 0x9e,
	0x31, 0xda, 0x3c, 0xc3, 0x19, 0x6d, 0x5e, 0x7b, 0x36, 0x3b, 0xfa, 0xc5, 0x9f, 0x4d, 0xc5, 0x5e,
	0x94, 0xa2, 0x33, 0x3b, 0xc2, 0x70, 0x67, 0xa4, 0x22, 0xc1, 0x15, 0xdd, 0x9e, 0x2f, 0xd7, 0x9f,
	0xc6, 0x18, 0xe4, 0x52, 0xc7, 0x0f, 0x60, 0x55, 0x3a, 0x42, 0x6e, 0x7e, 0xbd, 0x1c, 0xf8, 0xca,
	0x38, 0xdc, 0x1c, 0x8f, 0xc1, 0x53, 0xd0, 0xe4, 0x52, 0x78, 0x2c, 0x4e, 0x93, 0x11, 0xf0, 0x42,
	0xc9, 0x19, 0x95, 0x00, 0xda, 0x59, 0xfc, 0x18, 0x5a, 0x54, 0xd1, 0x67, 0xa1, 0x2b, 0x9f, 0xf1,
	0x8c, 0x10, 0x6d, 0xb1, 0x24, 0xf4, 0x08, 0x40, 0xa2, 0x80, 0x3d, 0x42, 0x10, 0x01, 0x3d, 0x8d,
	0xdf, 0x5a, 0x71, 0xb5, 0xdc, 0x01, 0x77, 0x64, 0x98, 0x4b, 0x35, 0xff, 0x10, 0xe4, 0x4e, 0xbb,
	0x3e, 0xe1, 0xda, 0x92, 0xa0, 0x92, 0x05, 0x49, 0xbd, 0x4b, 0x38, 0xba, 0x0b, 0xf5, 0x84, 0x70,
	0x1e, 0x92, 0x88, 0xc4, 0xdc, 0xe5, 0x47, 0x1a, 0x12, 0x6e, 0xf3, 0x63, 0xa5, 0x73, 0x84, 0xb6,
	0x40, 0xbd, 0xe0, 0x94, 0x31, 0xd6, 0x72, 0x0e, 0x27, 0xfb, 0x59, 0x01, 0xfa, 0x0c, 0xa6, 0x13,
	0x8e, 0x79, 0x9a, 0x68, 0x2b, 0xeb, 0xca, 0xd6, 0xc2, 0xc3, 0x7b, 0x57, 0xed, 0x90, 0x54, 0x92,
	0xbe, 0x70, 0xb6, 0x8b, 0x20, 0x14, 0xc3, 0x5d, 0xec, 0xfb, 0xc3, 0x94, 0x04, 0x2e, 0x8d, 0x39,
	0x19, 0x92, 0x84, 0xbb, 0x41, 0x3a, 0xa4, 0xf1, 0x40, 0xee, 0x83, 0x76, 0xab, 0x5c, 0x89, 0xd6,
	0x0b, 0x2c, 0xab, 0x80, 0x32, 0x05, 0x92, 0x74, 0xfa, 0xe6, 0x8f, 0x35, 0xa8, 0x49, 0xf2, 0x0d,
	0x43, 0xdf, 0x30, 0xf4, 0x0d, 0x43, 0xdf, 0x30, 0xf4, 0xff, 0xc1, 0xd0, 0x25, 0xa9, 0x6e, 0xe9,
	0x1d, 0x51, 0xdd, 0x55, 0x2f, 0x02, 0x2a, 0xf7, 0x22, 0x2c, 0x97, 0x7c, 0x11, 0x56, 0xfe, 0xe5,
	0x45, 0xb8, 0xf5, 0x1f, 0x5e, 0x84, 0xcd, 0xbf, 0x27, 0x60, 0x49, 0xb2, 0xda, 0xc4, 0x67, 0xc3,
	0xe0, 0x12, 0x4f, 0xdf, 0x03, 0xf9, 0x16, 0x23, 0xba, 0xae, 0xda, 0x75, 0x49, 0x6b, 0x05, 0x48,
	0x07, 0x18, 0x29, 0xce, 0x99, 0x5b, 0xd2, 0xbc, 0xce, 0x7c, 0xd5, 0xeb, 0x33, 0xdf, 0xbb, 0x25,
	0xf9, 0x36, 0xcc, 0x5f, 0x58, 0x9a, 0x92, 0xc4, 0x5e, 0xf3, 0xa4, 0x4d, 0xf9, 0x14, 0xaa, 0x82,
	0x83, 0x66, 0xae, 0xc1, 0x41, 0x22, 0xe2, 0xfe, 0xaf, 0xca, 0x85, 0xd2, 0xe7, 0x8d, 0x41, 0x9b,
	0xa0, 0x77, 0xad, 0x2f, 0x0f, 0x2c, 0x73, 0xc7, 0xb1, 0x1e, 0xf7, 0xdc, 0xbe, 0xb3, 0xe3, 0x1c,
	0xf4, 0xdd, 0x83, 0x5e, 0xff, 0x49, 0x67, 0xd7, 0xda, 0xb3, 0x3a, 0xa6, 0x5a, 0x79, 0x83, 0xcf,
	0xb9, 0xaa, 0xb7, 0xaf, 0x2a, 0x68, 0x03, 0xde, 0x7f, 0x8b, 0x4f, 0xc7, 0x54, 0x27, 0x50, 0x13,
	0x6e, 0x5f, 0xe1, 0xd2, 0xef, 0x38, 0x4e, 0x37, 0xc3, 0x98, 0x44, 0x3a, 0x34, 0xde, 0xe4, 0xd0,
	0x31, 0xd5, 0xea, 0xfd, 0x8f, 0xa0, 0xde, 0xa7, 0x83, 0x98, 0xc6, 0x83, 0x6c, 0x2f, 0x62, 0x8e,
	0x1a, 0xb0, 0xda, 0xb7, 0xf6, 0x7b, 0x56, 0x6f, 0xdf, 0xb5, 0x7a, 0x4e, 0xa7, 0xe7, 0xb8, 0x66,
	0x67, 0x6f, 0xe7, 0xa0, 0xeb, 0xa8, 0x95, 0xf6, 0x17, 0x2f, 0x4f, 0x75, 0xe5, 0xd5, 0xa9, 0xae,
	0xfc, 0x75, 0xaa, 0x2b, 0x2f, 0xce, 0xf4, 0xca, 0xab, 0x33, 0xbd, 0xf2, 0xfb, 0x99, 0x5e, 0xf9,
	0xfa, 0xe3, 0x01, 0xe5, 0xcf, 0x53, 0xcf, 0xf0, 0x59, 0xd4, 0xca, 0x87, 0x37, 0xc4, 0x5e, 0x52,
	0x7c, 0xb6, 0x8e, 0x2e, 0xfc, 0x3b, 0xf3, 0xe3, 0x43, 0x92, 0x78, 0xd3, 0xa2, 0xbc, 0x9f, 0xfc,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x5c, 0x0b, 0x9b, 0x5e, 0x0f, 0x00, 0x00,
}

func (m *AssetMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBasePriceAsset {
		i--
		if m.IsBasePriceAsset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PriceSymbol) > 0 {
		i -= len(m.PriceSymbol)
		copy(dAtA[i:], m.PriceSymbol)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.PriceSymbol)))
		i--
		dAtA[i] = 0x22
	}
	if m.Decimals != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidationV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccruedInterestDuringLiquidation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.Status != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SettlementTxId) > 0 {
		i -= len(m.SettlementTxId)
		copy(dAtA[i:], m.SettlementTxId)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.SettlementTxId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SettlementTx) > 0 {
		i -= len(m.SettlementTx)
		copy(dAtA[i:], m.SettlementTx)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.SettlementTx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.LiquidationCet) > 0 {
		i -= len(m.LiquidationCet)
		copy(dAtA[i:], m.LiquidationCet)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.LiquidationCet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	{
		size, err := m.UnliquidatedCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.ProtocolLiquidationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.LiquidationBonusAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.LiquidatedDebtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.LiquidatedCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LiquidationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintLiquidation(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x5a
	{
		size := m.LiquidationPrice.Size()
		i -= size
		if _, err := m.LiquidationPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.DebtAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.CollateralAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.DebtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ActualCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.CollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DCM) > 0 {
		i -= len(m.DCM)
		copy(dAtA[i:], m.DCM)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.DCM)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Debtor) > 0 {
		i -= len(m.Debtor)
		copy(dAtA[i:], m.Debtor)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.Debtor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Liquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.SettlementTxId) > 0 {
		i -= len(m.SettlementTxId)
		copy(dAtA[i:], m.SettlementTxId)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.SettlementTxId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SettlementTx) > 0 {
		i -= len(m.SettlementTx)
		copy(dAtA[i:], m.SettlementTx)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.SettlementTx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.LiquidationCet) > 0 {
		i -= len(m.LiquidationCet)
		copy(dAtA[i:], m.LiquidationCet)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.LiquidationCet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size, err := m.AccruedInterestDuringLiquidation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size, err := m.UnliquidatedCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.ProtocolLiquidationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.LiquidationBonusAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.LiquidatedDebtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.LiquidatedCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	n19, err19 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LiquidationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationTime):])
	if err19 != nil {
		return 0, err19
	}
	i -= n19
	i = encodeVarintLiquidation(dAtA, i, uint64(n19))
	i--
	dAtA[i] = 0x5a
	{
		size := m.LiquidationPrice.Size()
		i -= size
		if _, err := m.LiquidationPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.DebtAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.CollateralAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.DebtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ActualCollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.CollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DCM) > 0 {
		i -= len(m.DCM)
		copy(dAtA[i:], m.DCM)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.DCM)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Debtor) > 0 {
		i -= len(m.Debtor)
		copy(dAtA[i:], m.Debtor)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.Debtor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n25, err25 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err25 != nil {
		return 0, err25
	}
	i -= n25
	i = encodeVarintLiquidation(dAtA, i, uint64(n25))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.BonusAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.CollateralAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.DebtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintLiquidation(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LiquidationId != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.LiquidationId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssetMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovLiquidation(uint64(m.Decimals))
	}
	l = len(m.PriceSymbol)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	if m.IsBasePriceAsset {
		n += 2
	}
	return n
}

func (m *LiquidationV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidation(uint64(m.Id))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = len(m.Debtor)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = len(m.DCM)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = m.CollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.ActualCollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.DebtAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.CollateralAsset.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.DebtAsset.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidationPrice.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationTime)
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidatedCollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidatedDebtAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidationBonusAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.ProtocolLiquidationFee.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.UnliquidatedCollateralAmount.Size()
	n += 2 + l + sovLiquidation(uint64(l))
	l = len(m.LiquidationCet)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	l = len(m.SettlementTx)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	l = len(m.SettlementTxId)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovLiquidation(uint64(m.Status))
	}
	l = m.AccruedInterestDuringLiquidation.Size()
	n += 2 + l + sovLiquidation(uint64(l))
	return n
}

func (m *Liquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidation(uint64(m.Id))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = len(m.Debtor)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = len(m.DCM)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = m.CollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.ActualCollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.DebtAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.CollateralAsset.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.DebtAsset.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidationPrice.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationTime)
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidatedCollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidatedDebtAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.LiquidationBonusAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.ProtocolLiquidationFee.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.UnliquidatedCollateralAmount.Size()
	n += 2 + l + sovLiquidation(uint64(l))
	l = m.AccruedInterestDuringLiquidation.Size()
	n += 2 + l + sovLiquidation(uint64(l))
	l = len(m.LiquidationCet)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	l = len(m.SettlementTx)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	l = len(m.SettlementTxId)
	if l > 0 {
		n += 2 + l + sovLiquidation(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovLiquidation(uint64(m.Status))
	}
	return n
}

func (m *LiquidationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidation(uint64(m.Id))
	}
	if m.LiquidationId != 0 {
		n += 1 + sovLiquidation(uint64(m.LiquidationId))
	}
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovLiquidation(uint64(l))
	}
	l = m.DebtAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.CollateralAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = m.BonusAmount.Size()
	n += 1 + l + sovLiquidation(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovLiquidation(uint64(l))
	return n
}

func sovLiquidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidation(x uint64) (n int) {
	return sovLiquidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AssetMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBasePriceAsset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBasePriceAsset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debtor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debtor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DCM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DCM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LiquidationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatedCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatedCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatedDebtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatedDebtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationBonusAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationBonusAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLiquidationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolLiquidationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnliquidatedCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnliquidatedCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationCet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationCet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LiquidationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedInterestDuringLiquidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccruedInterestDuringLiquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debtor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debtor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DCM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DCM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LiquidationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatedCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatedCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatedDebtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatedDebtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationBonusAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationBonusAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLiquidationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolLiquidationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnliquidatedCollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnliquidatedCollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedInterestDuringLiquidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccruedInterestDuringLiquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationCet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationCet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LiquidationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationId", wireType)
			}
			m.LiquidationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BonusAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidation = fmt.Errorf("proto: unexpected end of group")
)
