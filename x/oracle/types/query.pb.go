// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPoolRequest is request type for the Query/Pool RPC method.
type QueryGetPriceBySymbolRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *QueryGetPriceBySymbolRequest) Reset()         { *m = QueryGetPriceBySymbolRequest{} }
func (m *QueryGetPriceBySymbolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceBySymbolRequest) ProtoMessage()    {}
func (*QueryGetPriceBySymbolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{0}
}
func (m *QueryGetPriceBySymbolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceBySymbolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceBySymbolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceBySymbolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceBySymbolRequest.Merge(m, src)
}
func (m *QueryGetPriceBySymbolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceBySymbolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceBySymbolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceBySymbolRequest proto.InternalMessageInfo

func (m *QueryGetPriceBySymbolRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

// QueryPoolResponse is response type for the Query/Pool RPC method.
type QueryGetPriceBySymbolResponse struct {
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryGetPriceBySymbolResponse) Reset()         { *m = QueryGetPriceBySymbolResponse{} }
func (m *QueryGetPriceBySymbolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceBySymbolResponse) ProtoMessage()    {}
func (*QueryGetPriceBySymbolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{1}
}
func (m *QueryGetPriceBySymbolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceBySymbolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceBySymbolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceBySymbolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceBySymbolResponse.Merge(m, src)
}
func (m *QueryGetPriceBySymbolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceBySymbolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceBySymbolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceBySymbolResponse proto.InternalMessageInfo

func (m *QueryGetPriceBySymbolResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
type QueryListPricesRequest struct {
}

func (m *QueryListPricesRequest) Reset()         { *m = QueryListPricesRequest{} }
func (m *QueryListPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListPricesRequest) ProtoMessage()    {}
func (*QueryListPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{2}
}
func (m *QueryListPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPricesRequest.Merge(m, src)
}
func (m *QueryListPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPricesRequest proto.InternalMessageInfo

// QueryPoolsResponse is response type for the Query/Pools RPC method.
type QueryListPricesResponse struct {
	Prices []*OraclePrice `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (m *QueryListPricesResponse) Reset()         { *m = QueryListPricesResponse{} }
func (m *QueryListPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListPricesResponse) ProtoMessage()    {}
func (*QueryListPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{3}
}
func (m *QueryListPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPricesResponse.Merge(m, src)
}
func (m *QueryListPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPricesResponse proto.InternalMessageInfo

func (m *QueryListPricesResponse) GetPrices() []*OraclePrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryChainTipRequest is request type for the Query/ChainTip RPC method.
type QueryChainTipRequest struct {
}

func (m *QueryChainTipRequest) Reset()         { *m = QueryChainTipRequest{} }
func (m *QueryChainTipRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainTipRequest) ProtoMessage()    {}
func (*QueryChainTipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{6}
}
func (m *QueryChainTipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTipRequest.Merge(m, src)
}
func (m *QueryChainTipRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTipRequest proto.InternalMessageInfo

// QueryChainTipResponse is response type for the Query/ChainTip RPC method.
type QueryChainTipResponse struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryChainTipResponse) Reset()         { *m = QueryChainTipResponse{} }
func (m *QueryChainTipResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainTipResponse) ProtoMessage()    {}
func (*QueryChainTipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{7}
}
func (m *QueryChainTipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTipResponse.Merge(m, src)
}
func (m *QueryChainTipResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTipResponse proto.InternalMessageInfo

func (m *QueryChainTipResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryChainTipResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBlockHeaderByHeightRequest is the request type for the Query/BlockHeaderByHeight RPC method.
type QueryBlockHeaderByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockHeaderByHeightRequest) Reset()         { *m = QueryBlockHeaderByHeightRequest{} }
func (m *QueryBlockHeaderByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHeightRequest) ProtoMessage()    {}
func (*QueryBlockHeaderByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{8}
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHeightRequest.Merge(m, src)
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHeightRequest proto.InternalMessageInfo

func (m *QueryBlockHeaderByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBlockHeaderByHeightResponse is the response type for the Query/BlockHeaderByHeight RPC method.
type QueryBlockHeaderByHeightResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBlockHeaderByHeightResponse) Reset()         { *m = QueryBlockHeaderByHeightResponse{} }
func (m *QueryBlockHeaderByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHeightResponse) ProtoMessage()    {}
func (*QueryBlockHeaderByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{9}
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHeightResponse.Merge(m, src)
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHeightResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderByHeightResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// QueryBlockHeaderByHashRequest is the request type for the Query/BlockHeaderByHash RPC method.
type QueryBlockHeaderByHashRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryBlockHeaderByHashRequest) Reset()         { *m = QueryBlockHeaderByHashRequest{} }
func (m *QueryBlockHeaderByHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHashRequest) ProtoMessage()    {}
func (*QueryBlockHeaderByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{10}
}
func (m *QueryBlockHeaderByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHashRequest.Merge(m, src)
}
func (m *QueryBlockHeaderByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHashRequest proto.InternalMessageInfo

func (m *QueryBlockHeaderByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// QueryBlockHeaderByHashResponse is the response type for the Query/BlockHeaderByHash RPC method.
type QueryBlockHeaderByHashResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBlockHeaderByHashResponse) Reset()         { *m = QueryBlockHeaderByHashResponse{} }
func (m *QueryBlockHeaderByHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHashResponse) ProtoMessage()    {}
func (*QueryBlockHeaderByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{11}
}
func (m *QueryBlockHeaderByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHashResponse.Merge(m, src)
}
func (m *QueryBlockHeaderByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHashResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderByHashResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// QueryBestBlockHeaderRequest is the request type for the Query/BestBlockHeader RPC method.
type QueryBestBlockHeaderRequest struct {
}

func (m *QueryBestBlockHeaderRequest) Reset()         { *m = QueryBestBlockHeaderRequest{} }
func (m *QueryBestBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBestBlockHeaderRequest) ProtoMessage()    {}
func (*QueryBestBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{12}
}
func (m *QueryBestBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBestBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBestBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBestBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBestBlockHeaderRequest.Merge(m, src)
}
func (m *QueryBestBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBestBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBestBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBestBlockHeaderRequest proto.InternalMessageInfo

// QueryBestBlockHeaderResponse is the response type for the Query/BestBlockHeader RPC method.
type QueryBestBlockHeaderResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBestBlockHeaderResponse) Reset()         { *m = QueryBestBlockHeaderResponse{} }
func (m *QueryBestBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBestBlockHeaderResponse) ProtoMessage()    {}
func (*QueryBestBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e01ed6de72dee9b, []int{13}
}
func (m *QueryBestBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBestBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBestBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBestBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBestBlockHeaderResponse.Merge(m, src)
}
func (m *QueryBestBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBestBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBestBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBestBlockHeaderResponse proto.InternalMessageInfo

func (m *QueryBestBlockHeaderResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetPriceBySymbolRequest)(nil), "bitway.oracle.QueryGetPriceBySymbolRequest")
	proto.RegisterType((*QueryGetPriceBySymbolResponse)(nil), "bitway.oracle.QueryGetPriceBySymbolResponse")
	proto.RegisterType((*QueryListPricesRequest)(nil), "bitway.oracle.QueryListPricesRequest")
	proto.RegisterType((*QueryListPricesResponse)(nil), "bitway.oracle.QueryListPricesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "bitway.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitway.oracle.QueryParamsResponse")
	proto.RegisterType((*QueryChainTipRequest)(nil), "bitway.oracle.QueryChainTipRequest")
	proto.RegisterType((*QueryChainTipResponse)(nil), "bitway.oracle.QueryChainTipResponse")
	proto.RegisterType((*QueryBlockHeaderByHeightRequest)(nil), "bitway.oracle.QueryBlockHeaderByHeightRequest")
	proto.RegisterType((*QueryBlockHeaderByHeightResponse)(nil), "bitway.oracle.QueryBlockHeaderByHeightResponse")
	proto.RegisterType((*QueryBlockHeaderByHashRequest)(nil), "bitway.oracle.QueryBlockHeaderByHashRequest")
	proto.RegisterType((*QueryBlockHeaderByHashResponse)(nil), "bitway.oracle.QueryBlockHeaderByHashResponse")
	proto.RegisterType((*QueryBestBlockHeaderRequest)(nil), "bitway.oracle.QueryBestBlockHeaderRequest")
	proto.RegisterType((*QueryBestBlockHeaderResponse)(nil), "bitway.oracle.QueryBestBlockHeaderResponse")
}

func init() { proto.RegisterFile("bitway/oracle/query.proto", fileDescriptor_4e01ed6de72dee9b) }

var fileDescriptor_4e01ed6de72dee9b = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0x8f, 0xfb, 0xb5, 0xf9, 0xc4, 0x94, 0x4a, 0x68, 0x48, 0xdb, 0xb0, 0xb4, 0x6e, 0x30, 0x50,
	0x45, 0x6d, 0xb1, 0xa5, 0x54, 0x20, 0x71, 0xe0, 0x92, 0x0a, 0x51, 0x21, 0x10, 0x25, 0x70, 0x42,
	0x42, 0xd5, 0x3a, 0xac, 0x62, 0x8b, 0x34, 0xeb, 0x66, 0x5d, 0x20, 0x54, 0xbd, 0xf0, 0x04, 0x48,
	0x08, 0xf1, 0x04, 0x9c, 0x79, 0x8d, 0x1e, 0x2b, 0x71, 0xe1, 0x84, 0x50, 0xcb, 0x3b, 0x70, 0x45,
	0xd9, 0x9d, 0xd0, 0xc4, 0xb1, 0x9b, 0x1c, 0x7a, 0x89, 0xbd, 0x9e, 0xf9, 0xfd, 0xd9, 0xdd, 0x99,
	0x09, 0x5c, 0xf1, 0xc3, 0xf8, 0x2d, 0xef, 0x78, 0xb2, 0xcd, 0xeb, 0x4d, 0xe1, 0xed, 0xee, 0x89,
	0x76, 0xc7, 0x8d, 0xda, 0x32, 0x96, 0x38, 0x63, 0x42, 0xae, 0x09, 0xb1, 0x42, 0x43, 0x36, 0xa4,
	0x8e, 0x78, 0xdd, 0x37, 0x93, 0xc4, 0x16, 0x1a, 0x52, 0x36, 0x9a, 0xc2, 0xe3, 0x51, 0xe8, 0xf1,
	0x56, 0x4b, 0xc6, 0x3c, 0x0e, 0x65, 0x4b, 0x51, 0x94, 0x0d, 0xb2, 0x9b, 0x47, 0x7a, 0x2c, 0xe2,
	0x6d, 0xbe, 0x43, 0x38, 0xe7, 0x0e, 0x2c, 0x3c, 0xed, 0x3a, 0x79, 0x20, 0xe2, 0xad, 0x76, 0x58,
	0x17, 0xd5, 0xce, 0xb3, 0xce, 0x8e, 0x2f, 0x9b, 0x35, 0xb1, 0xbb, 0x27, 0x54, 0x8c, 0x73, 0x90,
	0x57, 0xfa, 0x43, 0xd1, 0x2a, 0x59, 0xe5, 0x0b, 0x35, 0x5a, 0x39, 0xb7, 0x61, 0x31, 0x03, 0xa7,
	0x22, 0xd9, 0x52, 0x02, 0x0b, 0x30, 0x15, 0x75, 0x03, 0x84, 0x33, 0x0b, 0xa7, 0x08, 0x73, 0x1a,
	0xf6, 0x28, 0x54, 0x06, 0xa7, 0x48, 0xc8, 0x79, 0x0c, 0xf3, 0x43, 0x11, 0xa2, 0xaa, 0x40, 0x5e,
	0xa3, 0x55, 0xd1, 0x2a, 0xfd, 0x57, 0x9e, 0xae, 0x30, 0x77, 0xe0, 0xbc, 0xdc, 0x27, 0xfa, 0xa1,
	0x41, 0x35, 0xca, 0x74, 0x0a, 0x80, 0x9a, 0x6e, 0x4b, 0x6f, 0xb6, 0x27, 0xf2, 0x10, 0x2e, 0x0f,
	0x7c, 0x25, 0x81, 0x75, 0xc8, 0x9b, 0x43, 0xd1, 0x66, 0xa7, 0x2b, 0xb3, 0x09, 0x01, 0x93, 0x5e,
	0x9d, 0x3c, 0xfc, 0xb9, 0x94, 0xab, 0x51, 0xaa, 0x33, 0x07, 0x05, 0xcd, 0xb5, 0x11, 0xf0, 0xb0,
	0xf5, 0x3c, 0x8c, 0x7a, 0x1a, 0x1b, 0x30, 0x9b, 0xf8, 0x4e, 0x2a, 0x08, 0x93, 0x01, 0x57, 0x01,
	0x1d, 0x88, 0x7e, 0xef, 0x1e, 0x6f, 0x20, 0xc2, 0x46, 0x10, 0x17, 0x27, 0x4a, 0x56, 0x79, 0xb2,
	0x46, 0x2b, 0xe7, 0x2e, 0x2c, 0x69, 0x92, 0x6a, 0x53, 0xd6, 0x5f, 0x6f, 0x0a, 0xfe, 0x4a, 0xb4,
	0xab, 0x9d, 0x4d, 0x1d, 0xeb, 0xbb, 0x19, 0x82, 0x5a, 0x03, 0x50, 0x0e, 0xa5, 0x6c, 0x28, 0x59,
	0xb9, 0x07, 0x17, 0xfd, 0x6e, 0x78, 0x3b, 0xd0, 0x71, 0xda, 0x76, 0xf2, 0x5c, 0xfb, 0x18, 0x6a,
	0xd3, 0xfe, 0xe9, 0xc2, 0x59, 0xa7, 0xcb, 0x1f, 0x94, 0xe0, 0x2a, 0xe8, 0x79, 0x4b, 0xd9, 0xaa,
	0xb3, 0x0d, 0x76, 0x16, 0xe8, 0x7c, 0x5c, 0x2d, 0xc2, 0x55, 0x23, 0x20, 0x54, 0xdc, 0x9f, 0x44,
	0xf7, 0xf2, 0x92, 0x2a, 0x7d, 0x28, 0x7c, 0x2e, 0xea, 0x95, 0x3f, 0xff, 0xc3, 0x94, 0xe6, 0xc7,
	0x16, 0xe4, 0x4d, 0xc1, 0xe0, 0xb5, 0x04, 0x78, 0xb8, 0x22, 0x99, 0x73, 0x56, 0x8a, 0x71, 0xe6,
	0x2c, 0x7e, 0xf8, 0xfe, 0xfb, 0xd3, 0xc4, 0x3c, 0xce, 0x7a, 0x69, 0x8d, 0x8c, 0xef, 0x01, 0x4e,
	0x9b, 0x06, 0x6f, 0xa6, 0x11, 0x0e, 0xb5, 0x1b, 0x5b, 0x1e, 0x95, 0x36, 0x4a, 0xdb, 0xa8, 0x7d,
	0xb6, 0xe0, 0x52, 0x72, 0x04, 0xe0, 0x6a, 0x1a, 0x77, 0xc6, 0x80, 0x61, 0x6b, 0xe3, 0x25, 0x93,
	0x9d, 0x65, 0x6d, 0xa7, 0x84, 0x76, 0xaa, 0x1d, 0x6f, 0xdf, 0x4c, 0xa7, 0x03, 0x7c, 0x03, 0x33,
	0x03, 0x4d, 0x88, 0xd7, 0xd3, 0x64, 0x12, 0xad, 0xcb, 0x6e, 0x9c, 0x9d, 0x44, 0x1e, 0x98, 0xf6,
	0x50, 0x40, 0x4c, 0x78, 0x88, 0xc3, 0x08, 0xbf, 0x59, 0x50, 0xcc, 0xea, 0x3e, 0x74, 0xd3, 0xe8,
	0xb3, 0x3b, 0x9c, 0x79, 0x63, 0xe7, 0x93, 0xb3, 0x8a, 0x76, 0xb6, 0x86, 0x2b, 0x09, 0x67, 0xba,
	0x4e, 0x4d, 0x59, 0x7b, 0x66, 0x4a, 0x78, 0xfb, 0xe6, 0x79, 0x80, 0x5f, 0x2d, 0x1a, 0xc9, 0x43,
	0x7d, 0x89, 0x6b, 0xa3, 0xf5, 0x4f, 0x7b, 0x9e, 0xdd, 0x1a, 0x33, 0x9b, 0xbc, 0xba, 0xda, 0x6b,
	0x19, 0x97, 0xcf, 0xf2, 0xca, 0x55, 0xe0, 0xed, 0x77, 0x7f, 0x0f, 0xf0, 0x8b, 0x45, 0xf3, 0x36,
	0xd1, 0xbf, 0xb8, 0x92, 0xaa, 0x9b, 0x3a, 0x03, 0xd8, 0xea, 0x58, 0xb9, 0x23, 0x6a, 0xcd, 0x17,
	0x2a, 0xee, 0x73, 0x59, 0xbd, 0x7f, 0x78, 0x6c, 0x5b, 0x47, 0xc7, 0xb6, 0xf5, 0xeb, 0xd8, 0xb6,
	0x3e, 0x9e, 0xd8, 0xb9, 0xa3, 0x13, 0x3b, 0xf7, 0xe3, 0xc4, 0xce, 0xbd, 0x58, 0x6d, 0x84, 0x71,
	0xb0, 0xe7, 0xbb, 0x75, 0xb9, 0x43, 0x1c, 0x4d, 0xee, 0xab, 0x1e, 0xdd, 0xbb, 0x7f, 0x85, 0xd3,
	0x89, 0x84, 0xf2, 0xf3, 0xfa, 0x0f, 0x79, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x0a,
	0xde, 0xf4, 0x28, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListPrices queries all oracle prices.
	ListPrices(ctx context.Context, in *QueryListPricesRequest, opts ...grpc.CallOption) (*QueryListPricesResponse, error)
	// GetPrice queries the oracle price by symbol.
	GetPriceBySymbol(ctx context.Context, in *QueryGetPriceBySymbolRequest, opts ...grpc.CallOption) (*QueryGetPriceBySymbolResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error)
	// BestBlockHeader queries the best block header.
	QueryBestBlockHeader(ctx context.Context, in *QueryBestBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBestBlockHeaderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPrices(ctx context.Context, in *QueryListPricesRequest, opts ...grpc.CallOption) (*QueryListPricesResponse, error) {
	out := new(QueryListPricesResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/ListPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPriceBySymbol(ctx context.Context, in *QueryGetPriceBySymbolRequest, opts ...grpc.CallOption) (*QueryGetPriceBySymbolResponse, error) {
	out := new(QueryGetPriceBySymbolResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/GetPriceBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error) {
	out := new(QueryChainTipResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/QueryChainTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error) {
	out := new(QueryBlockHeaderByHeightResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/QueryBlockHeaderByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error) {
	out := new(QueryBlockHeaderByHashResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/QueryBlockHeaderByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBestBlockHeader(ctx context.Context, in *QueryBestBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBestBlockHeaderResponse, error) {
	out := new(QueryBestBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/bitway.oracle.Query/QueryBestBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListPrices queries all oracle prices.
	ListPrices(context.Context, *QueryListPricesRequest) (*QueryListPricesResponse, error)
	// GetPrice queries the oracle price by symbol.
	GetPriceBySymbol(context.Context, *QueryGetPriceBySymbolRequest) (*QueryGetPriceBySymbolResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(context.Context, *QueryChainTipRequest) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(context.Context, *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(context.Context, *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error)
	// BestBlockHeader queries the best block header.
	QueryBestBlockHeader(context.Context, *QueryBestBlockHeaderRequest) (*QueryBestBlockHeaderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListPrices(ctx context.Context, req *QueryListPricesRequest) (*QueryListPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrices not implemented")
}
func (*UnimplementedQueryServer) GetPriceBySymbol(ctx context.Context, req *QueryGetPriceBySymbolRequest) (*QueryGetPriceBySymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceBySymbol not implemented")
}
func (*UnimplementedQueryServer) QueryChainTip(ctx context.Context, req *QueryChainTipRequest) (*QueryChainTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainTip not implemented")
}
func (*UnimplementedQueryServer) QueryBlockHeaderByHeight(ctx context.Context, req *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHeight not implemented")
}
func (*UnimplementedQueryServer) QueryBlockHeaderByHash(ctx context.Context, req *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHash not implemented")
}
func (*UnimplementedQueryServer) QueryBestBlockHeader(ctx context.Context, req *QueryBestBlockHeaderRequest) (*QueryBestBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBestBlockHeader not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/ListPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPrices(ctx, req.(*QueryListPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPriceBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceBySymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPriceBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/GetPriceBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPriceBySymbol(ctx, req.(*QueryGetPriceBySymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/QueryChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryChainTip(ctx, req.(*QueryChainTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/QueryBlockHeaderByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, req.(*QueryBlockHeaderByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/QueryBlockHeaderByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, req.(*QueryBlockHeaderByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBestBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBestBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBestBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.oracle.Query/QueryBestBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBestBlockHeader(ctx, req.(*QueryBestBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListPrices",
			Handler:    _Query_ListPrices_Handler,
		},
		{
			MethodName: "GetPriceBySymbol",
			Handler:    _Query_GetPriceBySymbol_Handler,
		},
		{
			MethodName: "QueryChainTip",
			Handler:    _Query_QueryChainTip_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHeight",
			Handler:    _Query_QueryBlockHeaderByHeight_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHash",
			Handler:    _Query_QueryBlockHeaderByHash_Handler,
		},
		{
			MethodName: "QueryBestBlockHeader",
			Handler:    _Query_QueryBestBlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/oracle/query.proto",
}

func (m *QueryGetPriceBySymbolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceBySymbolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceBySymbolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceBySymbolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceBySymbolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceBySymbolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainTipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChainTipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBestBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBestBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBestBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBestBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBestBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBestBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPriceBySymbolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceBySymbolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainTipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChainTipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockHeaderByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockHeaderByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBestBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBestBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPriceBySymbolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceBySymbolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceBySymbolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceBySymbolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceBySymbolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceBySymbolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &OraclePrice{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBestBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBestBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBestBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBestBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBestBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBestBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
