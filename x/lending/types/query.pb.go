// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/lending/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPoolRequest is request type for the Query/Pool RPC method.
type QueryPoolRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{0}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

func (m *QueryPoolRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryPoolResponse is response type for the Query/Pool RPC method.
type QueryPoolResponse struct {
	Pool *LendingPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{1}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetPool() *LendingPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
type QueryPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{2}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

func (m *QueryPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolsResponse is response type for the Query/Pools RPC method.
type QueryPoolsResponse struct {
	Pools      []*LendingPool      `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{3}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []*LendingPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolExchangeRateRequest is request type for the Query/PoolExchangeRate RPC method.
type QueryPoolExchangeRateRequest struct {
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolExchangeRateRequest) Reset()         { *m = QueryPoolExchangeRateRequest{} }
func (m *QueryPoolExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolExchangeRateRequest) ProtoMessage()    {}
func (*QueryPoolExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{4}
}
func (m *QueryPoolExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolExchangeRateRequest.Merge(m, src)
}
func (m *QueryPoolExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolExchangeRateRequest proto.InternalMessageInfo

func (m *QueryPoolExchangeRateRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

// QueryPoolExchangeRateResponse is response type for the Query/PoolExchangeRate RPC method.
type QueryPoolExchangeRateResponse struct {
	ExchangeRate string `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
}

func (m *QueryPoolExchangeRateResponse) Reset()         { *m = QueryPoolExchangeRateResponse{} }
func (m *QueryPoolExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolExchangeRateResponse) ProtoMessage()    {}
func (*QueryPoolExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{5}
}
func (m *QueryPoolExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolExchangeRateResponse.Merge(m, src)
}
func (m *QueryPoolExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolExchangeRateResponse proto.InternalMessageInfo

func (m *QueryPoolExchangeRateResponse) GetExchangeRate() string {
	if m != nil {
		return m.ExchangeRate
	}
	return ""
}

type QueryLiquidationPriceRequest struct {
	PoolId           string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	CollateralAmount string `protobuf:"bytes,2,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
	BorrowAmount     string `protobuf:"bytes,3,opt,name=borrow_amount,json=borrowAmount,proto3" json:"borrow_amount,omitempty"`
	Maturity         int64  `protobuf:"varint,4,opt,name=maturity,proto3" json:"maturity,omitempty"`
}

func (m *QueryLiquidationPriceRequest) Reset()         { *m = QueryLiquidationPriceRequest{} }
func (m *QueryLiquidationPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationPriceRequest) ProtoMessage()    {}
func (*QueryLiquidationPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{6}
}
func (m *QueryLiquidationPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationPriceRequest.Merge(m, src)
}
func (m *QueryLiquidationPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationPriceRequest proto.InternalMessageInfo

func (m *QueryLiquidationPriceRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *QueryLiquidationPriceRequest) GetCollateralAmount() string {
	if m != nil {
		return m.CollateralAmount
	}
	return ""
}

func (m *QueryLiquidationPriceRequest) GetBorrowAmount() string {
	if m != nil {
		return m.BorrowAmount
	}
	return ""
}

func (m *QueryLiquidationPriceRequest) GetMaturity() int64 {
	if m != nil {
		return m.Maturity
	}
	return 0
}

type QueryLiquidationPriceResponse struct {
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Pair  string `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (m *QueryLiquidationPriceResponse) Reset()         { *m = QueryLiquidationPriceResponse{} }
func (m *QueryLiquidationPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationPriceResponse) ProtoMessage()    {}
func (*QueryLiquidationPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{7}
}
func (m *QueryLiquidationPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationPriceResponse.Merge(m, src)
}
func (m *QueryLiquidationPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationPriceResponse proto.InternalMessageInfo

func (m *QueryLiquidationPriceResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *QueryLiquidationPriceResponse) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type QueryDlcEventCountRequest struct {
}

func (m *QueryDlcEventCountRequest) Reset()         { *m = QueryDlcEventCountRequest{} }
func (m *QueryDlcEventCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDlcEventCountRequest) ProtoMessage()    {}
func (*QueryDlcEventCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{8}
}
func (m *QueryDlcEventCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDlcEventCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDlcEventCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDlcEventCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDlcEventCountRequest.Merge(m, src)
}
func (m *QueryDlcEventCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDlcEventCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDlcEventCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDlcEventCountRequest proto.InternalMessageInfo

type QueryDlcEventCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryDlcEventCountResponse) Reset()         { *m = QueryDlcEventCountResponse{} }
func (m *QueryDlcEventCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDlcEventCountResponse) ProtoMessage()    {}
func (*QueryDlcEventCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{9}
}
func (m *QueryDlcEventCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDlcEventCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDlcEventCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDlcEventCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDlcEventCountResponse.Merge(m, src)
}
func (m *QueryDlcEventCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDlcEventCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDlcEventCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDlcEventCountResponse proto.InternalMessageInfo

func (m *QueryDlcEventCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryLoanCetInfosRequest struct {
	LoanId           string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	CollateralAmount string `protobuf:"bytes,2,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
}

func (m *QueryLoanCetInfosRequest) Reset()         { *m = QueryLoanCetInfosRequest{} }
func (m *QueryLoanCetInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanCetInfosRequest) ProtoMessage()    {}
func (*QueryLoanCetInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{10}
}
func (m *QueryLoanCetInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanCetInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanCetInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanCetInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanCetInfosRequest.Merge(m, src)
}
func (m *QueryLoanCetInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanCetInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanCetInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanCetInfosRequest proto.InternalMessageInfo

func (m *QueryLoanCetInfosRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *QueryLoanCetInfosRequest) GetCollateralAmount() string {
	if m != nil {
		return m.CollateralAmount
	}
	return ""
}

type QueryLoanCetInfosResponse struct {
	LiquidationCetInfo        *CetInfo `protobuf:"bytes,1,opt,name=liquidation_cet_info,json=liquidationCetInfo,proto3" json:"liquidation_cet_info,omitempty"`
	DefaultLiquidationCetInfo *CetInfo `protobuf:"bytes,2,opt,name=default_liquidation_cet_info,json=defaultLiquidationCetInfo,proto3" json:"default_liquidation_cet_info,omitempty"`
	RepaymentCetInfo          *CetInfo `protobuf:"bytes,3,opt,name=repayment_cet_info,json=repaymentCetInfo,proto3" json:"repayment_cet_info,omitempty"`
}

func (m *QueryLoanCetInfosResponse) Reset()         { *m = QueryLoanCetInfosResponse{} }
func (m *QueryLoanCetInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanCetInfosResponse) ProtoMessage()    {}
func (*QueryLoanCetInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{11}
}
func (m *QueryLoanCetInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanCetInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanCetInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanCetInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanCetInfosResponse.Merge(m, src)
}
func (m *QueryLoanCetInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanCetInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanCetInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanCetInfosResponse proto.InternalMessageInfo

func (m *QueryLoanCetInfosResponse) GetLiquidationCetInfo() *CetInfo {
	if m != nil {
		return m.LiquidationCetInfo
	}
	return nil
}

func (m *QueryLoanCetInfosResponse) GetDefaultLiquidationCetInfo() *CetInfo {
	if m != nil {
		return m.DefaultLiquidationCetInfo
	}
	return nil
}

func (m *QueryLoanCetInfosResponse) GetRepaymentCetInfo() *CetInfo {
	if m != nil {
		return m.RepaymentCetInfo
	}
	return nil
}

type QueryCollateralAddressRequest struct {
	BorrowerPubkey     string `protobuf:"bytes,1,opt,name=borrower_pubkey,json=borrowerPubkey,proto3" json:"borrower_pubkey,omitempty"`
	BorrowerAuthPubkey string `protobuf:"bytes,2,opt,name=borrower_auth_pubkey,json=borrowerAuthPubkey,proto3" json:"borrower_auth_pubkey,omitempty"`
	DCMPubKey          string `protobuf:"bytes,3,opt,name=dcm_pubkey,json=dcmPubkey,proto3" json:"dcm_pubkey,omitempty"`
	MaturityTime       uint64 `protobuf:"varint,4,opt,name=maturity_time,json=maturityTime,proto3" json:"maturity_time,omitempty"`
}

func (m *QueryCollateralAddressRequest) Reset()         { *m = QueryCollateralAddressRequest{} }
func (m *QueryCollateralAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralAddressRequest) ProtoMessage()    {}
func (*QueryCollateralAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{12}
}
func (m *QueryCollateralAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralAddressRequest.Merge(m, src)
}
func (m *QueryCollateralAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralAddressRequest proto.InternalMessageInfo

func (m *QueryCollateralAddressRequest) GetBorrowerPubkey() string {
	if m != nil {
		return m.BorrowerPubkey
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetBorrowerAuthPubkey() string {
	if m != nil {
		return m.BorrowerAuthPubkey
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetDCMPubKey() string {
	if m != nil {
		return m.DCMPubKey
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetMaturityTime() uint64 {
	if m != nil {
		return m.MaturityTime
	}
	return 0
}

type QueryCollateralAddressResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCollateralAddressResponse) Reset()         { *m = QueryCollateralAddressResponse{} }
func (m *QueryCollateralAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralAddressResponse) ProtoMessage()    {}
func (*QueryCollateralAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{13}
}
func (m *QueryCollateralAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralAddressResponse.Merge(m, src)
}
func (m *QueryCollateralAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralAddressResponse proto.InternalMessageInfo

func (m *QueryCollateralAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryLoanRequest is request type for the Query/Loan RPC method.
type QueryLoanRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLoanRequest) Reset()         { *m = QueryLoanRequest{} }
func (m *QueryLoanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanRequest) ProtoMessage()    {}
func (*QueryLoanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{16}
}
func (m *QueryLoanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanRequest.Merge(m, src)
}
func (m *QueryLoanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanRequest proto.InternalMessageInfo

func (m *QueryLoanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryLoanResponse is response type for the Query/Loan RPC method.
type QueryLoanResponse struct {
	Loan *Loan `protobuf:"bytes,1,opt,name=loan,proto3" json:"loan,omitempty"`
}

func (m *QueryLoanResponse) Reset()         { *m = QueryLoanResponse{} }
func (m *QueryLoanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanResponse) ProtoMessage()    {}
func (*QueryLoanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{17}
}
func (m *QueryLoanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanResponse.Merge(m, src)
}
func (m *QueryLoanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanResponse proto.InternalMessageInfo

func (m *QueryLoanResponse) GetLoan() *Loan {
	if m != nil {
		return m.Loan
	}
	return nil
}

// QueryLoansRequest is request type for the Query/Loans RPC method.
type QueryLoansRequest struct {
	Status     LoanStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=bitway.lending.LoanStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansRequest) Reset()         { *m = QueryLoansRequest{} }
func (m *QueryLoansRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoansRequest) ProtoMessage()    {}
func (*QueryLoansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{18}
}
func (m *QueryLoansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansRequest.Merge(m, src)
}
func (m *QueryLoansRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansRequest proto.InternalMessageInfo

func (m *QueryLoansRequest) GetStatus() LoanStatus {
	if m != nil {
		return m.Status
	}
	return LoanStatus_Unspecified
}

func (m *QueryLoansRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoansResponse is response type for the Query/Loans RPC method.
type QueryLoansResponse struct {
	Loans      []*Loan             `protobuf:"bytes,1,rep,name=loans,proto3" json:"loans,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansResponse) Reset()         { *m = QueryLoansResponse{} }
func (m *QueryLoansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoansResponse) ProtoMessage()    {}
func (*QueryLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{19}
}
func (m *QueryLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansResponse.Merge(m, src)
}
func (m *QueryLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansResponse proto.InternalMessageInfo

func (m *QueryLoansResponse) GetLoans() []*Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func (m *QueryLoansResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoansByAddressRequest is request type for the Query/LoansByAddress RPC method.
type QueryLoansByAddressRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Status     LoanStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=bitway.lending.LoanStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansByAddressRequest) Reset()         { *m = QueryLoansByAddressRequest{} }
func (m *QueryLoansByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoansByAddressRequest) ProtoMessage()    {}
func (*QueryLoansByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{20}
}
func (m *QueryLoansByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansByAddressRequest.Merge(m, src)
}
func (m *QueryLoansByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansByAddressRequest proto.InternalMessageInfo

func (m *QueryLoansByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryLoansByAddressRequest) GetStatus() LoanStatus {
	if m != nil {
		return m.Status
	}
	return LoanStatus_Unspecified
}

func (m *QueryLoansByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoansByAddressResponse is response type for the Query/LoansByAddress RPC method.
type QueryLoansByAddressResponse struct {
	Loans      []*Loan             `protobuf:"bytes,1,rep,name=loans,proto3" json:"loans,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansByAddressResponse) Reset()         { *m = QueryLoansByAddressResponse{} }
func (m *QueryLoansByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoansByAddressResponse) ProtoMessage()    {}
func (*QueryLoansByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{21}
}
func (m *QueryLoansByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansByAddressResponse.Merge(m, src)
}
func (m *QueryLoansByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansByAddressResponse proto.InternalMessageInfo

func (m *QueryLoansByAddressResponse) GetLoans() []*Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func (m *QueryLoansByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoansByOracleRequest is request type for the Query/LoansByOracle RPC method.
type QueryLoansByOracleRequest struct {
	OraclePubkey string             `protobuf:"bytes,1,opt,name=oracle_pubkey,json=oraclePubkey,proto3" json:"oracle_pubkey,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansByOracleRequest) Reset()         { *m = QueryLoansByOracleRequest{} }
func (m *QueryLoansByOracleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoansByOracleRequest) ProtoMessage()    {}
func (*QueryLoansByOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{22}
}
func (m *QueryLoansByOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansByOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansByOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansByOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansByOracleRequest.Merge(m, src)
}
func (m *QueryLoansByOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansByOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansByOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansByOracleRequest proto.InternalMessageInfo

func (m *QueryLoansByOracleRequest) GetOraclePubkey() string {
	if m != nil {
		return m.OraclePubkey
	}
	return ""
}

func (m *QueryLoansByOracleRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoansByOracleResponse is response type for the Query/LoansByOracle RPC method.
type QueryLoansByOracleResponse struct {
	Loans      []*Loan             `protobuf:"bytes,1,rep,name=loans,proto3" json:"loans,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLoansByOracleResponse) Reset()         { *m = QueryLoansByOracleResponse{} }
func (m *QueryLoansByOracleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoansByOracleResponse) ProtoMessage()    {}
func (*QueryLoansByOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{23}
}
func (m *QueryLoansByOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansByOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansByOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansByOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansByOracleResponse.Merge(m, src)
}
func (m *QueryLoansByOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansByOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansByOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansByOracleResponse proto.InternalMessageInfo

func (m *QueryLoansByOracleResponse) GetLoans() []*Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func (m *QueryLoansByOracleResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLoanDlcMetaRequest is request type for the Query/LoanDlcMeta RPC method.
type QueryLoanDlcMetaRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryLoanDlcMetaRequest) Reset()         { *m = QueryLoanDlcMetaRequest{} }
func (m *QueryLoanDlcMetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanDlcMetaRequest) ProtoMessage()    {}
func (*QueryLoanDlcMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{24}
}
func (m *QueryLoanDlcMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanDlcMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanDlcMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanDlcMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanDlcMetaRequest.Merge(m, src)
}
func (m *QueryLoanDlcMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanDlcMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanDlcMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanDlcMetaRequest proto.InternalMessageInfo

func (m *QueryLoanDlcMetaRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

// QueryLoanDlcMetaResponse is response type for the Query/LoanDlcMeta RPC method.
type QueryLoanDlcMetaResponse struct {
	DlcMeta *DLCMeta `protobuf:"bytes,1,opt,name=dlc_meta,json=dlcMeta,proto3" json:"dlc_meta,omitempty"`
}

func (m *QueryLoanDlcMetaResponse) Reset()         { *m = QueryLoanDlcMetaResponse{} }
func (m *QueryLoanDlcMetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanDlcMetaResponse) ProtoMessage()    {}
func (*QueryLoanDlcMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{25}
}
func (m *QueryLoanDlcMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanDlcMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanDlcMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanDlcMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanDlcMetaResponse.Merge(m, src)
}
func (m *QueryLoanDlcMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanDlcMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanDlcMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanDlcMetaResponse proto.InternalMessageInfo

func (m *QueryLoanDlcMetaResponse) GetDlcMeta() *DLCMeta {
	if m != nil {
		return m.DlcMeta
	}
	return nil
}

// QueryLoanAuthorizationRequest is request type for the Query/LoanAuthorization RPC method.
type QueryLoanAuthorizationRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLoanAuthorizationRequest) Reset()         { *m = QueryLoanAuthorizationRequest{} }
func (m *QueryLoanAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanAuthorizationRequest) ProtoMessage()    {}
func (*QueryLoanAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{26}
}
func (m *QueryLoanAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanAuthorizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanAuthorizationRequest.Merge(m, src)
}
func (m *QueryLoanAuthorizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanAuthorizationRequest proto.InternalMessageInfo

func (m *QueryLoanAuthorizationRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *QueryLoanAuthorizationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryLoanAuthorizationResponse is response type for the Query/LoanAuthorization RPC method.
type QueryLoanAuthorizationResponse struct {
	Deposits []*DepositLog       `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
	Status   AuthorizationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=bitway.lending.AuthorizationStatus" json:"status,omitempty"`
}

func (m *QueryLoanAuthorizationResponse) Reset()         { *m = QueryLoanAuthorizationResponse{} }
func (m *QueryLoanAuthorizationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanAuthorizationResponse) ProtoMessage()    {}
func (*QueryLoanAuthorizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{27}
}
func (m *QueryLoanAuthorizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanAuthorizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanAuthorizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanAuthorizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanAuthorizationResponse.Merge(m, src)
}
func (m *QueryLoanAuthorizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanAuthorizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanAuthorizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanAuthorizationResponse proto.InternalMessageInfo

func (m *QueryLoanAuthorizationResponse) GetDeposits() []*DepositLog {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryLoanAuthorizationResponse) GetStatus() AuthorizationStatus {
	if m != nil {
		return m.Status
	}
	return AuthorizationStatus_AUTHORIZATION_STATUS_PENDING
}

type QueryLoanDepositsRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryLoanDepositsRequest) Reset()         { *m = QueryLoanDepositsRequest{} }
func (m *QueryLoanDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanDepositsRequest) ProtoMessage()    {}
func (*QueryLoanDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{28}
}
func (m *QueryLoanDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanDepositsRequest.Merge(m, src)
}
func (m *QueryLoanDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanDepositsRequest proto.InternalMessageInfo

func (m *QueryLoanDepositsRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

type QueryLoanDepositsResponse struct {
	Deposits []*DepositLog `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *QueryLoanDepositsResponse) Reset()         { *m = QueryLoanDepositsResponse{} }
func (m *QueryLoanDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanDepositsResponse) ProtoMessage()    {}
func (*QueryLoanDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{29}
}
func (m *QueryLoanDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanDepositsResponse.Merge(m, src)
}
func (m *QueryLoanDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanDepositsResponse proto.InternalMessageInfo

func (m *QueryLoanDepositsResponse) GetDeposits() []*DepositLog {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// QueryRedemptionRequest is request type for the Query/Redemption RPC method.
type QueryRedemptionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRedemptionRequest) Reset()         { *m = QueryRedemptionRequest{} }
func (m *QueryRedemptionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRequest) ProtoMessage()    {}
func (*QueryRedemptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{30}
}
func (m *QueryRedemptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRequest.Merge(m, src)
}
func (m *QueryRedemptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRequest proto.InternalMessageInfo

func (m *QueryRedemptionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryRedemptionResponse is response type for the Query/Redemption RPC method.
type QueryRedemptionResponse struct {
	Redemption *Redemption `protobuf:"bytes,1,opt,name=redemption,proto3" json:"redemption,omitempty"`
}

func (m *QueryRedemptionResponse) Reset()         { *m = QueryRedemptionResponse{} }
func (m *QueryRedemptionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionResponse) ProtoMessage()    {}
func (*QueryRedemptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{31}
}
func (m *QueryRedemptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionResponse.Merge(m, src)
}
func (m *QueryRedemptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionResponse proto.InternalMessageInfo

func (m *QueryRedemptionResponse) GetRedemption() *Redemption {
	if m != nil {
		return m.Redemption
	}
	return nil
}

type QueryRepaymentRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryRepaymentRequest) Reset()         { *m = QueryRepaymentRequest{} }
func (m *QueryRepaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRepaymentRequest) ProtoMessage()    {}
func (*QueryRepaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{32}
}
func (m *QueryRepaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepaymentRequest.Merge(m, src)
}
func (m *QueryRepaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepaymentRequest proto.InternalMessageInfo

func (m *QueryRepaymentRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

type QueryRepaymentResponse struct {
	Repayment *Repayment `protobuf:"bytes,1,opt,name=repayment,proto3" json:"repayment,omitempty"`
}

func (m *QueryRepaymentResponse) Reset()         { *m = QueryRepaymentResponse{} }
func (m *QueryRepaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRepaymentResponse) ProtoMessage()    {}
func (*QueryRepaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{33}
}
func (m *QueryRepaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepaymentResponse.Merge(m, src)
}
func (m *QueryRepaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepaymentResponse proto.InternalMessageInfo

func (m *QueryRepaymentResponse) GetRepayment() *Repayment {
	if m != nil {
		return m.Repayment
	}
	return nil
}

type QueryCurrentInterestRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryCurrentInterestRequest) Reset()         { *m = QueryCurrentInterestRequest{} }
func (m *QueryCurrentInterestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentInterestRequest) ProtoMessage()    {}
func (*QueryCurrentInterestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{34}
}
func (m *QueryCurrentInterestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentInterestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentInterestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentInterestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentInterestRequest.Merge(m, src)
}
func (m *QueryCurrentInterestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentInterestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentInterestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentInterestRequest proto.InternalMessageInfo

func (m *QueryCurrentInterestRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

type QueryCurrentInterestResponse struct {
	Interest types.Coin `protobuf:"bytes,1,opt,name=interest,proto3" json:"interest"`
}

func (m *QueryCurrentInterestResponse) Reset()         { *m = QueryCurrentInterestResponse{} }
func (m *QueryCurrentInterestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentInterestResponse) ProtoMessage()    {}
func (*QueryCurrentInterestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{35}
}
func (m *QueryCurrentInterestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentInterestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentInterestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentInterestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentInterestResponse.Merge(m, src)
}
func (m *QueryCurrentInterestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentInterestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentInterestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentInterestResponse proto.InternalMessageInfo

func (m *QueryCurrentInterestResponse) GetInterest() types.Coin {
	if m != nil {
		return m.Interest
	}
	return types.Coin{}
}

type QueryReferrersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReferrersRequest) Reset()         { *m = QueryReferrersRequest{} }
func (m *QueryReferrersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReferrersRequest) ProtoMessage()    {}
func (*QueryReferrersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{36}
}
func (m *QueryReferrersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReferrersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReferrersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReferrersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReferrersRequest.Merge(m, src)
}
func (m *QueryReferrersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReferrersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReferrersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReferrersRequest proto.InternalMessageInfo

func (m *QueryReferrersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryReferrersResponse struct {
	Referrers  []*Referrer         `protobuf:"bytes,1,rep,name=referrers,proto3" json:"referrers,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReferrersResponse) Reset()         { *m = QueryReferrersResponse{} }
func (m *QueryReferrersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReferrersResponse) ProtoMessage()    {}
func (*QueryReferrersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40ce891943d5751d, []int{37}
}
func (m *QueryReferrersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReferrersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReferrersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReferrersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReferrersResponse.Merge(m, src)
}
func (m *QueryReferrersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReferrersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReferrersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReferrersResponse proto.InternalMessageInfo

func (m *QueryReferrersResponse) GetReferrers() []*Referrer {
	if m != nil {
		return m.Referrers
	}
	return nil
}

func (m *QueryReferrersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolRequest)(nil), "bitway.lending.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "bitway.lending.QueryPoolResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "bitway.lending.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "bitway.lending.QueryPoolsResponse")
	proto.RegisterType((*QueryPoolExchangeRateRequest)(nil), "bitway.lending.QueryPoolExchangeRateRequest")
	proto.RegisterType((*QueryPoolExchangeRateResponse)(nil), "bitway.lending.QueryPoolExchangeRateResponse")
	proto.RegisterType((*QueryLiquidationPriceRequest)(nil), "bitway.lending.QueryLiquidationPriceRequest")
	proto.RegisterType((*QueryLiquidationPriceResponse)(nil), "bitway.lending.QueryLiquidationPriceResponse")
	proto.RegisterType((*QueryDlcEventCountRequest)(nil), "bitway.lending.QueryDlcEventCountRequest")
	proto.RegisterType((*QueryDlcEventCountResponse)(nil), "bitway.lending.QueryDlcEventCountResponse")
	proto.RegisterType((*QueryLoanCetInfosRequest)(nil), "bitway.lending.QueryLoanCetInfosRequest")
	proto.RegisterType((*QueryLoanCetInfosResponse)(nil), "bitway.lending.QueryLoanCetInfosResponse")
	proto.RegisterType((*QueryCollateralAddressRequest)(nil), "bitway.lending.QueryCollateralAddressRequest")
	proto.RegisterType((*QueryCollateralAddressResponse)(nil), "bitway.lending.QueryCollateralAddressResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "bitway.lending.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitway.lending.QueryParamsResponse")
	proto.RegisterType((*QueryLoanRequest)(nil), "bitway.lending.QueryLoanRequest")
	proto.RegisterType((*QueryLoanResponse)(nil), "bitway.lending.QueryLoanResponse")
	proto.RegisterType((*QueryLoansRequest)(nil), "bitway.lending.QueryLoansRequest")
	proto.RegisterType((*QueryLoansResponse)(nil), "bitway.lending.QueryLoansResponse")
	proto.RegisterType((*QueryLoansByAddressRequest)(nil), "bitway.lending.QueryLoansByAddressRequest")
	proto.RegisterType((*QueryLoansByAddressResponse)(nil), "bitway.lending.QueryLoansByAddressResponse")
	proto.RegisterType((*QueryLoansByOracleRequest)(nil), "bitway.lending.QueryLoansByOracleRequest")
	proto.RegisterType((*QueryLoansByOracleResponse)(nil), "bitway.lending.QueryLoansByOracleResponse")
	proto.RegisterType((*QueryLoanDlcMetaRequest)(nil), "bitway.lending.QueryLoanDlcMetaRequest")
	proto.RegisterType((*QueryLoanDlcMetaResponse)(nil), "bitway.lending.QueryLoanDlcMetaResponse")
	proto.RegisterType((*QueryLoanAuthorizationRequest)(nil), "bitway.lending.QueryLoanAuthorizationRequest")
	proto.RegisterType((*QueryLoanAuthorizationResponse)(nil), "bitway.lending.QueryLoanAuthorizationResponse")
	proto.RegisterType((*QueryLoanDepositsRequest)(nil), "bitway.lending.QueryLoanDepositsRequest")
	proto.RegisterType((*QueryLoanDepositsResponse)(nil), "bitway.lending.QueryLoanDepositsResponse")
	proto.RegisterType((*QueryRedemptionRequest)(nil), "bitway.lending.QueryRedemptionRequest")
	proto.RegisterType((*QueryRedemptionResponse)(nil), "bitway.lending.QueryRedemptionResponse")
	proto.RegisterType((*QueryRepaymentRequest)(nil), "bitway.lending.QueryRepaymentRequest")
	proto.RegisterType((*QueryRepaymentResponse)(nil), "bitway.lending.QueryRepaymentResponse")
	proto.RegisterType((*QueryCurrentInterestRequest)(nil), "bitway.lending.QueryCurrentInterestRequest")
	proto.RegisterType((*QueryCurrentInterestResponse)(nil), "bitway.lending.QueryCurrentInterestResponse")
	proto.RegisterType((*QueryReferrersRequest)(nil), "bitway.lending.QueryReferrersRequest")
	proto.RegisterType((*QueryReferrersResponse)(nil), "bitway.lending.QueryReferrersResponse")
}

func init() { proto.RegisterFile("bitway/lending/query.proto", fileDescriptor_40ce891943d5751d) }

var fileDescriptor_40ce891943d5751d = []byte{
	// 1783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5f, 0x6f, 0xd4, 0xc6,
	0x16, 0x8f, 0x37, 0x9b, 0x90, 0x0c, 0x49, 0x08, 0x73, 0x03, 0x49, 0x9c, 0xb0, 0x49, 0x9c, 0x4b,
	0xfe, 0x11, 0xd6, 0xb0, 0x20, 0x90, 0x40, 0xf7, 0x81, 0x24, 0x70, 0x6f, 0x44, 0xb8, 0x37, 0x2c,
	0xb7, 0x52, 0x55, 0x1e, 0xb6, 0xb3, 0xde, 0xc9, 0xc6, 0xaa, 0xd7, 0xb3, 0xb1, 0x67, 0x81, 0x2d,
	0xca, 0x0b, 0x2f, 0xf4, 0xcf, 0x03, 0xd0, 0xaa, 0x0f, 0xa5, 0x55, 0xdf, 0xfa, 0x05, 0xfa, 0x29,
	0x78, 0xa9, 0x84, 0xd4, 0x97, 0x3e, 0x21, 0x14, 0xfa, 0x41, 0x2a, 0xcf, 0x1c, 0x7b, 0x6d, 0xaf,
	0x9d, 0xdd, 0xd2, 0x48, 0x3c, 0xb1, 0x1e, 0xff, 0xce, 0x39, 0xbf, 0x39, 0x3e, 0x73, 0xe6, 0x77,
	0x02, 0x52, 0xcb, 0x26, 0x7f, 0x48, 0x9a, 0xba, 0x45, 0xed, 0x8a, 0x69, 0x57, 0xf5, 0xbd, 0x06,
	0x75, 0x9a, 0xf9, 0xba, 0xc3, 0x38, 0xc3, 0x23, 0xf2, 0x5d, 0x1e, 0xde, 0xa9, 0x63, 0x55, 0x56,
	0x65, 0xe2, 0x95, 0xee, 0xfd, 0x92, 0x28, 0x75, 0xba, 0xca, 0x58, 0xd5, 0xa2, 0x3a, 0xa9, 0x9b,
	0x3a, 0xb1, 0x6d, 0xc6, 0x09, 0x37, 0x99, 0xed, 0xc2, 0xdb, 0x15, 0x83, 0xb9, 0x35, 0xe6, 0xea,
	0x65, 0xe2, 0x52, 0xe9, 0x5c, 0x7f, 0x70, 0xb1, 0x4c, 0x39, 0xb9, 0xa8, 0xd7, 0x49, 0xd5, 0xb4,
	0x05, 0x18, 0xb0, 0xb9, 0x30, 0xd6, 0x47, 0x19, 0xcc, 0xf4, 0xdf, 0x4f, 0xc5, 0xb8, 0xd6, 0x89,
	0x43, 0x6a, 0x7e, 0xa0, 0xe9, 0xd8, 0x4b, 0xf8, 0x57, 0xbe, 0xd5, 0x34, 0x34, 0x7a, 0xd7, 0x0b,
	0xbe, 0xcd, 0x98, 0x55, 0xa4, 0x7b, 0x0d, 0xea, 0x72, 0x3c, 0x82, 0x32, 0x66, 0x65, 0x42, 0x99,
	0x55, 0x96, 0x06, 0x8b, 0x19, 0xb3, 0xa2, 0x6d, 0xa0, 0x93, 0x21, 0x8c, 0x5b, 0x67, 0xb6, 0x4b,
	0xb1, 0x8e, 0xb2, 0x75, 0xc6, 0x2c, 0x01, 0x3b, 0x5e, 0x98, 0xca, 0x47, 0x53, 0x92, 0xdf, 0x92,
	0xff, 0x0a, 0x13, 0x01, 0xd4, 0xee, 0x87, 0xbc, 0xb8, 0x7e, 0xa8, 0x5b, 0x08, 0xb5, 0x76, 0x0b,
	0xbe, 0x16, 0xf2, 0x72, 0xbb, 0x79, 0x6f, 0xbb, 0x79, 0x99, 0x77, 0xd8, 0x74, 0x7e, 0x9b, 0x54,
	0x29, 0xd8, 0x16, 0x43, 0x96, 0xda, 0x73, 0x05, 0xe1, 0xb0, 0x77, 0x20, 0x79, 0x11, 0xf5, 0x79,
	0xb1, 0xdd, 0x09, 0x65, 0xb6, 0xb7, 0x13, 0x4b, 0x89, 0xc4, 0xff, 0x8e, 0x30, 0xca, 0x08, 0x46,
	0x8b, 0x1d, 0x19, 0xc9, 0x78, 0x11, 0x4a, 0x57, 0xd1, 0x74, 0xc0, 0xe8, 0xe6, 0x23, 0x63, 0x97,
	0xd8, 0x55, 0x5a, 0x24, 0xdc, 0xa7, 0x8f, 0xc7, 0xd1, 0x31, 0x2f, 0x62, 0x29, 0x48, 0x75, 0xbf,
	0xf7, 0xb8, 0xe9, 0xa5, 0xfb, 0x4c, 0x8a, 0x21, 0xec, 0x6a, 0x1e, 0x0d, 0x53, 0x58, 0x2f, 0x39,
	0x84, 0x53, 0xb0, 0x1f, 0xa2, 0x21, 0xb0, 0xf6, 0xb3, 0x02, 0xf1, 0xb7, 0xcc, 0xbd, 0x86, 0x59,
	0x11, 0x9c, 0xb6, 0x1d, 0xd3, 0xe8, 0x18, 0x1f, 0x9f, 0x43, 0x27, 0x0d, 0x66, 0x59, 0x84, 0x53,
	0x87, 0x58, 0x25, 0x52, 0x63, 0x0d, 0x9b, 0x8b, 0x44, 0x0c, 0x16, 0x47, 0x5b, 0x2f, 0x6e, 0x88,
	0x75, 0x8f, 0x4b, 0x99, 0x39, 0x0e, 0x7b, 0xe8, 0x03, 0x7b, 0x25, 0x17, 0xb9, 0x08, 0x20, 0x15,
	0x0d, 0xd4, 0x08, 0x6f, 0x38, 0x26, 0x6f, 0x4e, 0x64, 0x67, 0x95, 0xa5, 0xde, 0x62, 0xf0, 0xac,
	0x6d, 0xc2, 0x6e, 0xdb, 0x69, 0xc2, 0x6e, 0xc7, 0x50, 0x5f, 0xdd, 0x5b, 0x00, 0x96, 0xf2, 0x01,
	0x63, 0x94, 0xad, 0x13, 0xd3, 0x01, 0x5e, 0xe2, 0xb7, 0x36, 0x85, 0x26, 0x85, 0xab, 0x0d, 0xcb,
	0xb8, 0xf9, 0x80, 0xda, 0x7c, 0xdd, 0x0b, 0x0e, 0xdb, 0xd5, 0x0a, 0x48, 0x4d, 0x7a, 0xd9, 0x0a,
	0x62, 0x08, 0xfa, 0x5e, 0x90, 0x6c, 0x51, 0x3e, 0x68, 0x9f, 0xa2, 0x09, 0xc9, 0x8d, 0x11, 0x7b,
	0x9d, 0xf2, 0x4d, 0x7b, 0x87, 0xb9, 0xa1, 0xf4, 0x59, 0x8c, 0xd8, 0xa1, 0xf4, 0x79, 0x8f, 0x7f,
	0x31, 0x7d, 0xda, 0xd3, 0x0c, 0x70, 0x8e, 0x86, 0x00, 0x56, 0x9b, 0x68, 0xcc, 0x6a, 0xa5, 0xa5,
	0x64, 0x50, 0x5e, 0x32, 0xed, 0x1d, 0x06, 0xe7, 0x64, 0x3c, 0x5e, 0xcd, 0x60, 0x5f, 0xc4, 0x21,
	0x23, 0x58, 0xc3, 0x1f, 0xa3, 0xe9, 0x0a, 0xdd, 0x21, 0x0d, 0x8b, 0x97, 0x12, 0x5d, 0x66, 0x0e,
	0x77, 0x39, 0x09, 0xc6, 0x5b, 0xed, 0x9e, 0x6f, 0x22, 0xec, 0xd0, 0x3a, 0x69, 0xd6, 0xa8, 0xcd,
	0x5b, 0xfe, 0x7a, 0x0f, 0xf7, 0x37, 0x1a, 0x98, 0xc0, 0x8a, 0xf6, 0xab, 0x02, 0x85, 0xb0, 0xde,
	0xca, 0x51, 0xa5, 0xe2, 0x50, 0x37, 0xc8, 0xf8, 0x22, 0x3a, 0x21, 0xab, 0x8a, 0x3a, 0xa5, 0x7a,
	0xa3, 0xfc, 0x19, 0x6d, 0x42, 0xe6, 0x47, 0xfc, 0xe5, 0x6d, 0xb1, 0x8a, 0x2f, 0xa0, 0xb1, 0x00,
	0x48, 0x1a, 0x7c, 0xd7, 0x47, 0xcb, 0x8f, 0x80, 0xfd, 0x77, 0x37, 0x1a, 0x7c, 0x17, 0x2c, 0x56,
	0x11, 0xaa, 0x18, 0x35, 0x1f, 0x27, 0x4a, 0x78, 0x6d, 0xf8, 0xe0, 0xcd, 0xcc, 0xe0, 0xc6, 0xfa,
	0x9d, 0xed, 0x46, 0xf9, 0x36, 0x6d, 0x16, 0x07, 0x2b, 0x46, 0x0d, 0xd0, 0xf3, 0x68, 0xd8, 0x2f,
	0xdf, 0x12, 0x37, 0x6b, 0x54, 0xd4, 0x74, 0xb6, 0x38, 0xe4, 0x2f, 0xfe, 0xdf, 0xac, 0x51, 0xed,
	0x1a, 0xca, 0xa5, 0x6d, 0x07, 0xbe, 0xee, 0x04, 0x3a, 0x46, 0xe4, 0x12, 0xec, 0xc3, 0x7f, 0xd4,
	0xc6, 0xfc, 0x66, 0x26, 0xfa, 0xb8, 0x5f, 0xc1, 0xb7, 0xd1, 0x3f, 0x22, 0xab, 0xe0, 0xe6, 0x32,
	0xea, 0x97, 0xfd, 0x1e, 0xca, 0xe2, 0x74, 0x3c, 0xe7, 0x12, 0xbf, 0x96, 0x7d, 0xf5, 0x66, 0xa6,
	0xa7, 0x08, 0xd8, 0xa0, 0xef, 0x7b, 0x75, 0x97, 0xd6, 0xf7, 0xff, 0x05, 0x1d, 0x5b, 0x62, 0x20,
	0xdc, 0x12, 0xca, 0x7a, 0x85, 0x0e, 0xc1, 0xc6, 0xda, 0x3a, 0xaa, 0x87, 0x15, 0x08, 0xed, 0x99,
	0x12, 0xb2, 0x0f, 0xbe, 0x62, 0x01, 0xf5, 0xbb, 0x9c, 0xf0, 0x86, 0xa4, 0x3b, 0x52, 0x50, 0x93,
	0x3c, 0xdc, 0x13, 0x88, 0x22, 0x20, 0x63, 0xb7, 0x44, 0xe6, 0xbd, 0x6f, 0x89, 0x2f, 0xfd, 0x5b,
	0x02, 0x18, 0xc1, 0x96, 0x56, 0x50, 0x9f, 0x47, 0xd8, 0xbf, 0x25, 0x92, 0xf7, 0x24, 0x21, 0x47,
	0x77, 0x3d, 0xfc, 0xa2, 0x40, 0x43, 0x12, 0x5c, 0xd6, 0x9a, 0xb1, 0x62, 0x4f, 0x2d, 0x8e, 0x50,
	0x02, 0x33, 0xef, 0x99, 0xc0, 0xde, 0xf7, 0x4e, 0xe0, 0x37, 0x0a, 0x9a, 0x4a, 0x24, 0xfd, 0x21,
	0x33, 0xf9, 0x85, 0x12, 0xea, 0xa1, 0xee, 0x5a, 0xf3, 0x7f, 0x0e, 0x31, 0xac, 0xe0, 0x9a, 0x9b,
	0x47, 0xc3, 0x4c, 0x2c, 0x44, 0x7b, 0xc6, 0x90, 0x5c, 0x84, 0x13, 0x7d, 0x54, 0x05, 0xf6, 0x22,
	0xf6, 0x51, 0x7d, 0x2a, 0x1f, 0x32, 0x3d, 0x05, 0x34, 0x1e, 0x50, 0xda, 0xb0, 0x8c, 0x3b, 0x94,
	0x93, 0x4e, 0x77, 0x98, 0xf6, 0xdf, 0xd0, 0xc5, 0x17, 0xd8, 0xc0, 0x26, 0x0a, 0x68, 0xa0, 0x62,
	0x19, 0xa5, 0x1a, 0xe5, 0x24, 0xed, 0x22, 0xda, 0xd8, 0x5a, 0x17, 0x26, 0xc7, 0x2a, 0xd2, 0x56,
	0xfb, 0x8f, 0x7f, 0xc9, 0x33, 0x62, 0x7b, 0x6d, 0x97, 0x39, 0xe6, 0xe7, 0x82, 0x5d, 0xc7, 0xdb,
	0x54, 0xf6, 0xa4, 0x8c, 0x68, 0xb0, 0x5e, 0x4f, 0xfa, 0x4e, 0x81, 0xbe, 0x9a, 0xe0, 0x0a, 0x08,
	0x5e, 0x41, 0x03, 0x15, 0x5a, 0x67, 0xae, 0xc9, 0xfd, 0x44, 0xb7, 0x1d, 0x91, 0x0d, 0xf9, 0x7e,
	0x8b, 0x55, 0x8b, 0x01, 0x16, 0x5f, 0x8f, 0x1d, 0xac, 0xf9, 0xb8, 0x55, 0x24, 0x5c, 0xf4, 0x84,
	0x69, 0x97, 0xc2, 0x19, 0x03, 0x8f, 0x1d, 0xd3, 0x7c, 0x2f, 0x54, 0xb8, 0x2d, 0xa3, 0xbf, 0xb7,
	0x0d, 0x6d, 0x09, 0x9d, 0x16, 0x4e, 0x8b, 0xb4, 0x42, 0x6b, 0xf5, 0x70, 0x92, 0x5b, 0xfd, 0x5d,
	0xe6, 0xf2, 0x23, 0xa8, 0x8c, 0x30, 0x12, 0x82, 0x5f, 0x43, 0xc8, 0x09, 0x56, 0xe1, 0x33, 0xb7,
	0x85, 0x0f, 0xd9, 0x85, 0xd0, 0xda, 0x05, 0x74, 0x0a, 0xdc, 0xc2, 0x15, 0xdf, 0x31, 0x0f, 0x77,
	0x03, 0xca, 0x81, 0x05, 0xf0, 0xb8, 0x8a, 0x06, 0x03, 0xa5, 0x00, 0x34, 0x26, 0xdb, 0x69, 0xf8,
	0x56, 0x2d, 0xac, 0x76, 0x05, 0x1a, 0xd5, 0x7a, 0xc3, 0x71, 0xa8, 0xcd, 0x37, 0x6d, 0x4e, 0x1d,
	0xef, 0xb4, 0x76, 0xa2, 0x72, 0x1f, 0x54, 0x73, 0x9b, 0x1d, 0x10, 0xba, 0x8e, 0x06, 0x4c, 0x58,
	0x0b, 0xf8, 0x84, 0x0f, 0xa5, 0x7f, 0x1c, 0xd7, 0x99, 0x69, 0xc3, 0x95, 0x1b, 0x18, 0x68, 0xa5,
	0x20, 0x33, 0x3b, 0xd4, 0x71, 0xa8, 0x73, 0xe4, 0x63, 0xd0, 0xf7, 0x4a, 0x90, 0xc9, 0x20, 0x42,
	0x50, 0x4e, 0x83, 0x8e, 0xbf, 0x08, 0xf5, 0x34, 0xd1, 0x9e, 0x49, 0x09, 0x28, 0xb6, 0xa0, 0x47,
	0xd6, 0x87, 0x0a, 0x6f, 0xc7, 0x50, 0x9f, 0xe0, 0x86, 0xf7, 0x50, 0xbf, 0xd4, 0x24, 0x58, 0x8b,
	0x33, 0x68, 0x97, 0x3d, 0xea, 0xfc, 0xa1, 0x18, 0x19, 0x48, 0xcb, 0x3d, 0xf9, 0xed, 0x8f, 0x6f,
	0x33, 0x13, 0xf8, 0xb4, 0x9e, 0x38, 0x0a, 0x63, 0x86, 0xb2, 0xde, 0x38, 0x85, 0x67, 0x93, 0x9d,
	0xb5, 0x86, 0x5f, 0x75, 0xee, 0x10, 0x04, 0x04, 0xd3, 0x44, 0xb0, 0x69, 0xac, 0xb6, 0x05, 0xf3,
	0x26, 0x48, 0xfd, 0xb1, 0x59, 0xd9, 0xc7, 0x35, 0xd4, 0x27, 0x46, 0x51, 0x9c, 0xee, 0x2f, 0xd8,
	0xa1, 0x76, 0x18, 0x04, 0x62, 0x9e, 0x11, 0x31, 0xc7, 0xf1, 0xa9, 0xc4, 0x98, 0xf8, 0x07, 0x05,
	0x8d, 0xc6, 0xe7, 0x45, 0xbc, 0x9a, 0xea, 0x37, 0x61, 0x1e, 0x55, 0xcf, 0x77, 0x89, 0x06, 0x42,
	0x2b, 0x82, 0xd0, 0x3f, 0xb1, 0x96, 0x44, 0x48, 0x8f, 0xcc, 0xa7, 0xf8, 0x27, 0x05, 0x9d, 0x6c,
	0xd3, 0xc1, 0x38, 0x39, 0x60, 0x9a, 0xfc, 0x57, 0xf3, 0xdd, 0xc2, 0x3b, 0x11, 0x6c, 0x0d, 0x61,
	0xba, 0xaf, 0xa9, 0x5e, 0x2a, 0x68, 0x34, 0x3e, 0x80, 0xa6, 0xa4, 0x2f, 0x65, 0x9c, 0x4e, 0x49,
	0x5f, 0xda, 0x54, 0xab, 0x2d, 0x0b, 0x76, 0xf3, 0x78, 0x2e, 0xce, 0x2e, 0x34, 0x9d, 0xe9, 0x72,
	0xd4, 0x7d, 0xa6, 0xa0, 0xe1, 0xc8, 0xd4, 0x8a, 0x97, 0x13, 0x63, 0x25, 0x8d, 0xbd, 0xea, 0x4a,
	0x37, 0x50, 0xe0, 0xb4, 0x28, 0x38, 0xcd, 0xe1, 0x99, 0x38, 0xa7, 0x8a, 0x65, 0xe8, 0xd4, 0xc3,
	0xeb, 0x62, 0x2e, 0xf6, 0x4e, 0x93, 0x77, 0x65, 0xa5, 0x9c, 0xa6, 0xd0, 0x48, 0x91, 0x72, 0x9a,
	0xc2, 0x03, 0x45, 0xfa, 0x69, 0x12, 0x3a, 0x28, 0x38, 0x4d, 0x42, 0x51, 0xe1, 0x74, 0x7f, 0x1d,
	0x4e, 0x53, 0x44, 0xf1, 0xa7, 0x9f, 0x26, 0xa9, 0xbd, 0x5e, 0x2a, 0x68, 0x24, 0xaa, 0x70, 0xf1,
	0x4a, 0xba, 0xd7, 0xb8, 0x76, 0x57, 0xcf, 0x75, 0x85, 0x05, 0x2a, 0xba, 0xa0, 0xb2, 0x8c, 0x17,
	0x93, 0xb7, 0x0f, 0x15, 0xaa, 0x3f, 0x86, 0x1f, 0xfb, 0xf8, 0x47, 0x05, 0x0d, 0x47, 0xe4, 0x65,
	0x4a, 0x39, 0x24, 0xa9, 0x61, 0x75, 0xa5, 0x1b, 0x28, 0x30, 0xbb, 0x2c, 0x98, 0xe5, 0xf1, 0x6a,
	0x32, 0x33, 0x29, 0xa0, 0xf5, 0xc7, 0x11, 0x75, 0xbd, 0x8f, 0xbf, 0x56, 0xd0, 0x50, 0xf8, 0x8f,
	0x19, 0x78, 0x29, 0x35, 0x64, 0xec, 0x4f, 0x2a, 0xea, 0x72, 0x17, 0x48, 0xe0, 0xb6, 0x20, 0xb8,
	0xcd, 0xe2, 0x5c, 0x12, 0x37, 0xdd, 0xa0, 0x5c, 0x37, 0x45, 0xf0, 0xa7, 0x0a, 0x3a, 0x1e, 0x12,
	0xb1, 0x78, 0x31, 0x35, 0x44, 0x54, 0x1a, 0xab, 0x4b, 0x9d, 0x81, 0x40, 0xe5, 0xac, 0xa0, 0x32,
	0x83, 0xcf, 0x24, 0x52, 0xf1, 0x8e, 0x8e, 0x27, 0x95, 0x45, 0x0f, 0x6c, 0xd3, 0xac, 0x29, 0x3d,
	0x30, 0x4d, 0x26, 0xa7, 0xf4, 0xc0, 0x54, 0x29, 0x9c, 0xde, 0x03, 0x05, 0x37, 0x12, 0xa1, 0xf2,
	0x15, 0x7c, 0x38, 0x5f, 0x88, 0x1e, 0xf2, 0xe1, 0x62, 0x02, 0xf7, 0x90, 0x0f, 0x17, 0x57, 0xb5,
	0x9d, 0xb2, 0xe5, 0xc7, 0x7e, 0xa1, 0x20, 0xd4, 0x92, 0x97, 0x78, 0x21, 0x31, 0x40, 0x9b, 0xc2,
	0x55, 0x17, 0x3b, 0xe2, 0x80, 0x46, 0x41, 0xd0, 0x58, 0xc5, 0x2b, 0xc9, 0xf5, 0xd3, 0xba, 0x21,
	0x5a, 0xba, 0x16, 0x3f, 0x51, 0xd0, 0x60, 0xa0, 0x35, 0xf1, 0xd9, 0x94, 0x50, 0x51, 0xcd, 0xab,
	0x2e, 0x74, 0x82, 0x75, 0x55, 0xd0, 0x81, 0xae, 0xf5, 0x2e, 0xfa, 0x13, 0x31, 0x6d, 0x8a, 0x93,
	0xfb, 0x4d, 0xb2, 0xf2, 0x55, 0x57, 0xbb, 0x03, 0x03, 0xad, 0xf3, 0x82, 0xd6, 0x22, 0x3e, 0x9b,
	0x9c, 0x27, 0x69, 0x55, 0xf2, 0x05, 0x2e, 0xde, 0xf7, 0x32, 0xe4, 0x2b, 0xc7, 0xb4, 0x0c, 0x45,
	0xb5, 0x6f, 0x6a, 0x86, 0x62, 0x02, 0x56, 0x9b, 0x13, 0x54, 0xa6, 0xf0, 0x64, 0x9c, 0x4a, 0xa0,
	0x55, 0xd7, 0x6e, 0xbd, 0x3a, 0xc8, 0x29, 0xaf, 0x0f, 0x72, 0xca, 0xdb, 0x83, 0x9c, 0xf2, 0xfc,
	0x5d, 0xae, 0xe7, 0xf5, 0xbb, 0x5c, 0xcf, 0xef, 0xef, 0x72, 0x3d, 0x9f, 0xac, 0x56, 0x4d, 0xbe,
	0xdb, 0x28, 0xe7, 0x0d, 0x56, 0x03, 0x73, 0x8b, 0x94, 0x5d, 0xdf, 0xd3, 0xa3, 0xc0, 0x17, 0x6f,
	0xd6, 0xa9, 0x5b, 0xee, 0x17, 0xff, 0x37, 0x72, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e,
	0x8c, 0x65, 0x8b, 0x04, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	PoolExchangeRate(ctx context.Context, in *QueryPoolExchangeRateRequest, opts ...grpc.CallOption) (*QueryPoolExchangeRateResponse, error)
	CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error)
	LiquidationPrice(ctx context.Context, in *QueryLiquidationPriceRequest, opts ...grpc.CallOption) (*QueryLiquidationPriceResponse, error)
	DlcEventCount(ctx context.Context, in *QueryDlcEventCountRequest, opts ...grpc.CallOption) (*QueryDlcEventCountResponse, error)
	Loan(ctx context.Context, in *QueryLoanRequest, opts ...grpc.CallOption) (*QueryLoanResponse, error)
	Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error)
	LoansByAddress(ctx context.Context, in *QueryLoansByAddressRequest, opts ...grpc.CallOption) (*QueryLoansByAddressResponse, error)
	LoansByOracle(ctx context.Context, in *QueryLoansByOracleRequest, opts ...grpc.CallOption) (*QueryLoansByOracleResponse, error)
	LoanCetInfos(ctx context.Context, in *QueryLoanCetInfosRequest, opts ...grpc.CallOption) (*QueryLoanCetInfosResponse, error)
	LoanDlcMeta(ctx context.Context, in *QueryLoanDlcMetaRequest, opts ...grpc.CallOption) (*QueryLoanDlcMetaResponse, error)
	LoanAuthorization(ctx context.Context, in *QueryLoanAuthorizationRequest, opts ...grpc.CallOption) (*QueryLoanAuthorizationResponse, error)
	LoanDeposits(ctx context.Context, in *QueryLoanDepositsRequest, opts ...grpc.CallOption) (*QueryLoanDepositsResponse, error)
	Redemption(ctx context.Context, in *QueryRedemptionRequest, opts ...grpc.CallOption) (*QueryRedemptionResponse, error)
	Repayment(ctx context.Context, in *QueryRepaymentRequest, opts ...grpc.CallOption) (*QueryRepaymentResponse, error)
	CurrentInterest(ctx context.Context, in *QueryCurrentInterestRequest, opts ...grpc.CallOption) (*QueryCurrentInterestResponse, error)
	Referrers(ctx context.Context, in *QueryReferrersRequest, opts ...grpc.CallOption) (*QueryReferrersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolExchangeRate(ctx context.Context, in *QueryPoolExchangeRateRequest, opts ...grpc.CallOption) (*QueryPoolExchangeRateResponse, error) {
	out := new(QueryPoolExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/PoolExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error) {
	out := new(QueryCollateralAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/CollateralAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationPrice(ctx context.Context, in *QueryLiquidationPriceRequest, opts ...grpc.CallOption) (*QueryLiquidationPriceResponse, error) {
	out := new(QueryLiquidationPriceResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LiquidationPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DlcEventCount(ctx context.Context, in *QueryDlcEventCountRequest, opts ...grpc.CallOption) (*QueryDlcEventCountResponse, error) {
	out := new(QueryDlcEventCountResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/DlcEventCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loan(ctx context.Context, in *QueryLoanRequest, opts ...grpc.CallOption) (*QueryLoanResponse, error) {
	out := new(QueryLoanResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Loan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error) {
	out := new(QueryLoansResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Loans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoansByAddress(ctx context.Context, in *QueryLoansByAddressRequest, opts ...grpc.CallOption) (*QueryLoansByAddressResponse, error) {
	out := new(QueryLoansByAddressResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoansByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoansByOracle(ctx context.Context, in *QueryLoansByOracleRequest, opts ...grpc.CallOption) (*QueryLoansByOracleResponse, error) {
	out := new(QueryLoansByOracleResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoansByOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanCetInfos(ctx context.Context, in *QueryLoanCetInfosRequest, opts ...grpc.CallOption) (*QueryLoanCetInfosResponse, error) {
	out := new(QueryLoanCetInfosResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoanCetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanDlcMeta(ctx context.Context, in *QueryLoanDlcMetaRequest, opts ...grpc.CallOption) (*QueryLoanDlcMetaResponse, error) {
	out := new(QueryLoanDlcMetaResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoanDlcMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanAuthorization(ctx context.Context, in *QueryLoanAuthorizationRequest, opts ...grpc.CallOption) (*QueryLoanAuthorizationResponse, error) {
	out := new(QueryLoanAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoanAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanDeposits(ctx context.Context, in *QueryLoanDepositsRequest, opts ...grpc.CallOption) (*QueryLoanDepositsResponse, error) {
	out := new(QueryLoanDepositsResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/LoanDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Redemption(ctx context.Context, in *QueryRedemptionRequest, opts ...grpc.CallOption) (*QueryRedemptionResponse, error) {
	out := new(QueryRedemptionResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Redemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Repayment(ctx context.Context, in *QueryRepaymentRequest, opts ...grpc.CallOption) (*QueryRepaymentResponse, error) {
	out := new(QueryRepaymentResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Repayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentInterest(ctx context.Context, in *QueryCurrentInterestRequest, opts ...grpc.CallOption) (*QueryCurrentInterestResponse, error) {
	out := new(QueryCurrentInterestResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/CurrentInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Referrers(ctx context.Context, in *QueryReferrersRequest, opts ...grpc.CallOption) (*QueryReferrersResponse, error) {
	out := new(QueryReferrersResponse)
	err := c.cc.Invoke(ctx, "/bitway.lending.Query/Referrers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	PoolExchangeRate(context.Context, *QueryPoolExchangeRateRequest) (*QueryPoolExchangeRateResponse, error)
	CollateralAddress(context.Context, *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error)
	LiquidationPrice(context.Context, *QueryLiquidationPriceRequest) (*QueryLiquidationPriceResponse, error)
	DlcEventCount(context.Context, *QueryDlcEventCountRequest) (*QueryDlcEventCountResponse, error)
	Loan(context.Context, *QueryLoanRequest) (*QueryLoanResponse, error)
	Loans(context.Context, *QueryLoansRequest) (*QueryLoansResponse, error)
	LoansByAddress(context.Context, *QueryLoansByAddressRequest) (*QueryLoansByAddressResponse, error)
	LoansByOracle(context.Context, *QueryLoansByOracleRequest) (*QueryLoansByOracleResponse, error)
	LoanCetInfos(context.Context, *QueryLoanCetInfosRequest) (*QueryLoanCetInfosResponse, error)
	LoanDlcMeta(context.Context, *QueryLoanDlcMetaRequest) (*QueryLoanDlcMetaResponse, error)
	LoanAuthorization(context.Context, *QueryLoanAuthorizationRequest) (*QueryLoanAuthorizationResponse, error)
	LoanDeposits(context.Context, *QueryLoanDepositsRequest) (*QueryLoanDepositsResponse, error)
	Redemption(context.Context, *QueryRedemptionRequest) (*QueryRedemptionResponse, error)
	Repayment(context.Context, *QueryRepaymentRequest) (*QueryRepaymentResponse, error)
	CurrentInterest(context.Context, *QueryCurrentInterestRequest) (*QueryCurrentInterestResponse, error)
	Referrers(context.Context, *QueryReferrersRequest) (*QueryReferrersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) PoolExchangeRate(ctx context.Context, req *QueryPoolExchangeRateRequest) (*QueryPoolExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExchangeRate not implemented")
}
func (*UnimplementedQueryServer) CollateralAddress(ctx context.Context, req *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralAddress not implemented")
}
func (*UnimplementedQueryServer) LiquidationPrice(ctx context.Context, req *QueryLiquidationPriceRequest) (*QueryLiquidationPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationPrice not implemented")
}
func (*UnimplementedQueryServer) DlcEventCount(ctx context.Context, req *QueryDlcEventCountRequest) (*QueryDlcEventCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DlcEventCount not implemented")
}
func (*UnimplementedQueryServer) Loan(ctx context.Context, req *QueryLoanRequest) (*QueryLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loan not implemented")
}
func (*UnimplementedQueryServer) Loans(ctx context.Context, req *QueryLoansRequest) (*QueryLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loans not implemented")
}
func (*UnimplementedQueryServer) LoansByAddress(ctx context.Context, req *QueryLoansByAddressRequest) (*QueryLoansByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoansByAddress not implemented")
}
func (*UnimplementedQueryServer) LoansByOracle(ctx context.Context, req *QueryLoansByOracleRequest) (*QueryLoansByOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoansByOracle not implemented")
}
func (*UnimplementedQueryServer) LoanCetInfos(ctx context.Context, req *QueryLoanCetInfosRequest) (*QueryLoanCetInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanCetInfos not implemented")
}
func (*UnimplementedQueryServer) LoanDlcMeta(ctx context.Context, req *QueryLoanDlcMetaRequest) (*QueryLoanDlcMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanDlcMeta not implemented")
}
func (*UnimplementedQueryServer) LoanAuthorization(ctx context.Context, req *QueryLoanAuthorizationRequest) (*QueryLoanAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAuthorization not implemented")
}
func (*UnimplementedQueryServer) LoanDeposits(ctx context.Context, req *QueryLoanDepositsRequest) (*QueryLoanDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanDeposits not implemented")
}
func (*UnimplementedQueryServer) Redemption(ctx context.Context, req *QueryRedemptionRequest) (*QueryRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redemption not implemented")
}
func (*UnimplementedQueryServer) Repayment(ctx context.Context, req *QueryRepaymentRequest) (*QueryRepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repayment not implemented")
}
func (*UnimplementedQueryServer) CurrentInterest(ctx context.Context, req *QueryCurrentInterestRequest) (*QueryCurrentInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentInterest not implemented")
}
func (*UnimplementedQueryServer) Referrers(ctx context.Context, req *QueryReferrersRequest) (*QueryReferrersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Referrers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/PoolExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolExchangeRate(ctx, req.(*QueryPoolExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/CollateralAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralAddress(ctx, req.(*QueryCollateralAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LiquidationPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationPrice(ctx, req.(*QueryLiquidationPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DlcEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDlcEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DlcEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/DlcEventCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DlcEventCount(ctx, req.(*QueryDlcEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Loan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loan(ctx, req.(*QueryLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Loans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loans(ctx, req.(*QueryLoansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoansByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoansByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoansByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoansByAddress(ctx, req.(*QueryLoansByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoansByOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansByOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoansByOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoansByOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoansByOracle(ctx, req.(*QueryLoansByOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanCetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanCetInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanCetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoanCetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanCetInfos(ctx, req.(*QueryLoanCetInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanDlcMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanDlcMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanDlcMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoanDlcMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanDlcMeta(ctx, req.(*QueryLoanDlcMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoanAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanAuthorization(ctx, req.(*QueryLoanAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/LoanDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanDeposits(ctx, req.(*QueryLoanDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Redemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Redemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Redemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Redemption(ctx, req.(*QueryRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Repayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Repayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Repayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Repayment(ctx, req.(*QueryRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/CurrentInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentInterest(ctx, req.(*QueryCurrentInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Referrers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReferrersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Referrers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitway.lending.Query/Referrers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Referrers(ctx, req.(*QueryReferrersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.lending.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "PoolExchangeRate",
			Handler:    _Query_PoolExchangeRate_Handler,
		},
		{
			MethodName: "CollateralAddress",
			Handler:    _Query_CollateralAddress_Handler,
		},
		{
			MethodName: "LiquidationPrice",
			Handler:    _Query_LiquidationPrice_Handler,
		},
		{
			MethodName: "DlcEventCount",
			Handler:    _Query_DlcEventCount_Handler,
		},
		{
			MethodName: "Loan",
			Handler:    _Query_Loan_Handler,
		},
		{
			MethodName: "Loans",
			Handler:    _Query_Loans_Handler,
		},
		{
			MethodName: "LoansByAddress",
			Handler:    _Query_LoansByAddress_Handler,
		},
		{
			MethodName: "LoansByOracle",
			Handler:    _Query_LoansByOracle_Handler,
		},
		{
			MethodName: "LoanCetInfos",
			Handler:    _Query_LoanCetInfos_Handler,
		},
		{
			MethodName: "LoanDlcMeta",
			Handler:    _Query_LoanDlcMeta_Handler,
		},
		{
			MethodName: "LoanAuthorization",
			Handler:    _Query_LoanAuthorization_Handler,
		},
		{
			MethodName: "LoanDeposits",
			Handler:    _Query_LoanDeposits_Handler,
		},
		{
			MethodName: "Redemption",
			Handler:    _Query_Redemption_Handler,
		},
		{
			MethodName: "Repayment",
			Handler:    _Query_Repayment_Handler,
		},
		{
			MethodName: "CurrentInterest",
			Handler:    _Query_CurrentInterest_Handler,
		},
		{
			MethodName: "Referrers",
			Handler:    _Query_Referrers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/lending/query.proto",
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		i -= len(m.ExchangeRate)
		copy(dAtA[i:], m.ExchangeRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExchangeRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maturity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Maturity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BorrowAmount) > 0 {
		i -= len(m.BorrowAmount)
		copy(dAtA[i:], m.BorrowAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollateralAmount) > 0 {
		i -= len(m.CollateralAmount)
		copy(dAtA[i:], m.CollateralAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDlcEventCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDlcEventCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDlcEventCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDlcEventCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDlcEventCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDlcEventCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanCetInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanCetInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanCetInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralAmount) > 0 {
		i -= len(m.CollateralAmount)
		copy(dAtA[i:], m.CollateralAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanCetInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanCetInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanCetInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepaymentCetInfo != nil {
		{
			size, err := m.RepaymentCetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DefaultLiquidationCetInfo != nil {
		{
			size, err := m.DefaultLiquidationCetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LiquidationCetInfo != nil {
		{
			size, err := m.LiquidationCetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaturityTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaturityTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DCMPubKey) > 0 {
		i -= len(m.DCMPubKey)
		copy(dAtA[i:], m.DCMPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DCMPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BorrowerAuthPubkey) > 0 {
		i -= len(m.BorrowerAuthPubkey)
		copy(dAtA[i:], m.BorrowerAuthPubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowerAuthPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BorrowerPubkey) > 0 {
		i -= len(m.BorrowerPubkey)
		copy(dAtA[i:], m.BorrowerPubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowerPubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLoanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Loan != nil {
		{
			size, err := m.Loan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansByOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansByOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansByOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OraclePubkey) > 0 {
		i -= len(m.OraclePubkey)
		copy(dAtA[i:], m.OraclePubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OraclePubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansByOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansByOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansByOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanDlcMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanDlcMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanDlcMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanDlcMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanDlcMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanDlcMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DlcMeta != nil {
		{
			size, err := m.DlcMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanAuthorizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanAuthorizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanAuthorizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanAuthorizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanAuthorizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanAuthorizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Redemption != nil {
		{
			size, err := m.Redemption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Repayment != nil {
		{
			size, err := m.Repayment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentInterestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentInterestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentInterestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentInterestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentInterestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentInterestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Interest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReferrersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReferrersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReferrersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReferrersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReferrersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReferrersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Referrers) > 0 {
		for iNdEx := len(m.Referrers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Referrers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExchangeRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollateralAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BorrowAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Maturity != 0 {
		n += 1 + sovQuery(uint64(m.Maturity))
	}
	return n
}

func (m *QueryLiquidationPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDlcEventCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDlcEventCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryLoanCetInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollateralAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanCetInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidationCetInfo != nil {
		l = m.LiquidationCetInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DefaultLiquidationCetInfo != nil {
		l = m.DefaultLiquidationCetInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RepaymentCetInfo != nil {
		l = m.RepaymentCetInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollateralAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorrowerPubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BorrowerAuthPubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DCMPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MaturityTime != 0 {
		n += 1 + sovQuery(uint64(m.MaturityTime))
	}
	return n
}

func (m *QueryCollateralAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLoanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Loan != nil {
		l = m.Loan.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansByOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OraclePubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoansByOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanDlcMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanDlcMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DlcMeta != nil {
		l = m.DlcMeta.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanAuthorizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLoanAuthorizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryLoanDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRedemptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRedemptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Redemption != nil {
		l = m.Redemption.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repayment != nil {
		l = m.Repayment.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentInterestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentInterestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Interest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReferrersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReferrersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Referrers) > 0 {
		for _, e := range m.Referrers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &LendingPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &LendingPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maturity", wireType)
			}
			m.Maturity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maturity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDlcEventCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDlcEventCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDlcEventCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDlcEventCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDlcEventCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDlcEventCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanCetInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanCetInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanCetInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanCetInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanCetInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanCetInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationCetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidationCetInfo == nil {
				m.LiquidationCetInfo = &CetInfo{}
			}
			if err := m.LiquidationCetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLiquidationCetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultLiquidationCetInfo == nil {
				m.DefaultLiquidationCetInfo = &CetInfo{}
			}
			if err := m.DefaultLiquidationCetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepaymentCetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepaymentCetInfo == nil {
				m.RepaymentCetInfo = &CetInfo{}
			}
			if err := m.RepaymentCetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowerPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowerPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowerAuthPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowerAuthPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DCMPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DCMPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			m.MaturityTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loan == nil {
				m.Loan = &Loan{}
			}
			if err := m.Loan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LoanStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LoanStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansByOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansByOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansByOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansByOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansByOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansByOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanDlcMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanDlcMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanDlcMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanDlcMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanDlcMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanDlcMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlcMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DlcMeta == nil {
				m.DlcMeta = &DLCMeta{}
			}
			if err := m.DlcMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanAuthorizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanAuthorizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanAuthorizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanAuthorizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanAuthorizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanAuthorizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &DepositLog{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuthorizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &DepositLog{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redemption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Redemption == nil {
				m.Redemption = &Redemption{}
			}
			if err := m.Redemption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repayment == nil {
				m.Repayment = &Repayment{}
			}
			if err := m.Repayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentInterestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentInterestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentInterestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentInterestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentInterestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentInterestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReferrersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReferrersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReferrersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReferrersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReferrersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReferrersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referrers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referrers = append(m.Referrers, &Referrer{})
			if err := m.Referrers[len(m.Referrers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
