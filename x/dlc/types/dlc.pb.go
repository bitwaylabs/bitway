// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitway/dlc/dlc.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DLCOracleStatus int32

const (
	DLCOracleStatus_Oracle_status_Enable  DLCOracleStatus = 0
	DLCOracleStatus_Oracle_status_Disable DLCOracleStatus = 1
)

var DLCOracleStatus_name = map[int32]string{
	0: "Oracle_status_Enable",
	1: "Oracle_status_Disable",
}

var DLCOracleStatus_value = map[string]int32{
	"Oracle_status_Enable":  0,
	"Oracle_status_Disable": 1,
}

func (x DLCOracleStatus) String() string {
	return proto.EnumName(DLCOracleStatus_name, int32(x))
}

func (DLCOracleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{0}
}

type DCMStatus int32

const (
	DCMStatus_DCM_status_Enable  DCMStatus = 0
	DCMStatus_DCM_status_Disable DCMStatus = 1
)

var DCMStatus_name = map[int32]string{
	0: "DCM_status_Enable",
	1: "DCM_status_Disable",
}

var DCMStatus_value = map[string]int32{
	"DCM_status_Enable":  0,
	"DCM_status_Disable": 1,
}

func (x DCMStatus) String() string {
	return proto.EnumName(DCMStatus_name, int32(x))
}

func (DCMStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{1}
}

type DlcEventType int32

const (
	DlcEventType_UNSPECIFIED DlcEventType = 0
	DlcEventType_PRICE       DlcEventType = 1
	DlcEventType_DATE        DlcEventType = 2
	DlcEventType_LENDING     DlcEventType = 3
)

var DlcEventType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PRICE",
	2: "DATE",
	3: "LENDING",
}

var DlcEventType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"PRICE":       1,
	"DATE":        2,
	"LENDING":     3,
}

func (x DlcEventType) String() string {
	return proto.EnumName(DlcEventType_name, int32(x))
}

func (DlcEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{2}
}

// Signing intent
type SigningIntent int32

const (
	SigningIntent_SIGNING_INTENT_DEFAULT SigningIntent = 0
)

var SigningIntent_name = map[int32]string{
	0: "SIGNING_INTENT_DEFAULT",
}

var SigningIntent_value = map[string]int32{
	"SIGNING_INTENT_DEFAULT": 0,
}

func (x SigningIntent) String() string {
	return proto.EnumName(SigningIntent_name, int32(x))
}

func (SigningIntent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{3}
}

// DKG intent
type DKGIntent int32

const (
	DKGIntent_DKG_INTENT_DEFAULT             DKGIntent = 0
	DKGIntent_DKG_INTENT_PRICE_EVENT_NONCE   DKGIntent = 10000
	DKGIntent_DKG_INTENT_DATE_EVENT_NONCE    DKGIntent = 20000
	DKGIntent_DKG_INTENT_LENDING_EVENT_NONCE DKGIntent = 30000
)

var DKGIntent_name = map[int32]string{
	0:     "DKG_INTENT_DEFAULT",
	10000: "DKG_INTENT_PRICE_EVENT_NONCE",
	20000: "DKG_INTENT_DATE_EVENT_NONCE",
	30000: "DKG_INTENT_LENDING_EVENT_NONCE",
}

var DKGIntent_value = map[string]int32{
	"DKG_INTENT_DEFAULT":             0,
	"DKG_INTENT_PRICE_EVENT_NONCE":   10000,
	"DKG_INTENT_DATE_EVENT_NONCE":    20000,
	"DKG_INTENT_LENDING_EVENT_NONCE": 30000,
}

func (x DKGIntent) String() string {
	return proto.EnumName(DKGIntent_name, int32(x))
}

func (DKGIntent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{4}
}

type DLCOracle struct {
	Id         uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DkgId      uint64          `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	Desc       string          `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Pubkey     string          `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	NonceIndex uint64          `protobuf:"varint,5,opt,name=nonce_index,json=nonceIndex,proto3" json:"nonce_index,omitempty"`
	Time       time.Time       `protobuf:"bytes,6,opt,name=time,proto3,stdtime" json:"time"`
	Status     DLCOracleStatus `protobuf:"varint,7,opt,name=status,proto3,enum=bitway.dlc.DLCOracleStatus" json:"status,omitempty"`
}

func (m *DLCOracle) Reset()         { *m = DLCOracle{} }
func (m *DLCOracle) String() string { return proto.CompactTextString(m) }
func (*DLCOracle) ProtoMessage()    {}
func (*DLCOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{0}
}
func (m *DLCOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCOracle.Merge(m, src)
}
func (m *DLCOracle) XXX_Size() int {
	return m.Size()
}
func (m *DLCOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCOracle.DiscardUnknown(m)
}

var xxx_messageInfo_DLCOracle proto.InternalMessageInfo

func (m *DLCOracle) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCOracle) GetDkgId() uint64 {
	if m != nil {
		return m.DkgId
	}
	return 0
}

func (m *DLCOracle) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DLCOracle) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCOracle) GetNonceIndex() uint64 {
	if m != nil {
		return m.NonceIndex
	}
	return 0
}

func (m *DLCOracle) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *DLCOracle) GetStatus() DLCOracleStatus {
	if m != nil {
		return m.Status
	}
	return DLCOracleStatus_Oracle_status_Enable
}

type DCM struct {
	Id     uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DkgId  uint64    `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	Desc   string    `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Pubkey string    `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Time   time.Time `protobuf:"bytes,5,opt,name=time,proto3,stdtime" json:"time"`
	Status DCMStatus `protobuf:"varint,6,opt,name=status,proto3,enum=bitway.dlc.DCMStatus" json:"status,omitempty"`
}

func (m *DCM) Reset()         { *m = DCM{} }
func (m *DCM) String() string { return proto.CompactTextString(m) }
func (*DCM) ProtoMessage()    {}
func (*DCM) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{1}
}
func (m *DCM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DCM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DCM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DCM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DCM.Merge(m, src)
}
func (m *DCM) XXX_Size() int {
	return m.Size()
}
func (m *DCM) XXX_DiscardUnknown() {
	xxx_messageInfo_DCM.DiscardUnknown(m)
}

var xxx_messageInfo_DCM proto.InternalMessageInfo

func (m *DCM) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DCM) GetDkgId() uint64 {
	if m != nil {
		return m.DkgId
	}
	return 0
}

func (m *DCM) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DCM) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DCM) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *DCM) GetStatus() DCMStatus {
	if m != nil {
		return m.Status
	}
	return DCMStatus_DCM_status_Enable
}

type DLCNonce struct {
	Index        uint64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Nonce        string    `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OraclePubkey string    `protobuf:"bytes,3,opt,name=oracle_pubkey,json=oraclePubkey,proto3" json:"oracle_pubkey,omitempty"`
	Time         time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *DLCNonce) Reset()         { *m = DLCNonce{} }
func (m *DLCNonce) String() string { return proto.CompactTextString(m) }
func (*DLCNonce) ProtoMessage()    {}
func (*DLCNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{2}
}
func (m *DLCNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCNonce.Merge(m, src)
}
func (m *DLCNonce) XXX_Size() int {
	return m.Size()
}
func (m *DLCNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCNonce.DiscardUnknown(m)
}

var xxx_messageInfo_DLCNonce proto.InternalMessageInfo

func (m *DLCNonce) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DLCNonce) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *DLCNonce) GetOraclePubkey() string {
	if m != nil {
		return m.OraclePubkey
	}
	return ""
}

func (m *DLCNonce) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

type DLCEvent struct {
	Id           uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         DlcEventType `protobuf:"varint,2,opt,name=type,proto3,enum=bitway.dlc.DlcEventType" json:"type,omitempty"`
	Nonce        string       `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pubkey       string       `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Description  string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Outcomes     []string     `protobuf:"bytes,6,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
	HasTriggered bool         `protobuf:"varint,7,opt,name=has_triggered,json=hasTriggered,proto3" json:"has_triggered,omitempty"`
	OutcomeIndex int32        `protobuf:"varint,8,opt,name=outcome_index,json=outcomeIndex,proto3" json:"outcome_index,omitempty"`
	PublishAt    time.Time    `protobuf:"bytes,9,opt,name=publish_at,json=publishAt,proto3,stdtime" json:"publish_at"`
	TriggerAt    time.Time    `protobuf:"bytes,10,opt,name=trigger_at,json=triggerAt,proto3,stdtime" json:"trigger_at"`
}

func (m *DLCEvent) Reset()         { *m = DLCEvent{} }
func (m *DLCEvent) String() string { return proto.CompactTextString(m) }
func (*DLCEvent) ProtoMessage()    {}
func (*DLCEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{3}
}
func (m *DLCEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCEvent.Merge(m, src)
}
func (m *DLCEvent) XXX_Size() int {
	return m.Size()
}
func (m *DLCEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DLCEvent proto.InternalMessageInfo

func (m *DLCEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCEvent) GetType() DlcEventType {
	if m != nil {
		return m.Type
	}
	return DlcEventType_UNSPECIFIED
}

func (m *DLCEvent) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *DLCEvent) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCEvent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DLCEvent) GetOutcomes() []string {
	if m != nil {
		return m.Outcomes
	}
	return nil
}

func (m *DLCEvent) GetHasTriggered() bool {
	if m != nil {
		return m.HasTriggered
	}
	return false
}

func (m *DLCEvent) GetOutcomeIndex() int32 {
	if m != nil {
		return m.OutcomeIndex
	}
	return 0
}

func (m *DLCEvent) GetPublishAt() time.Time {
	if m != nil {
		return m.PublishAt
	}
	return time.Time{}
}

func (m *DLCEvent) GetTriggerAt() time.Time {
	if m != nil {
		return m.TriggerAt
	}
	return time.Time{}
}

type DLCAttestation struct {
	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId   uint64    `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Outcome   string    `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Pubkey    string    `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature string    `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Time      time.Time `protobuf:"bytes,6,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *DLCAttestation) Reset()         { *m = DLCAttestation{} }
func (m *DLCAttestation) String() string { return proto.CompactTextString(m) }
func (*DLCAttestation) ProtoMessage()    {}
func (*DLCAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{4}
}
func (m *DLCAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCAttestation.Merge(m, src)
}
func (m *DLCAttestation) XXX_Size() int {
	return m.Size()
}
func (m *DLCAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_DLCAttestation proto.InternalMessageInfo

func (m *DLCAttestation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCAttestation) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *DLCAttestation) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *DLCAttestation) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCAttestation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *DLCAttestation) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

// Oracle participant liveness
type OracleParticipantLiveness struct {
	// consensus pub key
	ConsensusPubkey string `protobuf:"bytes,1,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// Indicates if the participant is alive
	IsAlive bool `protobuf:"varint,2,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	// Id of the last participating DKG
	LastDkgId uint64 `protobuf:"varint,3,opt,name=last_dkg_id,json=lastDkgId,proto3" json:"last_dkg_id,omitempty"`
	// last block height at which the participant was active
	LastBlockHeight int64 `protobuf:"varint,4,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (m *OracleParticipantLiveness) Reset()         { *m = OracleParticipantLiveness{} }
func (m *OracleParticipantLiveness) String() string { return proto.CompactTextString(m) }
func (*OracleParticipantLiveness) ProtoMessage()    {}
func (*OracleParticipantLiveness) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b03a8bd95e97a4c, []int{5}
}
func (m *OracleParticipantLiveness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleParticipantLiveness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleParticipantLiveness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleParticipantLiveness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleParticipantLiveness.Merge(m, src)
}
func (m *OracleParticipantLiveness) XXX_Size() int {
	return m.Size()
}
func (m *OracleParticipantLiveness) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleParticipantLiveness.DiscardUnknown(m)
}

var xxx_messageInfo_OracleParticipantLiveness proto.InternalMessageInfo

func (m *OracleParticipantLiveness) GetConsensusPubkey() string {
	if m != nil {
		return m.ConsensusPubkey
	}
	return ""
}

func (m *OracleParticipantLiveness) GetIsAlive() bool {
	if m != nil {
		return m.IsAlive
	}
	return false
}

func (m *OracleParticipantLiveness) GetLastDkgId() uint64 {
	if m != nil {
		return m.LastDkgId
	}
	return 0
}

func (m *OracleParticipantLiveness) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("bitway.dlc.DLCOracleStatus", DLCOracleStatus_name, DLCOracleStatus_value)
	proto.RegisterEnum("bitway.dlc.DCMStatus", DCMStatus_name, DCMStatus_value)
	proto.RegisterEnum("bitway.dlc.DlcEventType", DlcEventType_name, DlcEventType_value)
	proto.RegisterEnum("bitway.dlc.SigningIntent", SigningIntent_name, SigningIntent_value)
	proto.RegisterEnum("bitway.dlc.DKGIntent", DKGIntent_name, DKGIntent_value)
	proto.RegisterType((*DLCOracle)(nil), "bitway.dlc.DLCOracle")
	proto.RegisterType((*DCM)(nil), "bitway.dlc.DCM")
	proto.RegisterType((*DLCNonce)(nil), "bitway.dlc.DLCNonce")
	proto.RegisterType((*DLCEvent)(nil), "bitway.dlc.DLCEvent")
	proto.RegisterType((*DLCAttestation)(nil), "bitway.dlc.DLCAttestation")
	proto.RegisterType((*OracleParticipantLiveness)(nil), "bitway.dlc.OracleParticipantLiveness")
}

func init() { proto.RegisterFile("bitway/dlc/dlc.proto", fileDescriptor_1b03a8bd95e97a4c) }

var fileDescriptor_1b03a8bd95e97a4c = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xbd, 0x6e, 0xe3, 0x46,
	0x17, 0xd5, 0x58, 0xbf, 0xbc, 0xf2, 0xda, 0xda, 0x81, 0x6d, 0xd0, 0xda, 0x85, 0xac, 0xd5, 0xf7,
	0x15, 0x8a, 0x92, 0x48, 0x80, 0xb7, 0x09, 0xd2, 0xc9, 0x24, 0xed, 0x10, 0x2b, 0x73, 0x0d, 0x5a,
	0x9b, 0x22, 0x0d, 0x41, 0x91, 0x13, 0x6a, 0x60, 0x9a, 0x14, 0x34, 0x23, 0x67, 0xfd, 0x06, 0xe9,
	0xe2, 0x26, 0x5d, 0x8a, 0xbc, 0x40, 0x80, 0xbc, 0x42, 0x8a, 0x00, 0x5b, 0x6e, 0x99, 0x2a, 0x09,
	0xec, 0x2e, 0x45, 0x9e, 0x21, 0x98, 0x19, 0xea, 0xcf, 0xc6, 0x16, 0x0e, 0x90, 0x42, 0xc0, 0xdc,
	0x33, 0xf7, 0x8e, 0xce, 0x39, 0x73, 0xef, 0x10, 0x76, 0x46, 0x94, 0x7f, 0xe3, 0x5f, 0xf7, 0xc2,
	0x38, 0x10, 0xbf, 0xee, 0x64, 0x9a, 0xf2, 0x14, 0x83, 0x42, 0xbb, 0x61, 0x1c, 0xd4, 0x77, 0xa2,
	0x34, 0x4a, 0x25, 0xdc, 0x13, 0x2b, 0x95, 0x51, 0x3f, 0x88, 0xd2, 0x34, 0x8a, 0x49, 0x4f, 0x46,
	0xa3, 0xd9, 0xd7, 0x3d, 0x4e, 0x2f, 0x09, 0xe3, 0xfe, 0xe5, 0x44, 0x25, 0xb4, 0xfe, 0x46, 0xa0,
	0x99, 0x03, 0xe3, 0xf5, 0xd4, 0x0f, 0x62, 0x82, 0xb7, 0x60, 0x83, 0x86, 0x3a, 0x6a, 0xa2, 0x76,
	0xc1, 0xdd, 0xa0, 0x21, 0xde, 0x85, 0x52, 0x78, 0x11, 0x79, 0x34, 0xd4, 0x37, 0x24, 0x56, 0x0c,
	0x2f, 0x22, 0x3b, 0xc4, 0x18, 0x0a, 0x21, 0x61, 0x81, 0x9e, 0x6f, 0xa2, 0xb6, 0xe6, 0xca, 0x35,
	0xde, 0x83, 0xd2, 0x64, 0x36, 0xba, 0x20, 0xd7, 0x7a, 0x41, 0xa2, 0x59, 0x84, 0x0f, 0xa0, 0x9a,
	0xa4, 0x49, 0x40, 0x3c, 0x9a, 0x84, 0xe4, 0xad, 0x5e, 0x94, 0xe7, 0x80, 0x84, 0x6c, 0x81, 0xe0,
	0xcf, 0xa0, 0x20, 0x48, 0xe9, 0xa5, 0x26, 0x6a, 0x57, 0x0f, 0xeb, 0x5d, 0xc5, 0xb8, 0x3b, 0x67,
	0xdc, 0x1d, 0xce, 0x19, 0x1f, 0x55, 0xde, 0xfd, 0x7e, 0x90, 0xbb, 0xf9, 0xe3, 0x00, 0xb9, 0xb2,
	0x02, 0xbf, 0x84, 0x12, 0xe3, 0x3e, 0x9f, 0x31, 0xbd, 0xdc, 0x44, 0xed, 0xad, 0xc3, 0x67, 0xdd,
	0xa5, 0x1f, 0xdd, 0x85, 0xa8, 0x73, 0x99, 0xe2, 0x66, 0xa9, 0xad, 0x5f, 0x10, 0xe4, 0x4d, 0xe3,
	0xf4, 0xbf, 0x90, 0x3a, 0x57, 0x52, 0x7c, 0xb4, 0x92, 0x4f, 0x17, 0x4a, 0x4a, 0x52, 0xc9, 0xee,
	0x9a, 0x12, 0xe3, 0xf4, 0x9e, 0x86, 0xef, 0x11, 0x54, 0xcc, 0x81, 0xe1, 0x08, 0x13, 0xf1, 0x0e,
	0x14, 0x95, 0xb5, 0x4a, 0x8b, 0x0a, 0x04, 0x2a, 0x3d, 0x96, 0x6a, 0x34, 0x57, 0x05, 0xf8, 0x7f,
	0xf0, 0x24, 0x95, 0xa6, 0x78, 0x99, 0x00, 0x25, 0x6b, 0x53, 0x81, 0x67, 0xeb, 0x32, 0x0a, 0x8f,
	0x95, 0xd1, 0xfa, 0x36, 0x2f, 0x79, 0x59, 0x57, 0x24, 0xe1, 0x0f, 0x0c, 0xfe, 0x04, 0x0a, 0xfc,
	0x7a, 0xa2, 0x08, 0x6d, 0x1d, 0xea, 0x6b, 0x0a, 0xe3, 0x40, 0xd6, 0x0c, 0xaf, 0x27, 0xc4, 0x95,
	0x59, 0x4b, 0xfe, 0xf9, 0x55, 0xfe, 0x1f, 0x72, 0xbe, 0x09, 0x55, 0x71, 0x33, 0x53, 0x3a, 0xe1,
	0x34, 0x4d, 0xe4, 0x05, 0x68, 0xee, 0x2a, 0x84, 0xeb, 0x50, 0x49, 0x67, 0x3c, 0x48, 0x2f, 0x89,
	0xf0, 0x38, 0xdf, 0xd6, 0xdc, 0x45, 0x2c, 0x5c, 0x19, 0xfb, 0xcc, 0xe3, 0x53, 0x1a, 0x45, 0x64,
	0x4a, 0x42, 0xd9, 0x4e, 0x15, 0x77, 0x73, 0xec, 0xb3, 0xe1, 0x1c, 0x93, 0xd6, 0xa9, 0x82, 0xac,
	0x93, 0x2b, 0x4d, 0xd4, 0x2e, 0xba, 0x9b, 0x19, 0xa8, 0x7a, 0xd9, 0x00, 0x98, 0xcc, 0x46, 0x31,
	0x65, 0x63, 0xcf, 0xe7, 0xba, 0xf6, 0x08, 0x03, 0xb5, 0xac, 0xae, 0xcf, 0xc5, 0x21, 0x19, 0x15,
	0x71, 0x08, 0x3c, 0xe6, 0x90, 0xac, 0xae, 0xcf, 0x5b, 0xbf, 0x22, 0xd8, 0x32, 0x07, 0x46, 0x9f,
	0x73, 0x91, 0x25, 0x2d, 0xb8, 0x7f, 0x21, 0xfb, 0x50, 0x21, 0xc2, 0xf5, 0x65, 0xcf, 0x97, 0x65,
	0x6c, 0x87, 0x58, 0x87, 0x72, 0xa6, 0x2b, 0xf3, 0x7f, 0x1e, 0x7e, 0xf0, 0x06, 0x9e, 0x83, 0xc6,
	0x68, 0x94, 0xf8, 0x7c, 0x36, 0x25, 0x99, 0xff, 0x4b, 0xe0, 0xdf, 0xcf, 0x78, 0xeb, 0x27, 0x04,
	0xfb, 0x6a, 0x8e, 0xcf, 0xfc, 0x29, 0xa7, 0x01, 0x9d, 0xf8, 0x09, 0x1f, 0xd0, 0x2b, 0x92, 0x10,
	0xc6, 0xf0, 0x47, 0x50, 0x0b, 0xd2, 0x84, 0x91, 0x84, 0xcd, 0xd8, 0xbc, 0xa5, 0x91, 0xfc, 0xf3,
	0xed, 0x05, 0x9e, 0x75, 0xf5, 0x3e, 0x54, 0x28, 0xf3, 0xfc, 0x98, 0x5e, 0xa9, 0x16, 0xac, 0xb8,
	0x65, 0xca, 0xfa, 0x22, 0xc4, 0x0d, 0xa8, 0xc6, 0x3e, 0xe3, 0x5e, 0x36, 0xff, 0x79, 0xe9, 0x85,
	0x26, 0x20, 0x53, 0xbe, 0x01, 0x1d, 0x78, 0x2a, 0xf7, 0x47, 0x71, 0x1a, 0x5c, 0x78, 0x63, 0x42,
	0xa3, 0x31, 0x97, 0xf2, 0xf3, 0xee, 0xb6, 0xd8, 0x38, 0x12, 0xf8, 0x17, 0x12, 0xee, 0x1c, 0xc3,
	0xf6, 0xbd, 0x97, 0x07, 0xeb, 0xb0, 0xa3, 0x62, 0x4f, 0x8d, 0xaf, 0x67, 0x25, 0xfe, 0x28, 0x26,
	0xb5, 0x1c, 0xde, 0x87, 0xdd, 0xf5, 0x1d, 0x93, 0x32, 0xb9, 0x85, 0x3a, 0x9f, 0x83, 0xb6, 0x98,
	0x7b, 0xbc, 0x0b, 0x4f, 0x4d, 0xe3, 0xf4, 0x41, 0xf9, 0x1e, 0xe0, 0x15, 0x78, 0x59, 0xdb, 0x87,
	0xcd, 0xd5, 0x89, 0xc2, 0xdb, 0x50, 0x7d, 0xe3, 0x9c, 0x9f, 0x59, 0x86, 0x7d, 0x6c, 0x5b, 0x66,
	0x2d, 0x87, 0x35, 0x28, 0x9e, 0xb9, 0xb6, 0x61, 0xd5, 0x10, 0xae, 0x40, 0xc1, 0xec, 0x0f, 0xad,
	0xda, 0x06, 0xae, 0x42, 0x79, 0x60, 0x39, 0xa6, 0xed, 0x9c, 0xd4, 0xf2, 0x9d, 0x8f, 0xe1, 0xc9,
	0x39, 0x8d, 0x12, 0x9a, 0x44, 0x76, 0xc2, 0xc5, 0x34, 0xd7, 0x61, 0xef, 0xdc, 0x3e, 0x71, 0x6c,
	0xe7, 0xc4, 0xb3, 0x9d, 0xa1, 0xe5, 0x0c, 0x3d, 0xd3, 0x3a, 0xee, 0xbf, 0x19, 0x0c, 0x6b, 0xb9,
	0xce, 0x77, 0xe2, 0x1b, 0xf2, 0xea, 0x24, 0xcb, 0x14, 0xac, 0x5e, 0x3d, 0xcc, 0xc2, 0x2f, 0xe0,
	0xf9, 0x0a, 0x2e, 0xff, 0xdf, 0xb3, 0xbe, 0x14, 0x6b, 0xe7, 0xb5, 0x63, 0x58, 0xb5, 0x1b, 0x07,
	0xbf, 0x80, 0x67, 0xab, 0xa5, 0xfd, 0xe1, 0x7a, 0xc6, 0x8f, 0x3f, 0x20, 0xfc, 0x7f, 0x68, 0xac,
	0xa4, 0x64, 0x84, 0xd7, 0xb2, 0x7e, 0xfe, 0x0b, 0x1d, 0x1d, 0xbd, 0xbb, 0x6d, 0xa0, 0xf7, 0xb7,
	0x0d, 0xf4, 0xe7, 0x6d, 0x03, 0xdd, 0xdc, 0x35, 0x72, 0xef, 0xef, 0x1a, 0xb9, 0xdf, 0xee, 0x1a,
	0xb9, 0xaf, 0xda, 0x11, 0xe5, 0xe3, 0xd9, 0xa8, 0x1b, 0xa4, 0x97, 0x3d, 0xf5, 0x02, 0xc5, 0xfe,
	0x88, 0x65, 0xcb, 0xde, 0x5b, 0xf9, 0x81, 0x15, 0x0f, 0x10, 0x1b, 0x95, 0x64, 0x77, 0xbe, 0xfc,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xb2, 0xac, 0x6d, 0x7b, 0x07, 0x00, 0x00,
}

func (m *DLCOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDlc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.NonceIndex != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.NonceIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DkgId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.DkgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DCM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DCM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DCM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDlc(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DkgId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.DkgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintDlc(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.OraclePubkey) > 0 {
		i -= len(m.OraclePubkey)
		copy(dAtA[i:], m.OraclePubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.OraclePubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.TriggerAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.TriggerAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDlc(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x52
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PublishAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PublishAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintDlc(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x4a
	if m.OutcomeIndex != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.OutcomeIndex))
		i--
		dAtA[i] = 0x40
	}
	if m.HasTriggered {
		i--
		if m.HasTriggered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Outcomes) > 0 {
		for iNdEx := len(m.Outcomes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Outcomes[iNdEx])
			copy(dAtA[i:], m.Outcomes[iNdEx])
			i = encodeVarintDlc(dAtA, i, uint64(len(m.Outcomes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintDlc(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OracleParticipantLiveness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleParticipantLiveness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleParticipantLiveness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockHeight != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.LastDkgId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.LastDkgId))
		i--
		dAtA[i] = 0x18
	}
	if m.IsAlive {
		i--
		if m.IsAlive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConsensusPubkey) > 0 {
		i -= len(m.ConsensusPubkey)
		copy(dAtA[i:], m.ConsensusPubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.ConsensusPubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDlc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDlc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DLCOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.DkgId != 0 {
		n += 1 + sovDlc(uint64(m.DkgId))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.NonceIndex != 0 {
		n += 1 + sovDlc(uint64(m.NonceIndex))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	if m.Status != 0 {
		n += 1 + sovDlc(uint64(m.Status))
	}
	return n
}

func (m *DCM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.DkgId != 0 {
		n += 1 + sovDlc(uint64(m.DkgId))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	if m.Status != 0 {
		n += 1 + sovDlc(uint64(m.Status))
	}
	return n
}

func (m *DLCNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDlc(uint64(m.Index))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.OraclePubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	return n
}

func (m *DLCEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovDlc(uint64(m.Type))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if len(m.Outcomes) > 0 {
		for _, s := range m.Outcomes {
			l = len(s)
			n += 1 + l + sovDlc(uint64(l))
		}
	}
	if m.HasTriggered {
		n += 2
	}
	if m.OutcomeIndex != 0 {
		n += 1 + sovDlc(uint64(m.OutcomeIndex))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PublishAt)
	n += 1 + l + sovDlc(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.TriggerAt)
	n += 1 + l + sovDlc(uint64(l))
	return n
}

func (m *DLCAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.EventId != 0 {
		n += 1 + sovDlc(uint64(m.EventId))
	}
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	return n
}

func (m *OracleParticipantLiveness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.IsAlive {
		n += 2
	}
	if m.LastDkgId != 0 {
		n += 1 + sovDlc(uint64(m.LastDkgId))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovDlc(uint64(m.LastBlockHeight))
	}
	return n
}

func sovDlc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDlc(x uint64) (n int) {
	return sovDlc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DLCOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
			}
			m.DkgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DkgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceIndex", wireType)
			}
			m.NonceIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DLCOracleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DCM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DCM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DCM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
			}
			m.DkgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DkgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DCMStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DlcEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcomes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcomes = append(m.Outcomes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTriggered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTriggered = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomeIndex", wireType)
			}
			m.OutcomeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutcomeIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PublishAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.TriggerAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleParticipantLiveness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleParticipantLiveness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleParticipantLiveness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAlive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAlive = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDkgId", wireType)
			}
			m.LastDkgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDkgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDlc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDlc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDlc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDlc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDlc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDlc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDlc = fmt.Errorf("proto: unexpected end of group")
)
