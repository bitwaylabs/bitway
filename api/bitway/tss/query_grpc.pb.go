// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitway/tss/query.proto

package tss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                = "/bitway.tss.Query/Params"
	Query_DKGRequest_FullMethodName            = "/bitway.tss.Query/DKGRequest"
	Query_DKGRequests_FullMethodName           = "/bitway.tss.Query/DKGRequests"
	Query_DKGCompletions_FullMethodName        = "/bitway.tss.Query/DKGCompletions"
	Query_SigningRequest_FullMethodName        = "/bitway.tss.Query/SigningRequest"
	Query_SigningRequests_FullMethodName       = "/bitway.tss.Query/SigningRequests"
	Query_RefreshingRequest_FullMethodName     = "/bitway.tss.Query/RefreshingRequest"
	Query_RefreshingRequests_FullMethodName    = "/bitway.tss.Query/RefreshingRequests"
	Query_RefreshingCompletions_FullMethodName = "/bitway.tss.Query/RefreshingCompletions"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DKGRequest queries the dkg request by the given id.
	DKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error)
	// DKGRequests queries dkg requests by the given params.
	DKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error)
	// DKGCompletions queries dkg completions by the given dkg request id.
	DKGCompletions(ctx context.Context, in *QueryDKGCompletionsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionsResponse, error)
	// SigningRequest queries the signing request by the given id.
	SigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error)
	// SigningRequests queries the signing requests by the given params.
	SigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error)
	// RefreshingRequest queries the refreshing request by the given id.
	RefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error)
	// RefreshingRequests queries the refreshing requests by the given status.
	RefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error)
	// RefreshingCompletions queries refreshing completions by the given request id.
	RefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error) {
	out := new(QueryDKGRequestResponse)
	err := c.cc.Invoke(ctx, Query_DKGRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error) {
	out := new(QueryDKGRequestsResponse)
	err := c.cc.Invoke(ctx, Query_DKGRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DKGCompletions(ctx context.Context, in *QueryDKGCompletionsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionsResponse, error) {
	out := new(QueryDKGCompletionsResponse)
	err := c.cc.Invoke(ctx, Query_DKGCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error) {
	out := new(QuerySigningRequestResponse)
	err := c.cc.Invoke(ctx, Query_SigningRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error) {
	out := new(QuerySigningRequestsResponse)
	err := c.cc.Invoke(ctx, Query_SigningRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error) {
	out := new(QueryRefreshingRequestResponse)
	err := c.cc.Invoke(ctx, Query_RefreshingRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error) {
	out := new(QueryRefreshingRequestsResponse)
	err := c.cc.Invoke(ctx, Query_RefreshingRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error) {
	out := new(QueryRefreshingCompletionsResponse)
	err := c.cc.Invoke(ctx, Query_RefreshingCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DKGRequest queries the dkg request by the given id.
	DKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error)
	// DKGRequests queries dkg requests by the given params.
	DKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error)
	// DKGCompletions queries dkg completions by the given dkg request id.
	DKGCompletions(context.Context, *QueryDKGCompletionsRequest) (*QueryDKGCompletionsResponse, error)
	// SigningRequest queries the signing request by the given id.
	SigningRequest(context.Context, *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error)
	// SigningRequests queries the signing requests by the given params.
	SigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error)
	// RefreshingRequest queries the refreshing request by the given id.
	RefreshingRequest(context.Context, *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error)
	// RefreshingRequests queries the refreshing requests by the given status.
	RefreshingRequests(context.Context, *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error)
	// RefreshingCompletions queries refreshing completions by the given request id.
	RefreshingCompletions(context.Context, *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) DKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DKGRequest not implemented")
}
func (UnimplementedQueryServer) DKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DKGRequests not implemented")
}
func (UnimplementedQueryServer) DKGCompletions(context.Context, *QueryDKGCompletionsRequest) (*QueryDKGCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DKGCompletions not implemented")
}
func (UnimplementedQueryServer) SigningRequest(context.Context, *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningRequest not implemented")
}
func (UnimplementedQueryServer) SigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningRequests not implemented")
}
func (UnimplementedQueryServer) RefreshingRequest(context.Context, *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshingRequest not implemented")
}
func (UnimplementedQueryServer) RefreshingRequests(context.Context, *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshingRequests not implemented")
}
func (UnimplementedQueryServer) RefreshingCompletions(context.Context, *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshingCompletions not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DKGRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DKGRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DKGRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DKGRequest(ctx, req.(*QueryDKGRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DKGRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DKGRequests(ctx, req.(*QueryDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DKGCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DKGCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DKGCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DKGCompletions(ctx, req.(*QueryDKGCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SigningRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningRequest(ctx, req.(*QuerySigningRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SigningRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningRequests(ctx, req.(*QuerySigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefreshingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefreshingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RefreshingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefreshingRequest(ctx, req.(*QueryRefreshingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefreshingRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefreshingRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RefreshingRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefreshingRequests(ctx, req.(*QueryRefreshingRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefreshingCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefreshingCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RefreshingCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefreshingCompletions(ctx, req.(*QueryRefreshingCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.tss.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DKGRequest",
			Handler:    _Query_DKGRequest_Handler,
		},
		{
			MethodName: "DKGRequests",
			Handler:    _Query_DKGRequests_Handler,
		},
		{
			MethodName: "DKGCompletions",
			Handler:    _Query_DKGCompletions_Handler,
		},
		{
			MethodName: "SigningRequest",
			Handler:    _Query_SigningRequest_Handler,
		},
		{
			MethodName: "SigningRequests",
			Handler:    _Query_SigningRequests_Handler,
		},
		{
			MethodName: "RefreshingRequest",
			Handler:    _Query_RefreshingRequest_Handler,
		},
		{
			MethodName: "RefreshingRequests",
			Handler:    _Query_RefreshingRequests_Handler,
		},
		{
			MethodName: "RefreshingCompletions",
			Handler:    _Query_RefreshingCompletions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/tss/query.proto",
}
