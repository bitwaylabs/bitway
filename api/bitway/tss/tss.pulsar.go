// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tss

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_DKGRequest_5_list)(nil)

type _DKGRequest_5_list struct {
	list *[]string
}

func (x *_DKGRequest_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DKGRequest_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_DKGRequest_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_DKGRequest_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_DKGRequest_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message DKGRequest at list field Participants as it is not of Message kind"))
}

func (x *_DKGRequest_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_DKGRequest_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_DKGRequest_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DKGRequest                 protoreflect.MessageDescriptor
	fd_DKGRequest_id              protoreflect.FieldDescriptor
	fd_DKGRequest_module          protoreflect.FieldDescriptor
	fd_DKGRequest_type            protoreflect.FieldDescriptor
	fd_DKGRequest_intent          protoreflect.FieldDescriptor
	fd_DKGRequest_participants    protoreflect.FieldDescriptor
	fd_DKGRequest_threshold       protoreflect.FieldDescriptor
	fd_DKGRequest_batch_size      protoreflect.FieldDescriptor
	fd_DKGRequest_expiration_time protoreflect.FieldDescriptor
	fd_DKGRequest_status          protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_DKGRequest = File_bitway_tss_tss_proto.Messages().ByName("DKGRequest")
	fd_DKGRequest_id = md_DKGRequest.Fields().ByName("id")
	fd_DKGRequest_module = md_DKGRequest.Fields().ByName("module")
	fd_DKGRequest_type = md_DKGRequest.Fields().ByName("type")
	fd_DKGRequest_intent = md_DKGRequest.Fields().ByName("intent")
	fd_DKGRequest_participants = md_DKGRequest.Fields().ByName("participants")
	fd_DKGRequest_threshold = md_DKGRequest.Fields().ByName("threshold")
	fd_DKGRequest_batch_size = md_DKGRequest.Fields().ByName("batch_size")
	fd_DKGRequest_expiration_time = md_DKGRequest.Fields().ByName("expiration_time")
	fd_DKGRequest_status = md_DKGRequest.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_DKGRequest)(nil)

type fastReflection_DKGRequest DKGRequest

func (x *DKGRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DKGRequest)(x)
}

func (x *DKGRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DKGRequest_messageType fastReflection_DKGRequest_messageType
var _ protoreflect.MessageType = fastReflection_DKGRequest_messageType{}

type fastReflection_DKGRequest_messageType struct{}

func (x fastReflection_DKGRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DKGRequest)(nil)
}
func (x fastReflection_DKGRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_DKGRequest)
}
func (x fastReflection_DKGRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DKGRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DKGRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_DKGRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DKGRequest) Type() protoreflect.MessageType {
	return _fastReflection_DKGRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DKGRequest) New() protoreflect.Message {
	return new(fastReflection_DKGRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DKGRequest) Interface() protoreflect.ProtoMessage {
	return (*DKGRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DKGRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DKGRequest_id, value) {
			return
		}
	}
	if x.Module != "" {
		value := protoreflect.ValueOfString(x.Module)
		if !f(fd_DKGRequest_module, value) {
			return
		}
	}
	if x.Type_ != "" {
		value := protoreflect.ValueOfString(x.Type_)
		if !f(fd_DKGRequest_type, value) {
			return
		}
	}
	if x.Intent != int32(0) {
		value := protoreflect.ValueOfInt32(x.Intent)
		if !f(fd_DKGRequest_intent, value) {
			return
		}
	}
	if len(x.Participants) != 0 {
		value := protoreflect.ValueOfList(&_DKGRequest_5_list{list: &x.Participants})
		if !f(fd_DKGRequest_participants, value) {
			return
		}
	}
	if x.Threshold != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Threshold)
		if !f(fd_DKGRequest_threshold, value) {
			return
		}
	}
	if x.BatchSize != uint32(0) {
		value := protoreflect.ValueOfUint32(x.BatchSize)
		if !f(fd_DKGRequest_batch_size, value) {
			return
		}
	}
	if x.ExpirationTime != nil {
		value := protoreflect.ValueOfMessage(x.ExpirationTime.ProtoReflect())
		if !f(fd_DKGRequest_expiration_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_DKGRequest_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DKGRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.DKGRequest.id":
		return x.Id != uint64(0)
	case "bitway.tss.DKGRequest.module":
		return x.Module != ""
	case "bitway.tss.DKGRequest.type":
		return x.Type_ != ""
	case "bitway.tss.DKGRequest.intent":
		return x.Intent != int32(0)
	case "bitway.tss.DKGRequest.participants":
		return len(x.Participants) != 0
	case "bitway.tss.DKGRequest.threshold":
		return x.Threshold != uint32(0)
	case "bitway.tss.DKGRequest.batch_size":
		return x.BatchSize != uint32(0)
	case "bitway.tss.DKGRequest.expiration_time":
		return x.ExpirationTime != nil
	case "bitway.tss.DKGRequest.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.DKGRequest.id":
		x.Id = uint64(0)
	case "bitway.tss.DKGRequest.module":
		x.Module = ""
	case "bitway.tss.DKGRequest.type":
		x.Type_ = ""
	case "bitway.tss.DKGRequest.intent":
		x.Intent = int32(0)
	case "bitway.tss.DKGRequest.participants":
		x.Participants = nil
	case "bitway.tss.DKGRequest.threshold":
		x.Threshold = uint32(0)
	case "bitway.tss.DKGRequest.batch_size":
		x.BatchSize = uint32(0)
	case "bitway.tss.DKGRequest.expiration_time":
		x.ExpirationTime = nil
	case "bitway.tss.DKGRequest.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DKGRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.DKGRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.DKGRequest.module":
		value := x.Module
		return protoreflect.ValueOfString(value)
	case "bitway.tss.DKGRequest.type":
		value := x.Type_
		return protoreflect.ValueOfString(value)
	case "bitway.tss.DKGRequest.intent":
		value := x.Intent
		return protoreflect.ValueOfInt32(value)
	case "bitway.tss.DKGRequest.participants":
		if len(x.Participants) == 0 {
			return protoreflect.ValueOfList(&_DKGRequest_5_list{})
		}
		listValue := &_DKGRequest_5_list{list: &x.Participants}
		return protoreflect.ValueOfList(listValue)
	case "bitway.tss.DKGRequest.threshold":
		value := x.Threshold
		return protoreflect.ValueOfUint32(value)
	case "bitway.tss.DKGRequest.batch_size":
		value := x.BatchSize
		return protoreflect.ValueOfUint32(value)
	case "bitway.tss.DKGRequest.expiration_time":
		value := x.ExpirationTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.tss.DKGRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.DKGRequest.id":
		x.Id = value.Uint()
	case "bitway.tss.DKGRequest.module":
		x.Module = value.Interface().(string)
	case "bitway.tss.DKGRequest.type":
		x.Type_ = value.Interface().(string)
	case "bitway.tss.DKGRequest.intent":
		x.Intent = int32(value.Int())
	case "bitway.tss.DKGRequest.participants":
		lv := value.List()
		clv := lv.(*_DKGRequest_5_list)
		x.Participants = *clv.list
	case "bitway.tss.DKGRequest.threshold":
		x.Threshold = uint32(value.Uint())
	case "bitway.tss.DKGRequest.batch_size":
		x.BatchSize = uint32(value.Uint())
	case "bitway.tss.DKGRequest.expiration_time":
		x.ExpirationTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.tss.DKGRequest.status":
		x.Status = (DKGStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.DKGRequest.participants":
		if x.Participants == nil {
			x.Participants = []string{}
		}
		value := &_DKGRequest_5_list{list: &x.Participants}
		return protoreflect.ValueOfList(value)
	case "bitway.tss.DKGRequest.expiration_time":
		if x.ExpirationTime == nil {
			x.ExpirationTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpirationTime.ProtoReflect())
	case "bitway.tss.DKGRequest.id":
		panic(fmt.Errorf("field id of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.module":
		panic(fmt.Errorf("field module of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.type":
		panic(fmt.Errorf("field type of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.intent":
		panic(fmt.Errorf("field intent of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.threshold":
		panic(fmt.Errorf("field threshold of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.batch_size":
		panic(fmt.Errorf("field batch_size of message bitway.tss.DKGRequest is not mutable"))
	case "bitway.tss.DKGRequest.status":
		panic(fmt.Errorf("field status of message bitway.tss.DKGRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DKGRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.DKGRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.DKGRequest.module":
		return protoreflect.ValueOfString("")
	case "bitway.tss.DKGRequest.type":
		return protoreflect.ValueOfString("")
	case "bitway.tss.DKGRequest.intent":
		return protoreflect.ValueOfInt32(int32(0))
	case "bitway.tss.DKGRequest.participants":
		list := []string{}
		return protoreflect.ValueOfList(&_DKGRequest_5_list{list: &list})
	case "bitway.tss.DKGRequest.threshold":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bitway.tss.DKGRequest.batch_size":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bitway.tss.DKGRequest.expiration_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.tss.DKGRequest.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DKGRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.DKGRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DKGRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DKGRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DKGRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DKGRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Module)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Type_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Intent != 0 {
			n += 1 + runtime.Sov(uint64(x.Intent))
		}
		if len(x.Participants) > 0 {
			for _, s := range x.Participants {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Threshold != 0 {
			n += 1 + runtime.Sov(uint64(x.Threshold))
		}
		if x.BatchSize != 0 {
			n += 1 + runtime.Sov(uint64(x.BatchSize))
		}
		if x.ExpirationTime != nil {
			l = options.Size(x.ExpirationTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DKGRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x48
		}
		if x.ExpirationTime != nil {
			encoded, err := options.Marshal(x.ExpirationTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.BatchSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BatchSize))
			i--
			dAtA[i] = 0x38
		}
		if x.Threshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Threshold))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Participants) > 0 {
			for iNdEx := len(x.Participants) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Participants[iNdEx])
				copy(dAtA[i:], x.Participants[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Participants[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.Intent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Intent))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Type_) > 0 {
			i -= len(x.Type_)
			copy(dAtA[i:], x.Type_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Module) > 0 {
			i -= len(x.Module)
			copy(dAtA[i:], x.Module)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Module)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DKGRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DKGRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DKGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Module = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
				}
				x.Intent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Intent |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Participants = append(x.Participants, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
				}
				x.Threshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Threshold |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
				}
				x.BatchSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BatchSize |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpirationTime == nil {
					x.ExpirationTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpirationTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= DKGStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DKGCompletion_3_list)(nil)

type _DKGCompletion_3_list struct {
	list *[]string
}

func (x *_DKGCompletion_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DKGCompletion_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_DKGCompletion_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_DKGCompletion_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_DKGCompletion_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message DKGCompletion at list field PubKeys as it is not of Message kind"))
}

func (x *_DKGCompletion_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_DKGCompletion_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_DKGCompletion_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DKGCompletion                  protoreflect.MessageDescriptor
	fd_DKGCompletion_id               protoreflect.FieldDescriptor
	fd_DKGCompletion_sender           protoreflect.FieldDescriptor
	fd_DKGCompletion_pub_keys         protoreflect.FieldDescriptor
	fd_DKGCompletion_consensus_pubkey protoreflect.FieldDescriptor
	fd_DKGCompletion_signature        protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_DKGCompletion = File_bitway_tss_tss_proto.Messages().ByName("DKGCompletion")
	fd_DKGCompletion_id = md_DKGCompletion.Fields().ByName("id")
	fd_DKGCompletion_sender = md_DKGCompletion.Fields().ByName("sender")
	fd_DKGCompletion_pub_keys = md_DKGCompletion.Fields().ByName("pub_keys")
	fd_DKGCompletion_consensus_pubkey = md_DKGCompletion.Fields().ByName("consensus_pubkey")
	fd_DKGCompletion_signature = md_DKGCompletion.Fields().ByName("signature")
}

var _ protoreflect.Message = (*fastReflection_DKGCompletion)(nil)

type fastReflection_DKGCompletion DKGCompletion

func (x *DKGCompletion) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DKGCompletion)(x)
}

func (x *DKGCompletion) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DKGCompletion_messageType fastReflection_DKGCompletion_messageType
var _ protoreflect.MessageType = fastReflection_DKGCompletion_messageType{}

type fastReflection_DKGCompletion_messageType struct{}

func (x fastReflection_DKGCompletion_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DKGCompletion)(nil)
}
func (x fastReflection_DKGCompletion_messageType) New() protoreflect.Message {
	return new(fastReflection_DKGCompletion)
}
func (x fastReflection_DKGCompletion_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DKGCompletion
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DKGCompletion) Descriptor() protoreflect.MessageDescriptor {
	return md_DKGCompletion
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DKGCompletion) Type() protoreflect.MessageType {
	return _fastReflection_DKGCompletion_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DKGCompletion) New() protoreflect.Message {
	return new(fastReflection_DKGCompletion)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DKGCompletion) Interface() protoreflect.ProtoMessage {
	return (*DKGCompletion)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DKGCompletion) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DKGCompletion_id, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_DKGCompletion_sender, value) {
			return
		}
	}
	if len(x.PubKeys) != 0 {
		value := protoreflect.ValueOfList(&_DKGCompletion_3_list{list: &x.PubKeys})
		if !f(fd_DKGCompletion_pub_keys, value) {
			return
		}
	}
	if x.ConsensusPubkey != "" {
		value := protoreflect.ValueOfString(x.ConsensusPubkey)
		if !f(fd_DKGCompletion_consensus_pubkey, value) {
			return
		}
	}
	if x.Signature != "" {
		value := protoreflect.ValueOfString(x.Signature)
		if !f(fd_DKGCompletion_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DKGCompletion) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.DKGCompletion.id":
		return x.Id != uint64(0)
	case "bitway.tss.DKGCompletion.sender":
		return x.Sender != ""
	case "bitway.tss.DKGCompletion.pub_keys":
		return len(x.PubKeys) != 0
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		return x.ConsensusPubkey != ""
	case "bitway.tss.DKGCompletion.signature":
		return x.Signature != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGCompletion) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.DKGCompletion.id":
		x.Id = uint64(0)
	case "bitway.tss.DKGCompletion.sender":
		x.Sender = ""
	case "bitway.tss.DKGCompletion.pub_keys":
		x.PubKeys = nil
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		x.ConsensusPubkey = ""
	case "bitway.tss.DKGCompletion.signature":
		x.Signature = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DKGCompletion) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.DKGCompletion.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.DKGCompletion.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "bitway.tss.DKGCompletion.pub_keys":
		if len(x.PubKeys) == 0 {
			return protoreflect.ValueOfList(&_DKGCompletion_3_list{})
		}
		listValue := &_DKGCompletion_3_list{list: &x.PubKeys}
		return protoreflect.ValueOfList(listValue)
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		value := x.ConsensusPubkey
		return protoreflect.ValueOfString(value)
	case "bitway.tss.DKGCompletion.signature":
		value := x.Signature
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGCompletion) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.DKGCompletion.id":
		x.Id = value.Uint()
	case "bitway.tss.DKGCompletion.sender":
		x.Sender = value.Interface().(string)
	case "bitway.tss.DKGCompletion.pub_keys":
		lv := value.List()
		clv := lv.(*_DKGCompletion_3_list)
		x.PubKeys = *clv.list
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		x.ConsensusPubkey = value.Interface().(string)
	case "bitway.tss.DKGCompletion.signature":
		x.Signature = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGCompletion) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.DKGCompletion.pub_keys":
		if x.PubKeys == nil {
			x.PubKeys = []string{}
		}
		value := &_DKGCompletion_3_list{list: &x.PubKeys}
		return protoreflect.ValueOfList(value)
	case "bitway.tss.DKGCompletion.id":
		panic(fmt.Errorf("field id of message bitway.tss.DKGCompletion is not mutable"))
	case "bitway.tss.DKGCompletion.sender":
		panic(fmt.Errorf("field sender of message bitway.tss.DKGCompletion is not mutable"))
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		panic(fmt.Errorf("field consensus_pubkey of message bitway.tss.DKGCompletion is not mutable"))
	case "bitway.tss.DKGCompletion.signature":
		panic(fmt.Errorf("field signature of message bitway.tss.DKGCompletion is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DKGCompletion) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.DKGCompletion.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.DKGCompletion.sender":
		return protoreflect.ValueOfString("")
	case "bitway.tss.DKGCompletion.pub_keys":
		list := []string{}
		return protoreflect.ValueOfList(&_DKGCompletion_3_list{list: &list})
	case "bitway.tss.DKGCompletion.consensus_pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.tss.DKGCompletion.signature":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.DKGCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.DKGCompletion does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DKGCompletion) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.DKGCompletion", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DKGCompletion) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DKGCompletion) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DKGCompletion) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DKGCompletion) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DKGCompletion)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PubKeys) > 0 {
			for _, s := range x.PubKeys {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ConsensusPubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DKGCompletion)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ConsensusPubkey) > 0 {
			i -= len(x.ConsensusPubkey)
			copy(dAtA[i:], x.ConsensusPubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConsensusPubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PubKeys) > 0 {
			for iNdEx := len(x.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.PubKeys[iNdEx])
				copy(dAtA[i:], x.PubKeys[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKeys[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DKGCompletion)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DKGCompletion: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DKGCompletion: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKeys = append(x.PubKeys, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SigningOptions               protoreflect.MessageDescriptor
	fd_SigningOptions_tweak         protoreflect.FieldDescriptor
	fd_SigningOptions_nonce         protoreflect.FieldDescriptor
	fd_SigningOptions_adaptor_point protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_SigningOptions = File_bitway_tss_tss_proto.Messages().ByName("SigningOptions")
	fd_SigningOptions_tweak = md_SigningOptions.Fields().ByName("tweak")
	fd_SigningOptions_nonce = md_SigningOptions.Fields().ByName("nonce")
	fd_SigningOptions_adaptor_point = md_SigningOptions.Fields().ByName("adaptor_point")
}

var _ protoreflect.Message = (*fastReflection_SigningOptions)(nil)

type fastReflection_SigningOptions SigningOptions

func (x *SigningOptions) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SigningOptions)(x)
}

func (x *SigningOptions) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SigningOptions_messageType fastReflection_SigningOptions_messageType
var _ protoreflect.MessageType = fastReflection_SigningOptions_messageType{}

type fastReflection_SigningOptions_messageType struct{}

func (x fastReflection_SigningOptions_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SigningOptions)(nil)
}
func (x fastReflection_SigningOptions_messageType) New() protoreflect.Message {
	return new(fastReflection_SigningOptions)
}
func (x fastReflection_SigningOptions_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SigningOptions
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SigningOptions) Descriptor() protoreflect.MessageDescriptor {
	return md_SigningOptions
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SigningOptions) Type() protoreflect.MessageType {
	return _fastReflection_SigningOptions_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SigningOptions) New() protoreflect.Message {
	return new(fastReflection_SigningOptions)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SigningOptions) Interface() protoreflect.ProtoMessage {
	return (*SigningOptions)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SigningOptions) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Tweak != "" {
		value := protoreflect.ValueOfString(x.Tweak)
		if !f(fd_SigningOptions_tweak, value) {
			return
		}
	}
	if x.Nonce != "" {
		value := protoreflect.ValueOfString(x.Nonce)
		if !f(fd_SigningOptions_nonce, value) {
			return
		}
	}
	if x.AdaptorPoint != "" {
		value := protoreflect.ValueOfString(x.AdaptorPoint)
		if !f(fd_SigningOptions_adaptor_point, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SigningOptions) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		return x.Tweak != ""
	case "bitway.tss.SigningOptions.nonce":
		return x.Nonce != ""
	case "bitway.tss.SigningOptions.adaptor_point":
		return x.AdaptorPoint != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningOptions) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		x.Tweak = ""
	case "bitway.tss.SigningOptions.nonce":
		x.Nonce = ""
	case "bitway.tss.SigningOptions.adaptor_point":
		x.AdaptorPoint = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SigningOptions) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		value := x.Tweak
		return protoreflect.ValueOfString(value)
	case "bitway.tss.SigningOptions.nonce":
		value := x.Nonce
		return protoreflect.ValueOfString(value)
	case "bitway.tss.SigningOptions.adaptor_point":
		value := x.AdaptorPoint
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningOptions) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		x.Tweak = value.Interface().(string)
	case "bitway.tss.SigningOptions.nonce":
		x.Nonce = value.Interface().(string)
	case "bitway.tss.SigningOptions.adaptor_point":
		x.AdaptorPoint = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningOptions) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		panic(fmt.Errorf("field tweak of message bitway.tss.SigningOptions is not mutable"))
	case "bitway.tss.SigningOptions.nonce":
		panic(fmt.Errorf("field nonce of message bitway.tss.SigningOptions is not mutable"))
	case "bitway.tss.SigningOptions.adaptor_point":
		panic(fmt.Errorf("field adaptor_point of message bitway.tss.SigningOptions is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SigningOptions) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.SigningOptions.tweak":
		return protoreflect.ValueOfString("")
	case "bitway.tss.SigningOptions.nonce":
		return protoreflect.ValueOfString("")
	case "bitway.tss.SigningOptions.adaptor_point":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningOptions"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningOptions does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SigningOptions) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.SigningOptions", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SigningOptions) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningOptions) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SigningOptions) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SigningOptions) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SigningOptions)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Tweak)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Nonce)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AdaptorPoint)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SigningOptions)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AdaptorPoint) > 0 {
			i -= len(x.AdaptorPoint)
			copy(dAtA[i:], x.AdaptorPoint)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AdaptorPoint)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Nonce) > 0 {
			i -= len(x.Nonce)
			copy(dAtA[i:], x.Nonce)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Nonce)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Tweak) > 0 {
			i -= len(x.Tweak)
			copy(dAtA[i:], x.Tweak)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Tweak)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SigningOptions)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SigningOptions: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SigningOptions: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tweak", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tweak = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Nonce = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AdaptorPoint", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AdaptorPoint = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SigningRequest_7_list)(nil)

type _SigningRequest_7_list struct {
	list *[]string
}

func (x *_SigningRequest_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SigningRequest_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_SigningRequest_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SigningRequest_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SigningRequest_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SigningRequest at list field SigHashes as it is not of Message kind"))
}

func (x *_SigningRequest_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SigningRequest_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_SigningRequest_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SigningRequest               protoreflect.MessageDescriptor
	fd_SigningRequest_id            protoreflect.FieldDescriptor
	fd_SigningRequest_module        protoreflect.FieldDescriptor
	fd_SigningRequest_scoped_id     protoreflect.FieldDescriptor
	fd_SigningRequest_type          protoreflect.FieldDescriptor
	fd_SigningRequest_intent        protoreflect.FieldDescriptor
	fd_SigningRequest_pub_key       protoreflect.FieldDescriptor
	fd_SigningRequest_sig_hashes    protoreflect.FieldDescriptor
	fd_SigningRequest_options       protoreflect.FieldDescriptor
	fd_SigningRequest_creation_time protoreflect.FieldDescriptor
	fd_SigningRequest_status        protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_SigningRequest = File_bitway_tss_tss_proto.Messages().ByName("SigningRequest")
	fd_SigningRequest_id = md_SigningRequest.Fields().ByName("id")
	fd_SigningRequest_module = md_SigningRequest.Fields().ByName("module")
	fd_SigningRequest_scoped_id = md_SigningRequest.Fields().ByName("scoped_id")
	fd_SigningRequest_type = md_SigningRequest.Fields().ByName("type")
	fd_SigningRequest_intent = md_SigningRequest.Fields().ByName("intent")
	fd_SigningRequest_pub_key = md_SigningRequest.Fields().ByName("pub_key")
	fd_SigningRequest_sig_hashes = md_SigningRequest.Fields().ByName("sig_hashes")
	fd_SigningRequest_options = md_SigningRequest.Fields().ByName("options")
	fd_SigningRequest_creation_time = md_SigningRequest.Fields().ByName("creation_time")
	fd_SigningRequest_status = md_SigningRequest.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_SigningRequest)(nil)

type fastReflection_SigningRequest SigningRequest

func (x *SigningRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SigningRequest)(x)
}

func (x *SigningRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SigningRequest_messageType fastReflection_SigningRequest_messageType
var _ protoreflect.MessageType = fastReflection_SigningRequest_messageType{}

type fastReflection_SigningRequest_messageType struct{}

func (x fastReflection_SigningRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SigningRequest)(nil)
}
func (x fastReflection_SigningRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_SigningRequest)
}
func (x fastReflection_SigningRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SigningRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SigningRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_SigningRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SigningRequest) Type() protoreflect.MessageType {
	return _fastReflection_SigningRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SigningRequest) New() protoreflect.Message {
	return new(fastReflection_SigningRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SigningRequest) Interface() protoreflect.ProtoMessage {
	return (*SigningRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SigningRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SigningRequest_id, value) {
			return
		}
	}
	if x.Module != "" {
		value := protoreflect.ValueOfString(x.Module)
		if !f(fd_SigningRequest_module, value) {
			return
		}
	}
	if x.ScopedId != "" {
		value := protoreflect.ValueOfString(x.ScopedId)
		if !f(fd_SigningRequest_scoped_id, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_SigningRequest_type, value) {
			return
		}
	}
	if x.Intent != int32(0) {
		value := protoreflect.ValueOfInt32(x.Intent)
		if !f(fd_SigningRequest_intent, value) {
			return
		}
	}
	if x.PubKey != "" {
		value := protoreflect.ValueOfString(x.PubKey)
		if !f(fd_SigningRequest_pub_key, value) {
			return
		}
	}
	if len(x.SigHashes) != 0 {
		value := protoreflect.ValueOfList(&_SigningRequest_7_list{list: &x.SigHashes})
		if !f(fd_SigningRequest_sig_hashes, value) {
			return
		}
	}
	if x.Options != nil {
		value := protoreflect.ValueOfMessage(x.Options.ProtoReflect())
		if !f(fd_SigningRequest_options, value) {
			return
		}
	}
	if x.CreationTime != nil {
		value := protoreflect.ValueOfMessage(x.CreationTime.ProtoReflect())
		if !f(fd_SigningRequest_creation_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_SigningRequest_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SigningRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.SigningRequest.id":
		return x.Id != uint64(0)
	case "bitway.tss.SigningRequest.module":
		return x.Module != ""
	case "bitway.tss.SigningRequest.scoped_id":
		return x.ScopedId != ""
	case "bitway.tss.SigningRequest.type":
		return x.Type_ != 0
	case "bitway.tss.SigningRequest.intent":
		return x.Intent != int32(0)
	case "bitway.tss.SigningRequest.pub_key":
		return x.PubKey != ""
	case "bitway.tss.SigningRequest.sig_hashes":
		return len(x.SigHashes) != 0
	case "bitway.tss.SigningRequest.options":
		return x.Options != nil
	case "bitway.tss.SigningRequest.creation_time":
		return x.CreationTime != nil
	case "bitway.tss.SigningRequest.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.SigningRequest.id":
		x.Id = uint64(0)
	case "bitway.tss.SigningRequest.module":
		x.Module = ""
	case "bitway.tss.SigningRequest.scoped_id":
		x.ScopedId = ""
	case "bitway.tss.SigningRequest.type":
		x.Type_ = 0
	case "bitway.tss.SigningRequest.intent":
		x.Intent = int32(0)
	case "bitway.tss.SigningRequest.pub_key":
		x.PubKey = ""
	case "bitway.tss.SigningRequest.sig_hashes":
		x.SigHashes = nil
	case "bitway.tss.SigningRequest.options":
		x.Options = nil
	case "bitway.tss.SigningRequest.creation_time":
		x.CreationTime = nil
	case "bitway.tss.SigningRequest.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SigningRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.SigningRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.SigningRequest.module":
		value := x.Module
		return protoreflect.ValueOfString(value)
	case "bitway.tss.SigningRequest.scoped_id":
		value := x.ScopedId
		return protoreflect.ValueOfString(value)
	case "bitway.tss.SigningRequest.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "bitway.tss.SigningRequest.intent":
		value := x.Intent
		return protoreflect.ValueOfInt32(value)
	case "bitway.tss.SigningRequest.pub_key":
		value := x.PubKey
		return protoreflect.ValueOfString(value)
	case "bitway.tss.SigningRequest.sig_hashes":
		if len(x.SigHashes) == 0 {
			return protoreflect.ValueOfList(&_SigningRequest_7_list{})
		}
		listValue := &_SigningRequest_7_list{list: &x.SigHashes}
		return protoreflect.ValueOfList(listValue)
	case "bitway.tss.SigningRequest.options":
		value := x.Options
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.tss.SigningRequest.creation_time":
		value := x.CreationTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.tss.SigningRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.SigningRequest.id":
		x.Id = value.Uint()
	case "bitway.tss.SigningRequest.module":
		x.Module = value.Interface().(string)
	case "bitway.tss.SigningRequest.scoped_id":
		x.ScopedId = value.Interface().(string)
	case "bitway.tss.SigningRequest.type":
		x.Type_ = (SigningType)(value.Enum())
	case "bitway.tss.SigningRequest.intent":
		x.Intent = int32(value.Int())
	case "bitway.tss.SigningRequest.pub_key":
		x.PubKey = value.Interface().(string)
	case "bitway.tss.SigningRequest.sig_hashes":
		lv := value.List()
		clv := lv.(*_SigningRequest_7_list)
		x.SigHashes = *clv.list
	case "bitway.tss.SigningRequest.options":
		x.Options = value.Message().Interface().(*SigningOptions)
	case "bitway.tss.SigningRequest.creation_time":
		x.CreationTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.tss.SigningRequest.status":
		x.Status = (SigningStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.SigningRequest.sig_hashes":
		if x.SigHashes == nil {
			x.SigHashes = []string{}
		}
		value := &_SigningRequest_7_list{list: &x.SigHashes}
		return protoreflect.ValueOfList(value)
	case "bitway.tss.SigningRequest.options":
		if x.Options == nil {
			x.Options = new(SigningOptions)
		}
		return protoreflect.ValueOfMessage(x.Options.ProtoReflect())
	case "bitway.tss.SigningRequest.creation_time":
		if x.CreationTime == nil {
			x.CreationTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.CreationTime.ProtoReflect())
	case "bitway.tss.SigningRequest.id":
		panic(fmt.Errorf("field id of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.module":
		panic(fmt.Errorf("field module of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.scoped_id":
		panic(fmt.Errorf("field scoped_id of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.type":
		panic(fmt.Errorf("field type of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.intent":
		panic(fmt.Errorf("field intent of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.pub_key":
		panic(fmt.Errorf("field pub_key of message bitway.tss.SigningRequest is not mutable"))
	case "bitway.tss.SigningRequest.status":
		panic(fmt.Errorf("field status of message bitway.tss.SigningRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SigningRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.SigningRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.SigningRequest.module":
		return protoreflect.ValueOfString("")
	case "bitway.tss.SigningRequest.scoped_id":
		return protoreflect.ValueOfString("")
	case "bitway.tss.SigningRequest.type":
		return protoreflect.ValueOfEnum(0)
	case "bitway.tss.SigningRequest.intent":
		return protoreflect.ValueOfInt32(int32(0))
	case "bitway.tss.SigningRequest.pub_key":
		return protoreflect.ValueOfString("")
	case "bitway.tss.SigningRequest.sig_hashes":
		list := []string{}
		return protoreflect.ValueOfList(&_SigningRequest_7_list{list: &list})
	case "bitway.tss.SigningRequest.options":
		m := new(SigningOptions)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.tss.SigningRequest.creation_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.tss.SigningRequest.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.SigningRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.SigningRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SigningRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.SigningRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SigningRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SigningRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SigningRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SigningRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SigningRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Module)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ScopedId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		if x.Intent != 0 {
			n += 1 + runtime.Sov(uint64(x.Intent))
		}
		l = len(x.PubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SigHashes) > 0 {
			for _, s := range x.SigHashes {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Options != nil {
			l = options.Size(x.Options)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreationTime != nil {
			l = options.Size(x.CreationTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SigningRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x50
		}
		if x.CreationTime != nil {
			encoded, err := options.Marshal(x.CreationTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Options != nil {
			encoded, err := options.Marshal(x.Options)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.SigHashes) > 0 {
			for iNdEx := len(x.SigHashes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SigHashes[iNdEx])
				copy(dAtA[i:], x.SigHashes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SigHashes[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.PubKey) > 0 {
			i -= len(x.PubKey)
			copy(dAtA[i:], x.PubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKey)))
			i--
			dAtA[i] = 0x32
		}
		if x.Intent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Intent))
			i--
			dAtA[i] = 0x28
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x20
		}
		if len(x.ScopedId) > 0 {
			i -= len(x.ScopedId)
			copy(dAtA[i:], x.ScopedId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ScopedId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Module) > 0 {
			i -= len(x.Module)
			copy(dAtA[i:], x.Module)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Module)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SigningRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SigningRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Module = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScopedId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ScopedId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= SigningType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
				}
				x.Intent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Intent |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SigHashes", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SigHashes = append(x.SigHashes, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Options == nil {
					x.Options = &SigningOptions{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Options); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CreationTime == nil {
					x.CreationTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CreationTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= SigningStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RefreshingRequest_3_list)(nil)

type _RefreshingRequest_3_list struct {
	list *[]string
}

func (x *_RefreshingRequest_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RefreshingRequest_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_RefreshingRequest_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RefreshingRequest_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RefreshingRequest_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RefreshingRequest at list field RemovedParticipants as it is not of Message kind"))
}

func (x *_RefreshingRequest_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RefreshingRequest_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_RefreshingRequest_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RefreshingRequest                      protoreflect.MessageDescriptor
	fd_RefreshingRequest_id                   protoreflect.FieldDescriptor
	fd_RefreshingRequest_dkg_id               protoreflect.FieldDescriptor
	fd_RefreshingRequest_removed_participants protoreflect.FieldDescriptor
	fd_RefreshingRequest_threshold            protoreflect.FieldDescriptor
	fd_RefreshingRequest_expiration_time      protoreflect.FieldDescriptor
	fd_RefreshingRequest_status               protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_RefreshingRequest = File_bitway_tss_tss_proto.Messages().ByName("RefreshingRequest")
	fd_RefreshingRequest_id = md_RefreshingRequest.Fields().ByName("id")
	fd_RefreshingRequest_dkg_id = md_RefreshingRequest.Fields().ByName("dkg_id")
	fd_RefreshingRequest_removed_participants = md_RefreshingRequest.Fields().ByName("removed_participants")
	fd_RefreshingRequest_threshold = md_RefreshingRequest.Fields().ByName("threshold")
	fd_RefreshingRequest_expiration_time = md_RefreshingRequest.Fields().ByName("expiration_time")
	fd_RefreshingRequest_status = md_RefreshingRequest.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_RefreshingRequest)(nil)

type fastReflection_RefreshingRequest RefreshingRequest

func (x *RefreshingRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RefreshingRequest)(x)
}

func (x *RefreshingRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RefreshingRequest_messageType fastReflection_RefreshingRequest_messageType
var _ protoreflect.MessageType = fastReflection_RefreshingRequest_messageType{}

type fastReflection_RefreshingRequest_messageType struct{}

func (x fastReflection_RefreshingRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RefreshingRequest)(nil)
}
func (x fastReflection_RefreshingRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_RefreshingRequest)
}
func (x fastReflection_RefreshingRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RefreshingRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RefreshingRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_RefreshingRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RefreshingRequest) Type() protoreflect.MessageType {
	return _fastReflection_RefreshingRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RefreshingRequest) New() protoreflect.Message {
	return new(fastReflection_RefreshingRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RefreshingRequest) Interface() protoreflect.ProtoMessage {
	return (*RefreshingRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RefreshingRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_RefreshingRequest_id, value) {
			return
		}
	}
	if x.DkgId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DkgId)
		if !f(fd_RefreshingRequest_dkg_id, value) {
			return
		}
	}
	if len(x.RemovedParticipants) != 0 {
		value := protoreflect.ValueOfList(&_RefreshingRequest_3_list{list: &x.RemovedParticipants})
		if !f(fd_RefreshingRequest_removed_participants, value) {
			return
		}
	}
	if x.Threshold != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Threshold)
		if !f(fd_RefreshingRequest_threshold, value) {
			return
		}
	}
	if x.ExpirationTime != nil {
		value := protoreflect.ValueOfMessage(x.ExpirationTime.ProtoReflect())
		if !f(fd_RefreshingRequest_expiration_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_RefreshingRequest_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RefreshingRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.RefreshingRequest.id":
		return x.Id != uint64(0)
	case "bitway.tss.RefreshingRequest.dkg_id":
		return x.DkgId != uint64(0)
	case "bitway.tss.RefreshingRequest.removed_participants":
		return len(x.RemovedParticipants) != 0
	case "bitway.tss.RefreshingRequest.threshold":
		return x.Threshold != uint32(0)
	case "bitway.tss.RefreshingRequest.expiration_time":
		return x.ExpirationTime != nil
	case "bitway.tss.RefreshingRequest.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.RefreshingRequest.id":
		x.Id = uint64(0)
	case "bitway.tss.RefreshingRequest.dkg_id":
		x.DkgId = uint64(0)
	case "bitway.tss.RefreshingRequest.removed_participants":
		x.RemovedParticipants = nil
	case "bitway.tss.RefreshingRequest.threshold":
		x.Threshold = uint32(0)
	case "bitway.tss.RefreshingRequest.expiration_time":
		x.ExpirationTime = nil
	case "bitway.tss.RefreshingRequest.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RefreshingRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.RefreshingRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.RefreshingRequest.dkg_id":
		value := x.DkgId
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.RefreshingRequest.removed_participants":
		if len(x.RemovedParticipants) == 0 {
			return protoreflect.ValueOfList(&_RefreshingRequest_3_list{})
		}
		listValue := &_RefreshingRequest_3_list{list: &x.RemovedParticipants}
		return protoreflect.ValueOfList(listValue)
	case "bitway.tss.RefreshingRequest.threshold":
		value := x.Threshold
		return protoreflect.ValueOfUint32(value)
	case "bitway.tss.RefreshingRequest.expiration_time":
		value := x.ExpirationTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.tss.RefreshingRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.RefreshingRequest.id":
		x.Id = value.Uint()
	case "bitway.tss.RefreshingRequest.dkg_id":
		x.DkgId = value.Uint()
	case "bitway.tss.RefreshingRequest.removed_participants":
		lv := value.List()
		clv := lv.(*_RefreshingRequest_3_list)
		x.RemovedParticipants = *clv.list
	case "bitway.tss.RefreshingRequest.threshold":
		x.Threshold = uint32(value.Uint())
	case "bitway.tss.RefreshingRequest.expiration_time":
		x.ExpirationTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.tss.RefreshingRequest.status":
		x.Status = (RefreshingStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.RefreshingRequest.removed_participants":
		if x.RemovedParticipants == nil {
			x.RemovedParticipants = []string{}
		}
		value := &_RefreshingRequest_3_list{list: &x.RemovedParticipants}
		return protoreflect.ValueOfList(value)
	case "bitway.tss.RefreshingRequest.expiration_time":
		if x.ExpirationTime == nil {
			x.ExpirationTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpirationTime.ProtoReflect())
	case "bitway.tss.RefreshingRequest.id":
		panic(fmt.Errorf("field id of message bitway.tss.RefreshingRequest is not mutable"))
	case "bitway.tss.RefreshingRequest.dkg_id":
		panic(fmt.Errorf("field dkg_id of message bitway.tss.RefreshingRequest is not mutable"))
	case "bitway.tss.RefreshingRequest.threshold":
		panic(fmt.Errorf("field threshold of message bitway.tss.RefreshingRequest is not mutable"))
	case "bitway.tss.RefreshingRequest.status":
		panic(fmt.Errorf("field status of message bitway.tss.RefreshingRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RefreshingRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.RefreshingRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.RefreshingRequest.dkg_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.RefreshingRequest.removed_participants":
		list := []string{}
		return protoreflect.ValueOfList(&_RefreshingRequest_3_list{list: &list})
	case "bitway.tss.RefreshingRequest.threshold":
		return protoreflect.ValueOfUint32(uint32(0))
	case "bitway.tss.RefreshingRequest.expiration_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.tss.RefreshingRequest.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingRequest"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RefreshingRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.RefreshingRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RefreshingRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RefreshingRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RefreshingRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RefreshingRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.DkgId != 0 {
			n += 1 + runtime.Sov(uint64(x.DkgId))
		}
		if len(x.RemovedParticipants) > 0 {
			for _, s := range x.RemovedParticipants {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Threshold != 0 {
			n += 1 + runtime.Sov(uint64(x.Threshold))
		}
		if x.ExpirationTime != nil {
			l = options.Size(x.ExpirationTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RefreshingRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if x.ExpirationTime != nil {
			encoded, err := options.Marshal(x.ExpirationTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Threshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Threshold))
			i--
			dAtA[i] = 0x20
		}
		if len(x.RemovedParticipants) > 0 {
			for iNdEx := len(x.RemovedParticipants) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.RemovedParticipants[iNdEx])
				copy(dAtA[i:], x.RemovedParticipants[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RemovedParticipants[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.DkgId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DkgId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RefreshingRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RefreshingRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RefreshingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
				}
				x.DkgId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DkgId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemovedParticipants", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RemovedParticipants = append(x.RemovedParticipants, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
				}
				x.Threshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Threshold |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpirationTime == nil {
					x.ExpirationTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpirationTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= RefreshingStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RefreshingCompletion                  protoreflect.MessageDescriptor
	fd_RefreshingCompletion_id               protoreflect.FieldDescriptor
	fd_RefreshingCompletion_sender           protoreflect.FieldDescriptor
	fd_RefreshingCompletion_consensus_pubkey protoreflect.FieldDescriptor
	fd_RefreshingCompletion_signature        protoreflect.FieldDescriptor
)

func init() {
	file_bitway_tss_tss_proto_init()
	md_RefreshingCompletion = File_bitway_tss_tss_proto.Messages().ByName("RefreshingCompletion")
	fd_RefreshingCompletion_id = md_RefreshingCompletion.Fields().ByName("id")
	fd_RefreshingCompletion_sender = md_RefreshingCompletion.Fields().ByName("sender")
	fd_RefreshingCompletion_consensus_pubkey = md_RefreshingCompletion.Fields().ByName("consensus_pubkey")
	fd_RefreshingCompletion_signature = md_RefreshingCompletion.Fields().ByName("signature")
}

var _ protoreflect.Message = (*fastReflection_RefreshingCompletion)(nil)

type fastReflection_RefreshingCompletion RefreshingCompletion

func (x *RefreshingCompletion) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RefreshingCompletion)(x)
}

func (x *RefreshingCompletion) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_tss_tss_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RefreshingCompletion_messageType fastReflection_RefreshingCompletion_messageType
var _ protoreflect.MessageType = fastReflection_RefreshingCompletion_messageType{}

type fastReflection_RefreshingCompletion_messageType struct{}

func (x fastReflection_RefreshingCompletion_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RefreshingCompletion)(nil)
}
func (x fastReflection_RefreshingCompletion_messageType) New() protoreflect.Message {
	return new(fastReflection_RefreshingCompletion)
}
func (x fastReflection_RefreshingCompletion_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RefreshingCompletion
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RefreshingCompletion) Descriptor() protoreflect.MessageDescriptor {
	return md_RefreshingCompletion
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RefreshingCompletion) Type() protoreflect.MessageType {
	return _fastReflection_RefreshingCompletion_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RefreshingCompletion) New() protoreflect.Message {
	return new(fastReflection_RefreshingCompletion)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RefreshingCompletion) Interface() protoreflect.ProtoMessage {
	return (*RefreshingCompletion)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RefreshingCompletion) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_RefreshingCompletion_id, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_RefreshingCompletion_sender, value) {
			return
		}
	}
	if x.ConsensusPubkey != "" {
		value := protoreflect.ValueOfString(x.ConsensusPubkey)
		if !f(fd_RefreshingCompletion_consensus_pubkey, value) {
			return
		}
	}
	if x.Signature != "" {
		value := protoreflect.ValueOfString(x.Signature)
		if !f(fd_RefreshingCompletion_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RefreshingCompletion) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		return x.Id != uint64(0)
	case "bitway.tss.RefreshingCompletion.sender":
		return x.Sender != ""
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		return x.ConsensusPubkey != ""
	case "bitway.tss.RefreshingCompletion.signature":
		return x.Signature != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingCompletion) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		x.Id = uint64(0)
	case "bitway.tss.RefreshingCompletion.sender":
		x.Sender = ""
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		x.ConsensusPubkey = ""
	case "bitway.tss.RefreshingCompletion.signature":
		x.Signature = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RefreshingCompletion) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.tss.RefreshingCompletion.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		value := x.ConsensusPubkey
		return protoreflect.ValueOfString(value)
	case "bitway.tss.RefreshingCompletion.signature":
		value := x.Signature
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingCompletion) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		x.Id = value.Uint()
	case "bitway.tss.RefreshingCompletion.sender":
		x.Sender = value.Interface().(string)
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		x.ConsensusPubkey = value.Interface().(string)
	case "bitway.tss.RefreshingCompletion.signature":
		x.Signature = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingCompletion) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		panic(fmt.Errorf("field id of message bitway.tss.RefreshingCompletion is not mutable"))
	case "bitway.tss.RefreshingCompletion.sender":
		panic(fmt.Errorf("field sender of message bitway.tss.RefreshingCompletion is not mutable"))
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		panic(fmt.Errorf("field consensus_pubkey of message bitway.tss.RefreshingCompletion is not mutable"))
	case "bitway.tss.RefreshingCompletion.signature":
		panic(fmt.Errorf("field signature of message bitway.tss.RefreshingCompletion is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RefreshingCompletion) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.tss.RefreshingCompletion.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.tss.RefreshingCompletion.sender":
		return protoreflect.ValueOfString("")
	case "bitway.tss.RefreshingCompletion.consensus_pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.tss.RefreshingCompletion.signature":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.tss.RefreshingCompletion"))
		}
		panic(fmt.Errorf("message bitway.tss.RefreshingCompletion does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RefreshingCompletion) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.tss.RefreshingCompletion", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RefreshingCompletion) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RefreshingCompletion) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RefreshingCompletion) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RefreshingCompletion) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RefreshingCompletion)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConsensusPubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RefreshingCompletion)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ConsensusPubkey) > 0 {
			i -= len(x.ConsensusPubkey)
			copy(dAtA[i:], x.ConsensusPubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConsensusPubkey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RefreshingCompletion)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RefreshingCompletion: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RefreshingCompletion: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: bitway/tss/tss.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DKG Status
type DKGStatus int32

const (
	// DKG_STATUS_UNSPECIFIED defines the unknown DKG request status
	DKGStatus_DKG_STATUS_UNSPECIFIED DKGStatus = 0
	// DKG_STATUS_PENDING defines the status of the DKG request which is pending
	DKGStatus_DKG_STATUS_PENDING DKGStatus = 1
	// DKG_STATUS_COMPLETED defines the status of the DKG request which is completed
	DKGStatus_DKG_STATUS_COMPLETED DKGStatus = 2
	// DKG_STATUS_FAILED defines the status of the DKG request which failed
	DKGStatus_DKG_STATUS_FAILED DKGStatus = 3
	// DKG_STATUS_TIMEDOUT defines the status of the DKG request which timed out
	DKGStatus_DKG_STATUS_TIMEDOUT DKGStatus = 4
)

// Enum value maps for DKGStatus.
var (
	DKGStatus_name = map[int32]string{
		0: "DKG_STATUS_UNSPECIFIED",
		1: "DKG_STATUS_PENDING",
		2: "DKG_STATUS_COMPLETED",
		3: "DKG_STATUS_FAILED",
		4: "DKG_STATUS_TIMEDOUT",
	}
	DKGStatus_value = map[string]int32{
		"DKG_STATUS_UNSPECIFIED": 0,
		"DKG_STATUS_PENDING":     1,
		"DKG_STATUS_COMPLETED":   2,
		"DKG_STATUS_FAILED":      3,
		"DKG_STATUS_TIMEDOUT":    4,
	}
)

func (x DKGStatus) Enum() *DKGStatus {
	p := new(DKGStatus)
	*p = x
	return p
}

func (x DKGStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DKGStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_tss_tss_proto_enumTypes[0].Descriptor()
}

func (DKGStatus) Type() protoreflect.EnumType {
	return &file_bitway_tss_tss_proto_enumTypes[0]
}

func (x DKGStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DKGStatus.Descriptor instead.
func (DKGStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{0}
}

// Signing Status
type SigningStatus int32

const (
	// SIGNING_STATUS_UNSPECIFIED defines the unknown signing status
	SigningStatus_SIGNING_STATUS_UNSPECIFIED SigningStatus = 0
	// SIGNING_STATUS_PENDING defines the status of the signing request which is pending
	SigningStatus_SIGNING_STATUS_PENDING SigningStatus = 1
	// SIGNING_STATUS_SIGNED defines the status of the signing request which is signed
	SigningStatus_SIGNING_STATUS_SIGNED SigningStatus = 2
	// SIGNING_STATUS_FAILED defines the status of the signing request which failed due to unexpected reasons
	SigningStatus_SIGNING_STATUS_FAILED SigningStatus = 3
)

// Enum value maps for SigningStatus.
var (
	SigningStatus_name = map[int32]string{
		0: "SIGNING_STATUS_UNSPECIFIED",
		1: "SIGNING_STATUS_PENDING",
		2: "SIGNING_STATUS_SIGNED",
		3: "SIGNING_STATUS_FAILED",
	}
	SigningStatus_value = map[string]int32{
		"SIGNING_STATUS_UNSPECIFIED": 0,
		"SIGNING_STATUS_PENDING":     1,
		"SIGNING_STATUS_SIGNED":      2,
		"SIGNING_STATUS_FAILED":      3,
	}
)

func (x SigningStatus) Enum() *SigningStatus {
	p := new(SigningStatus)
	*p = x
	return p
}

func (x SigningStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_tss_tss_proto_enumTypes[1].Descriptor()
}

func (SigningStatus) Type() protoreflect.EnumType {
	return &file_bitway_tss_tss_proto_enumTypes[1]
}

func (x SigningStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningStatus.Descriptor instead.
func (SigningStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{1}
}

// Signing Type
type SigningType int32

const (
	// SIGNING_TYPE_SCHNORR defines the common schnorr signing
	SigningType_SIGNING_TYPE_SCHNORR SigningType = 0
	// SIGNING_TYPE_SCHNORR_WITH_TWEAK defines the schnorr signing with tweak
	SigningType_SIGNING_TYPE_SCHNORR_WITH_TWEAK SigningType = 1
	// SIGNING_TYPE_SCHNORR_WITH_COMMITMENT defines the schnorr signing with commitment
	SigningType_SIGNING_TYPE_SCHNORR_WITH_COMMITMENT SigningType = 2
	// SIGNING_TYPE_SCHNORR_ADAPTOR defines the schnorr adaptor signing
	SigningType_SIGNING_TYPE_SCHNORR_ADAPTOR SigningType = 3
)

// Enum value maps for SigningType.
var (
	SigningType_name = map[int32]string{
		0: "SIGNING_TYPE_SCHNORR",
		1: "SIGNING_TYPE_SCHNORR_WITH_TWEAK",
		2: "SIGNING_TYPE_SCHNORR_WITH_COMMITMENT",
		3: "SIGNING_TYPE_SCHNORR_ADAPTOR",
	}
	SigningType_value = map[string]int32{
		"SIGNING_TYPE_SCHNORR":                 0,
		"SIGNING_TYPE_SCHNORR_WITH_TWEAK":      1,
		"SIGNING_TYPE_SCHNORR_WITH_COMMITMENT": 2,
		"SIGNING_TYPE_SCHNORR_ADAPTOR":         3,
	}
)

func (x SigningType) Enum() *SigningType {
	p := new(SigningType)
	*p = x
	return p
}

func (x SigningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_tss_tss_proto_enumTypes[2].Descriptor()
}

func (SigningType) Type() protoreflect.EnumType {
	return &file_bitway_tss_tss_proto_enumTypes[2]
}

func (x SigningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningType.Descriptor instead.
func (SigningType) EnumDescriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{2}
}

// Refreshing Status
type RefreshingStatus int32

const (
	// REFRESHING_STATUS_UNSPECIFIED defines the unknown refreshing status
	RefreshingStatus_REFRESHING_STATUS_UNSPECIFIED RefreshingStatus = 0
	// REFRESHING_STATUS_PENDING defines the status of the refreshing request which is pending
	RefreshingStatus_REFRESHING_STATUS_PENDING RefreshingStatus = 1
	// REFRESHING_STATUS_COMPLETED defines the status of the refreshing request which is completed
	RefreshingStatus_REFRESHING_STATUS_COMPLETED RefreshingStatus = 2
	// REFRESHING_STATUS_TIMEDOUT defines the status of the refreshing request which timed out
	RefreshingStatus_REFRESHING_STATUS_TIMEDOUT RefreshingStatus = 3
)

// Enum value maps for RefreshingStatus.
var (
	RefreshingStatus_name = map[int32]string{
		0: "REFRESHING_STATUS_UNSPECIFIED",
		1: "REFRESHING_STATUS_PENDING",
		2: "REFRESHING_STATUS_COMPLETED",
		3: "REFRESHING_STATUS_TIMEDOUT",
	}
	RefreshingStatus_value = map[string]int32{
		"REFRESHING_STATUS_UNSPECIFIED": 0,
		"REFRESHING_STATUS_PENDING":     1,
		"REFRESHING_STATUS_COMPLETED":   2,
		"REFRESHING_STATUS_TIMEDOUT":    3,
	}
)

func (x RefreshingStatus) Enum() *RefreshingStatus {
	p := new(RefreshingStatus)
	*p = x
	return p
}

func (x RefreshingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefreshingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_tss_tss_proto_enumTypes[3].Descriptor()
}

func (RefreshingStatus) Type() protoreflect.EnumType {
	return &file_bitway_tss_tss_proto_enumTypes[3]
}

func (x RefreshingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefreshingStatus.Descriptor instead.
func (RefreshingStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{3}
}

// DKG Request
type DKGRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// initiator module
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// dkg type
	Type_ string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// dkg intent
	Intent int32 `protobuf:"varint,4,opt,name=intent,proto3" json:"intent,omitempty"`
	// participant set
	Participants []string `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
	// threshold required to perform DKG
	Threshold uint32 `protobuf:"varint,6,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// batch size of keys to be generated
	BatchSize uint32 `protobuf:"varint,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// expiration time
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// status
	Status DKGStatus `protobuf:"varint,9,opt,name=status,proto3,enum=bitway.tss.DKGStatus" json:"status,omitempty"`
}

func (x *DKGRequest) Reset() {
	*x = DKGRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGRequest) ProtoMessage() {}

// Deprecated: Use DKGRequest.ProtoReflect.Descriptor instead.
func (*DKGRequest) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{0}
}

func (x *DKGRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DKGRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *DKGRequest) GetType_() string {
	if x != nil {
		return x.Type_
	}
	return ""
}

func (x *DKGRequest) GetIntent() int32 {
	if x != nil {
		return x.Intent
	}
	return 0
}

func (x *DKGRequest) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *DKGRequest) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *DKGRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *DKGRequest) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *DKGRequest) GetStatus() DKGStatus {
	if x != nil {
		return x.Status
	}
	return DKGStatus_DKG_STATUS_UNSPECIFIED
}

// DKG Completion
type DKGCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// public keys generated by DKG
	PubKeys []string `protobuf:"bytes,3,rep,name=pub_keys,json=pubKeys,proto3" json:"pub_keys,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,4,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DKGCompletion) Reset() {
	*x = DKGCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGCompletion) ProtoMessage() {}

// Deprecated: Use DKGCompletion.ProtoReflect.Descriptor instead.
func (*DKGCompletion) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{1}
}

func (x *DKGCompletion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DKGCompletion) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *DKGCompletion) GetPubKeys() []string {
	if x != nil {
		return x.PubKeys
	}
	return nil
}

func (x *DKGCompletion) GetConsensusPubkey() string {
	if x != nil {
		return x.ConsensusPubkey
	}
	return ""
}

func (x *DKGCompletion) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Signing Options
type SigningOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional tweak
	Tweak string `protobuf:"bytes,1,opt,name=tweak,proto3" json:"tweak,omitempty"`
	// optional public nonce, i.e. commitment
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// optional adaptor point
	AdaptorPoint string `protobuf:"bytes,3,opt,name=adaptor_point,json=adaptorPoint,proto3" json:"adaptor_point,omitempty"`
}

func (x *SigningOptions) Reset() {
	*x = SigningOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOptions) ProtoMessage() {}

// Deprecated: Use SigningOptions.ProtoReflect.Descriptor instead.
func (*SigningOptions) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{2}
}

func (x *SigningOptions) GetTweak() string {
	if x != nil {
		return x.Tweak
	}
	return ""
}

func (x *SigningOptions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *SigningOptions) GetAdaptorPoint() string {
	if x != nil {
		return x.AdaptorPoint
	}
	return ""
}

// Signing Request
type SigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// initiator module
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// module specific id
	ScopedId string `protobuf:"bytes,3,opt,name=scoped_id,json=scopedId,proto3" json:"scoped_id,omitempty"`
	// signing type
	Type_ SigningType `protobuf:"varint,4,opt,name=type,proto3,enum=bitway.tss.SigningType" json:"type,omitempty"`
	// signing intent
	Intent int32 `protobuf:"varint,5,opt,name=intent,proto3" json:"intent,omitempty"`
	// signing pub key
	PubKey string `protobuf:"bytes,6,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// hashes to be signed
	SigHashes []string `protobuf:"bytes,7,rep,name=sig_hashes,json=sigHashes,proto3" json:"sig_hashes,omitempty"`
	// signing options
	Options *SigningOptions `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	// creation time
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// status
	Status SigningStatus `protobuf:"varint,10,opt,name=status,proto3,enum=bitway.tss.SigningStatus" json:"status,omitempty"`
}

func (x *SigningRequest) Reset() {
	*x = SigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningRequest) ProtoMessage() {}

// Deprecated: Use SigningRequest.ProtoReflect.Descriptor instead.
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{3}
}

func (x *SigningRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SigningRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *SigningRequest) GetScopedId() string {
	if x != nil {
		return x.ScopedId
	}
	return ""
}

func (x *SigningRequest) GetType_() SigningType {
	if x != nil {
		return x.Type_
	}
	return SigningType_SIGNING_TYPE_SCHNORR
}

func (x *SigningRequest) GetIntent() int32 {
	if x != nil {
		return x.Intent
	}
	return 0
}

func (x *SigningRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *SigningRequest) GetSigHashes() []string {
	if x != nil {
		return x.SigHashes
	}
	return nil
}

func (x *SigningRequest) GetOptions() *SigningOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SigningRequest) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SigningRequest) GetStatus() SigningStatus {
	if x != nil {
		return x.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

// Refreshing Request
type RefreshingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// request id of the DKG corresponding to the key shares to be refreshed
	DkgId uint64 `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	// removed participant set
	RemovedParticipants []string `protobuf:"bytes,3,rep,name=removed_participants,json=removedParticipants,proto3" json:"removed_participants,omitempty"`
	// new threshold
	Threshold uint32 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// expiration time
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// status
	Status RefreshingStatus `protobuf:"varint,6,opt,name=status,proto3,enum=bitway.tss.RefreshingStatus" json:"status,omitempty"`
}

func (x *RefreshingRequest) Reset() {
	*x = RefreshingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshingRequest) ProtoMessage() {}

// Deprecated: Use RefreshingRequest.ProtoReflect.Descriptor instead.
func (*RefreshingRequest) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshingRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefreshingRequest) GetDkgId() uint64 {
	if x != nil {
		return x.DkgId
	}
	return 0
}

func (x *RefreshingRequest) GetRemovedParticipants() []string {
	if x != nil {
		return x.RemovedParticipants
	}
	return nil
}

func (x *RefreshingRequest) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *RefreshingRequest) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *RefreshingRequest) GetStatus() RefreshingStatus {
	if x != nil {
		return x.Status
	}
	return RefreshingStatus_REFRESHING_STATUS_UNSPECIFIED
}

// Refreshing Completion
type RefreshingCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// participant consensus pub key
	ConsensusPubkey string `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// hex encoded participant signature
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RefreshingCompletion) Reset() {
	*x = RefreshingCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_tss_tss_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshingCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshingCompletion) ProtoMessage() {}

// Deprecated: Use RefreshingCompletion.ProtoReflect.Descriptor instead.
func (*RefreshingCompletion) Descriptor() ([]byte, []int) {
	return file_bitway_tss_tss_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshingCompletion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefreshingCompletion) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *RefreshingCompletion) GetConsensusPubkey() string {
	if x != nil {
		return x.ConsensusPubkey
	}
	return ""
}

func (x *RefreshingCompletion) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_bitway_tss_tss_proto protoreflect.FileDescriptor

var file_bitway_tss_tss_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x74, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74,
	0x73, 0x73, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x44, 0x4b,
	0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62,
	0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x44, 0x4b, 0x47, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d,
	0x44, 0x4b, 0x47, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x77, 0x65, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x77, 0x65, 0x61,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x86, 0x03, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x6b, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6b, 0x67,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2a, 0x89, 0x01, 0x0a, 0x09, 0x44, 0x4b, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4b, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x2a, 0x81,
	0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x49, 0x47, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x4e, 0x4f, 0x52, 0x52, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x4e, 0x4f, 0x52, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x57, 0x45, 0x41, 0x4b, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x43, 0x48, 0x4e, 0x4f, 0x52, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x4e,
	0x4f, 0x52, 0x52, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x95, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x42, 0x90, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x69,
	0x74, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x73, 0x73, 0x42, 0x08, 0x54, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x69, 0x74, 0x77,
	0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2f, 0x74, 0x73,
	0x73, 0xa2, 0x02, 0x03, 0x42, 0x54, 0x58, 0xaa, 0x02, 0x0a, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79,
	0x2e, 0x54, 0x73, 0x73, 0xca, 0x02, 0x0a, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79, 0x5c, 0x54, 0x73,
	0x73, 0xe2, 0x02, 0x16, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79, 0x5c, 0x54, 0x73, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x42, 0x69, 0x74,
	0x77, 0x61, 0x79, 0x3a, 0x3a, 0x54, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bitway_tss_tss_proto_rawDescOnce sync.Once
	file_bitway_tss_tss_proto_rawDescData = file_bitway_tss_tss_proto_rawDesc
)

func file_bitway_tss_tss_proto_rawDescGZIP() []byte {
	file_bitway_tss_tss_proto_rawDescOnce.Do(func() {
		file_bitway_tss_tss_proto_rawDescData = protoimpl.X.CompressGZIP(file_bitway_tss_tss_proto_rawDescData)
	})
	return file_bitway_tss_tss_proto_rawDescData
}

var file_bitway_tss_tss_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bitway_tss_tss_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bitway_tss_tss_proto_goTypes = []interface{}{
	(DKGStatus)(0),                // 0: bitway.tss.DKGStatus
	(SigningStatus)(0),            // 1: bitway.tss.SigningStatus
	(SigningType)(0),              // 2: bitway.tss.SigningType
	(RefreshingStatus)(0),         // 3: bitway.tss.RefreshingStatus
	(*DKGRequest)(nil),            // 4: bitway.tss.DKGRequest
	(*DKGCompletion)(nil),         // 5: bitway.tss.DKGCompletion
	(*SigningOptions)(nil),        // 6: bitway.tss.SigningOptions
	(*SigningRequest)(nil),        // 7: bitway.tss.SigningRequest
	(*RefreshingRequest)(nil),     // 8: bitway.tss.RefreshingRequest
	(*RefreshingCompletion)(nil),  // 9: bitway.tss.RefreshingCompletion
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_bitway_tss_tss_proto_depIdxs = []int32{
	10, // 0: bitway.tss.DKGRequest.expiration_time:type_name -> google.protobuf.Timestamp
	0,  // 1: bitway.tss.DKGRequest.status:type_name -> bitway.tss.DKGStatus
	2,  // 2: bitway.tss.SigningRequest.type:type_name -> bitway.tss.SigningType
	6,  // 3: bitway.tss.SigningRequest.options:type_name -> bitway.tss.SigningOptions
	10, // 4: bitway.tss.SigningRequest.creation_time:type_name -> google.protobuf.Timestamp
	1,  // 5: bitway.tss.SigningRequest.status:type_name -> bitway.tss.SigningStatus
	10, // 6: bitway.tss.RefreshingRequest.expiration_time:type_name -> google.protobuf.Timestamp
	3,  // 7: bitway.tss.RefreshingRequest.status:type_name -> bitway.tss.RefreshingStatus
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_bitway_tss_tss_proto_init() }
func file_bitway_tss_tss_proto_init() {
	if File_bitway_tss_tss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bitway_tss_tss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_tss_tss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_tss_tss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_tss_tss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_tss_tss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_tss_tss_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshingCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bitway_tss_tss_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bitway_tss_tss_proto_goTypes,
		DependencyIndexes: file_bitway_tss_tss_proto_depIdxs,
		EnumInfos:         file_bitway_tss_tss_proto_enumTypes,
		MessageInfos:      file_bitway_tss_tss_proto_msgTypes,
	}.Build()
	File_bitway_tss_tss_proto = out.File
	file_bitway_tss_tss_proto_rawDesc = nil
	file_bitway_tss_tss_proto_goTypes = nil
	file_bitway_tss_tss_proto_depIdxs = nil
}
