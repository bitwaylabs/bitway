// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitway/lending/query.proto

package lending

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/bitway.lending.Query/Params"
	Query_Pool_FullMethodName              = "/bitway.lending.Query/Pool"
	Query_Pools_FullMethodName             = "/bitway.lending.Query/Pools"
	Query_PoolExchangeRate_FullMethodName  = "/bitway.lending.Query/PoolExchangeRate"
	Query_CollateralAddress_FullMethodName = "/bitway.lending.Query/CollateralAddress"
	Query_LiquidationPrice_FullMethodName  = "/bitway.lending.Query/LiquidationPrice"
	Query_DlcEventCount_FullMethodName     = "/bitway.lending.Query/DlcEventCount"
	Query_Loan_FullMethodName              = "/bitway.lending.Query/Loan"
	Query_Loans_FullMethodName             = "/bitway.lending.Query/Loans"
	Query_LoansByAddress_FullMethodName    = "/bitway.lending.Query/LoansByAddress"
	Query_LoansByOracle_FullMethodName     = "/bitway.lending.Query/LoansByOracle"
	Query_LoanCetInfos_FullMethodName      = "/bitway.lending.Query/LoanCetInfos"
	Query_LoanDlcMeta_FullMethodName       = "/bitway.lending.Query/LoanDlcMeta"
	Query_LoanAuthorization_FullMethodName = "/bitway.lending.Query/LoanAuthorization"
	Query_LoanDeposits_FullMethodName      = "/bitway.lending.Query/LoanDeposits"
	Query_Redemption_FullMethodName        = "/bitway.lending.Query/Redemption"
	Query_Repayment_FullMethodName         = "/bitway.lending.Query/Repayment"
	Query_CurrentInterest_FullMethodName   = "/bitway.lending.Query/CurrentInterest"
	Query_Referrer_FullMethodName          = "/bitway.lending.Query/Referrer"
	Query_Referrers_FullMethodName         = "/bitway.lending.Query/Referrers"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	PoolExchangeRate(ctx context.Context, in *QueryPoolExchangeRateRequest, opts ...grpc.CallOption) (*QueryPoolExchangeRateResponse, error)
	CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error)
	LiquidationPrice(ctx context.Context, in *QueryLiquidationPriceRequest, opts ...grpc.CallOption) (*QueryLiquidationPriceResponse, error)
	DlcEventCount(ctx context.Context, in *QueryDlcEventCountRequest, opts ...grpc.CallOption) (*QueryDlcEventCountResponse, error)
	Loan(ctx context.Context, in *QueryLoanRequest, opts ...grpc.CallOption) (*QueryLoanResponse, error)
	Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error)
	LoansByAddress(ctx context.Context, in *QueryLoansByAddressRequest, opts ...grpc.CallOption) (*QueryLoansByAddressResponse, error)
	LoansByOracle(ctx context.Context, in *QueryLoansByOracleRequest, opts ...grpc.CallOption) (*QueryLoansByOracleResponse, error)
	LoanCetInfos(ctx context.Context, in *QueryLoanCetInfosRequest, opts ...grpc.CallOption) (*QueryLoanCetInfosResponse, error)
	LoanDlcMeta(ctx context.Context, in *QueryLoanDlcMetaRequest, opts ...grpc.CallOption) (*QueryLoanDlcMetaResponse, error)
	LoanAuthorization(ctx context.Context, in *QueryLoanAuthorizationRequest, opts ...grpc.CallOption) (*QueryLoanAuthorizationResponse, error)
	LoanDeposits(ctx context.Context, in *QueryLoanDepositsRequest, opts ...grpc.CallOption) (*QueryLoanDepositsResponse, error)
	Redemption(ctx context.Context, in *QueryRedemptionRequest, opts ...grpc.CallOption) (*QueryRedemptionResponse, error)
	Repayment(ctx context.Context, in *QueryRepaymentRequest, opts ...grpc.CallOption) (*QueryRepaymentResponse, error)
	CurrentInterest(ctx context.Context, in *QueryCurrentInterestRequest, opts ...grpc.CallOption) (*QueryCurrentInterestResponse, error)
	Referrer(ctx context.Context, in *QueryReferrerRequest, opts ...grpc.CallOption) (*QueryReferrerResponse, error)
	Referrers(ctx context.Context, in *QueryReferrersRequest, opts ...grpc.CallOption) (*QueryReferrersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, Query_Pool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, Query_Pools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolExchangeRate(ctx context.Context, in *QueryPoolExchangeRateRequest, opts ...grpc.CallOption) (*QueryPoolExchangeRateResponse, error) {
	out := new(QueryPoolExchangeRateResponse)
	err := c.cc.Invoke(ctx, Query_PoolExchangeRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error) {
	out := new(QueryCollateralAddressResponse)
	err := c.cc.Invoke(ctx, Query_CollateralAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationPrice(ctx context.Context, in *QueryLiquidationPriceRequest, opts ...grpc.CallOption) (*QueryLiquidationPriceResponse, error) {
	out := new(QueryLiquidationPriceResponse)
	err := c.cc.Invoke(ctx, Query_LiquidationPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DlcEventCount(ctx context.Context, in *QueryDlcEventCountRequest, opts ...grpc.CallOption) (*QueryDlcEventCountResponse, error) {
	out := new(QueryDlcEventCountResponse)
	err := c.cc.Invoke(ctx, Query_DlcEventCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loan(ctx context.Context, in *QueryLoanRequest, opts ...grpc.CallOption) (*QueryLoanResponse, error) {
	out := new(QueryLoanResponse)
	err := c.cc.Invoke(ctx, Query_Loan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error) {
	out := new(QueryLoansResponse)
	err := c.cc.Invoke(ctx, Query_Loans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoansByAddress(ctx context.Context, in *QueryLoansByAddressRequest, opts ...grpc.CallOption) (*QueryLoansByAddressResponse, error) {
	out := new(QueryLoansByAddressResponse)
	err := c.cc.Invoke(ctx, Query_LoansByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoansByOracle(ctx context.Context, in *QueryLoansByOracleRequest, opts ...grpc.CallOption) (*QueryLoansByOracleResponse, error) {
	out := new(QueryLoansByOracleResponse)
	err := c.cc.Invoke(ctx, Query_LoansByOracle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanCetInfos(ctx context.Context, in *QueryLoanCetInfosRequest, opts ...grpc.CallOption) (*QueryLoanCetInfosResponse, error) {
	out := new(QueryLoanCetInfosResponse)
	err := c.cc.Invoke(ctx, Query_LoanCetInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanDlcMeta(ctx context.Context, in *QueryLoanDlcMetaRequest, opts ...grpc.CallOption) (*QueryLoanDlcMetaResponse, error) {
	out := new(QueryLoanDlcMetaResponse)
	err := c.cc.Invoke(ctx, Query_LoanDlcMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanAuthorization(ctx context.Context, in *QueryLoanAuthorizationRequest, opts ...grpc.CallOption) (*QueryLoanAuthorizationResponse, error) {
	out := new(QueryLoanAuthorizationResponse)
	err := c.cc.Invoke(ctx, Query_LoanAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanDeposits(ctx context.Context, in *QueryLoanDepositsRequest, opts ...grpc.CallOption) (*QueryLoanDepositsResponse, error) {
	out := new(QueryLoanDepositsResponse)
	err := c.cc.Invoke(ctx, Query_LoanDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Redemption(ctx context.Context, in *QueryRedemptionRequest, opts ...grpc.CallOption) (*QueryRedemptionResponse, error) {
	out := new(QueryRedemptionResponse)
	err := c.cc.Invoke(ctx, Query_Redemption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Repayment(ctx context.Context, in *QueryRepaymentRequest, opts ...grpc.CallOption) (*QueryRepaymentResponse, error) {
	out := new(QueryRepaymentResponse)
	err := c.cc.Invoke(ctx, Query_Repayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentInterest(ctx context.Context, in *QueryCurrentInterestRequest, opts ...grpc.CallOption) (*QueryCurrentInterestResponse, error) {
	out := new(QueryCurrentInterestResponse)
	err := c.cc.Invoke(ctx, Query_CurrentInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Referrer(ctx context.Context, in *QueryReferrerRequest, opts ...grpc.CallOption) (*QueryReferrerResponse, error) {
	out := new(QueryReferrerResponse)
	err := c.cc.Invoke(ctx, Query_Referrer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Referrers(ctx context.Context, in *QueryReferrersRequest, opts ...grpc.CallOption) (*QueryReferrersResponse, error) {
	out := new(QueryReferrersResponse)
	err := c.cc.Invoke(ctx, Query_Referrers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	PoolExchangeRate(context.Context, *QueryPoolExchangeRateRequest) (*QueryPoolExchangeRateResponse, error)
	CollateralAddress(context.Context, *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error)
	LiquidationPrice(context.Context, *QueryLiquidationPriceRequest) (*QueryLiquidationPriceResponse, error)
	DlcEventCount(context.Context, *QueryDlcEventCountRequest) (*QueryDlcEventCountResponse, error)
	Loan(context.Context, *QueryLoanRequest) (*QueryLoanResponse, error)
	Loans(context.Context, *QueryLoansRequest) (*QueryLoansResponse, error)
	LoansByAddress(context.Context, *QueryLoansByAddressRequest) (*QueryLoansByAddressResponse, error)
	LoansByOracle(context.Context, *QueryLoansByOracleRequest) (*QueryLoansByOracleResponse, error)
	LoanCetInfos(context.Context, *QueryLoanCetInfosRequest) (*QueryLoanCetInfosResponse, error)
	LoanDlcMeta(context.Context, *QueryLoanDlcMetaRequest) (*QueryLoanDlcMetaResponse, error)
	LoanAuthorization(context.Context, *QueryLoanAuthorizationRequest) (*QueryLoanAuthorizationResponse, error)
	LoanDeposits(context.Context, *QueryLoanDepositsRequest) (*QueryLoanDepositsResponse, error)
	Redemption(context.Context, *QueryRedemptionRequest) (*QueryRedemptionResponse, error)
	Repayment(context.Context, *QueryRepaymentRequest) (*QueryRepaymentResponse, error)
	CurrentInterest(context.Context, *QueryCurrentInterestRequest) (*QueryCurrentInterestResponse, error)
	Referrer(context.Context, *QueryReferrerRequest) (*QueryReferrerResponse, error)
	Referrers(context.Context, *QueryReferrersRequest) (*QueryReferrersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (UnimplementedQueryServer) Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (UnimplementedQueryServer) PoolExchangeRate(context.Context, *QueryPoolExchangeRateRequest) (*QueryPoolExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolExchangeRate not implemented")
}
func (UnimplementedQueryServer) CollateralAddress(context.Context, *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralAddress not implemented")
}
func (UnimplementedQueryServer) LiquidationPrice(context.Context, *QueryLiquidationPriceRequest) (*QueryLiquidationPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationPrice not implemented")
}
func (UnimplementedQueryServer) DlcEventCount(context.Context, *QueryDlcEventCountRequest) (*QueryDlcEventCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DlcEventCount not implemented")
}
func (UnimplementedQueryServer) Loan(context.Context, *QueryLoanRequest) (*QueryLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loan not implemented")
}
func (UnimplementedQueryServer) Loans(context.Context, *QueryLoansRequest) (*QueryLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loans not implemented")
}
func (UnimplementedQueryServer) LoansByAddress(context.Context, *QueryLoansByAddressRequest) (*QueryLoansByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoansByAddress not implemented")
}
func (UnimplementedQueryServer) LoansByOracle(context.Context, *QueryLoansByOracleRequest) (*QueryLoansByOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoansByOracle not implemented")
}
func (UnimplementedQueryServer) LoanCetInfos(context.Context, *QueryLoanCetInfosRequest) (*QueryLoanCetInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanCetInfos not implemented")
}
func (UnimplementedQueryServer) LoanDlcMeta(context.Context, *QueryLoanDlcMetaRequest) (*QueryLoanDlcMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanDlcMeta not implemented")
}
func (UnimplementedQueryServer) LoanAuthorization(context.Context, *QueryLoanAuthorizationRequest) (*QueryLoanAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAuthorization not implemented")
}
func (UnimplementedQueryServer) LoanDeposits(context.Context, *QueryLoanDepositsRequest) (*QueryLoanDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanDeposits not implemented")
}
func (UnimplementedQueryServer) Redemption(context.Context, *QueryRedemptionRequest) (*QueryRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redemption not implemented")
}
func (UnimplementedQueryServer) Repayment(context.Context, *QueryRepaymentRequest) (*QueryRepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repayment not implemented")
}
func (UnimplementedQueryServer) CurrentInterest(context.Context, *QueryCurrentInterestRequest) (*QueryCurrentInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentInterest not implemented")
}
func (UnimplementedQueryServer) Referrer(context.Context, *QueryReferrerRequest) (*QueryReferrerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Referrer not implemented")
}
func (UnimplementedQueryServer) Referrers(context.Context, *QueryReferrersRequest) (*QueryReferrersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Referrers not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolExchangeRate(ctx, req.(*QueryPoolExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollateralAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralAddress(ctx, req.(*QueryCollateralAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidationPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationPrice(ctx, req.(*QueryLiquidationPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DlcEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDlcEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DlcEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DlcEventCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DlcEventCount(ctx, req.(*QueryDlcEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Loan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loan(ctx, req.(*QueryLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Loans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loans(ctx, req.(*QueryLoansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoansByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoansByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoansByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoansByAddress(ctx, req.(*QueryLoansByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoansByOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansByOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoansByOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoansByOracle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoansByOracle(ctx, req.(*QueryLoansByOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanCetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanCetInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanCetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanCetInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanCetInfos(ctx, req.(*QueryLoanCetInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanDlcMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanDlcMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanDlcMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanDlcMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanDlcMeta(ctx, req.(*QueryLoanDlcMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanAuthorization(ctx, req.(*QueryLoanAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanDeposits(ctx, req.(*QueryLoanDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Redemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Redemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Redemption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Redemption(ctx, req.(*QueryRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Repayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Repayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Repayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Repayment(ctx, req.(*QueryRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentInterest(ctx, req.(*QueryCurrentInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Referrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReferrerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Referrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Referrer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Referrer(ctx, req.(*QueryReferrerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Referrers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReferrersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Referrers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Referrers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Referrers(ctx, req.(*QueryReferrersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.lending.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "PoolExchangeRate",
			Handler:    _Query_PoolExchangeRate_Handler,
		},
		{
			MethodName: "CollateralAddress",
			Handler:    _Query_CollateralAddress_Handler,
		},
		{
			MethodName: "LiquidationPrice",
			Handler:    _Query_LiquidationPrice_Handler,
		},
		{
			MethodName: "DlcEventCount",
			Handler:    _Query_DlcEventCount_Handler,
		},
		{
			MethodName: "Loan",
			Handler:    _Query_Loan_Handler,
		},
		{
			MethodName: "Loans",
			Handler:    _Query_Loans_Handler,
		},
		{
			MethodName: "LoansByAddress",
			Handler:    _Query_LoansByAddress_Handler,
		},
		{
			MethodName: "LoansByOracle",
			Handler:    _Query_LoansByOracle_Handler,
		},
		{
			MethodName: "LoanCetInfos",
			Handler:    _Query_LoanCetInfos_Handler,
		},
		{
			MethodName: "LoanDlcMeta",
			Handler:    _Query_LoanDlcMeta_Handler,
		},
		{
			MethodName: "LoanAuthorization",
			Handler:    _Query_LoanAuthorization_Handler,
		},
		{
			MethodName: "LoanDeposits",
			Handler:    _Query_LoanDeposits_Handler,
		},
		{
			MethodName: "Redemption",
			Handler:    _Query_Redemption_Handler,
		},
		{
			MethodName: "Repayment",
			Handler:    _Query_Repayment_Handler,
		},
		{
			MethodName: "CurrentInterest",
			Handler:    _Query_CurrentInterest_Handler,
		},
		{
			MethodName: "Referrer",
			Handler:    _Query_Referrer_Handler,
		},
		{
			MethodName: "Referrers",
			Handler:    _Query_Referrers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/lending/query.proto",
}
