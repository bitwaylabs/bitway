// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dlc

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_DLCOracle             protoreflect.MessageDescriptor
	fd_DLCOracle_id          protoreflect.FieldDescriptor
	fd_DLCOracle_dkg_id      protoreflect.FieldDescriptor
	fd_DLCOracle_desc        protoreflect.FieldDescriptor
	fd_DLCOracle_pubkey      protoreflect.FieldDescriptor
	fd_DLCOracle_nonce_index protoreflect.FieldDescriptor
	fd_DLCOracle_time        protoreflect.FieldDescriptor
	fd_DLCOracle_status      protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_DLCOracle = File_bitway_dlc_dlc_proto.Messages().ByName("DLCOracle")
	fd_DLCOracle_id = md_DLCOracle.Fields().ByName("id")
	fd_DLCOracle_dkg_id = md_DLCOracle.Fields().ByName("dkg_id")
	fd_DLCOracle_desc = md_DLCOracle.Fields().ByName("desc")
	fd_DLCOracle_pubkey = md_DLCOracle.Fields().ByName("pubkey")
	fd_DLCOracle_nonce_index = md_DLCOracle.Fields().ByName("nonce_index")
	fd_DLCOracle_time = md_DLCOracle.Fields().ByName("time")
	fd_DLCOracle_status = md_DLCOracle.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_DLCOracle)(nil)

type fastReflection_DLCOracle DLCOracle

func (x *DLCOracle) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DLCOracle)(x)
}

func (x *DLCOracle) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DLCOracle_messageType fastReflection_DLCOracle_messageType
var _ protoreflect.MessageType = fastReflection_DLCOracle_messageType{}

type fastReflection_DLCOracle_messageType struct{}

func (x fastReflection_DLCOracle_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DLCOracle)(nil)
}
func (x fastReflection_DLCOracle_messageType) New() protoreflect.Message {
	return new(fastReflection_DLCOracle)
}
func (x fastReflection_DLCOracle_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCOracle
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DLCOracle) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCOracle
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DLCOracle) Type() protoreflect.MessageType {
	return _fastReflection_DLCOracle_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DLCOracle) New() protoreflect.Message {
	return new(fastReflection_DLCOracle)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DLCOracle) Interface() protoreflect.ProtoMessage {
	return (*DLCOracle)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DLCOracle) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DLCOracle_id, value) {
			return
		}
	}
	if x.DkgId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DkgId)
		if !f(fd_DLCOracle_dkg_id, value) {
			return
		}
	}
	if x.Desc != "" {
		value := protoreflect.ValueOfString(x.Desc)
		if !f(fd_DLCOracle_desc, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DLCOracle_pubkey, value) {
			return
		}
	}
	if x.NonceIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NonceIndex)
		if !f(fd_DLCOracle_nonce_index, value) {
			return
		}
	}
	if x.Time != nil {
		value := protoreflect.ValueOfMessage(x.Time.ProtoReflect())
		if !f(fd_DLCOracle_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_DLCOracle_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DLCOracle) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.DLCOracle.id":
		return x.Id != uint64(0)
	case "bitway.dlc.DLCOracle.dkg_id":
		return x.DkgId != uint64(0)
	case "bitway.dlc.DLCOracle.desc":
		return x.Desc != ""
	case "bitway.dlc.DLCOracle.pubkey":
		return x.Pubkey != ""
	case "bitway.dlc.DLCOracle.nonce_index":
		return x.NonceIndex != uint64(0)
	case "bitway.dlc.DLCOracle.time":
		return x.Time != nil
	case "bitway.dlc.DLCOracle.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCOracle) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.DLCOracle.id":
		x.Id = uint64(0)
	case "bitway.dlc.DLCOracle.dkg_id":
		x.DkgId = uint64(0)
	case "bitway.dlc.DLCOracle.desc":
		x.Desc = ""
	case "bitway.dlc.DLCOracle.pubkey":
		x.Pubkey = ""
	case "bitway.dlc.DLCOracle.nonce_index":
		x.NonceIndex = uint64(0)
	case "bitway.dlc.DLCOracle.time":
		x.Time = nil
	case "bitway.dlc.DLCOracle.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DLCOracle) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.DLCOracle.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCOracle.dkg_id":
		value := x.DkgId
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCOracle.desc":
		value := x.Desc
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCOracle.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCOracle.nonce_index":
		value := x.NonceIndex
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCOracle.time":
		value := x.Time
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.dlc.DLCOracle.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCOracle) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.DLCOracle.id":
		x.Id = value.Uint()
	case "bitway.dlc.DLCOracle.dkg_id":
		x.DkgId = value.Uint()
	case "bitway.dlc.DLCOracle.desc":
		x.Desc = value.Interface().(string)
	case "bitway.dlc.DLCOracle.pubkey":
		x.Pubkey = value.Interface().(string)
	case "bitway.dlc.DLCOracle.nonce_index":
		x.NonceIndex = value.Uint()
	case "bitway.dlc.DLCOracle.time":
		x.Time = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.dlc.DLCOracle.status":
		x.Status = (DLCOracleStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCOracle) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCOracle.time":
		if x.Time == nil {
			x.Time = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Time.ProtoReflect())
	case "bitway.dlc.DLCOracle.id":
		panic(fmt.Errorf("field id of message bitway.dlc.DLCOracle is not mutable"))
	case "bitway.dlc.DLCOracle.dkg_id":
		panic(fmt.Errorf("field dkg_id of message bitway.dlc.DLCOracle is not mutable"))
	case "bitway.dlc.DLCOracle.desc":
		panic(fmt.Errorf("field desc of message bitway.dlc.DLCOracle is not mutable"))
	case "bitway.dlc.DLCOracle.pubkey":
		panic(fmt.Errorf("field pubkey of message bitway.dlc.DLCOracle is not mutable"))
	case "bitway.dlc.DLCOracle.nonce_index":
		panic(fmt.Errorf("field nonce_index of message bitway.dlc.DLCOracle is not mutable"))
	case "bitway.dlc.DLCOracle.status":
		panic(fmt.Errorf("field status of message bitway.dlc.DLCOracle is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DLCOracle) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCOracle.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCOracle.dkg_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCOracle.desc":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCOracle.pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCOracle.nonce_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCOracle.time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.dlc.DLCOracle.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCOracle"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCOracle does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DLCOracle) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.DLCOracle", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DLCOracle) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCOracle) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DLCOracle) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DLCOracle) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DLCOracle)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.DkgId != 0 {
			n += 1 + runtime.Sov(uint64(x.DkgId))
		}
		l = len(x.Desc)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NonceIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.NonceIndex))
		}
		if x.Time != nil {
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DLCOracle)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x38
		}
		if x.Time != nil {
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.NonceIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NonceIndex))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Desc) > 0 {
			i -= len(x.Desc)
			copy(dAtA[i:], x.Desc)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Desc)))
			i--
			dAtA[i] = 0x1a
		}
		if x.DkgId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DkgId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DLCOracle)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCOracle: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCOracle: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
				}
				x.DkgId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DkgId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Desc = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonceIndex", wireType)
				}
				x.NonceIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NonceIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Time == nil {
					x.Time = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Time); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= DLCOracleStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DCM        protoreflect.MessageDescriptor
	fd_DCM_id     protoreflect.FieldDescriptor
	fd_DCM_dkg_id protoreflect.FieldDescriptor
	fd_DCM_desc   protoreflect.FieldDescriptor
	fd_DCM_pubkey protoreflect.FieldDescriptor
	fd_DCM_time   protoreflect.FieldDescriptor
	fd_DCM_status protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_DCM = File_bitway_dlc_dlc_proto.Messages().ByName("DCM")
	fd_DCM_id = md_DCM.Fields().ByName("id")
	fd_DCM_dkg_id = md_DCM.Fields().ByName("dkg_id")
	fd_DCM_desc = md_DCM.Fields().ByName("desc")
	fd_DCM_pubkey = md_DCM.Fields().ByName("pubkey")
	fd_DCM_time = md_DCM.Fields().ByName("time")
	fd_DCM_status = md_DCM.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_DCM)(nil)

type fastReflection_DCM DCM

func (x *DCM) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DCM)(x)
}

func (x *DCM) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DCM_messageType fastReflection_DCM_messageType
var _ protoreflect.MessageType = fastReflection_DCM_messageType{}

type fastReflection_DCM_messageType struct{}

func (x fastReflection_DCM_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DCM)(nil)
}
func (x fastReflection_DCM_messageType) New() protoreflect.Message {
	return new(fastReflection_DCM)
}
func (x fastReflection_DCM_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DCM
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DCM) Descriptor() protoreflect.MessageDescriptor {
	return md_DCM
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DCM) Type() protoreflect.MessageType {
	return _fastReflection_DCM_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DCM) New() protoreflect.Message {
	return new(fastReflection_DCM)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DCM) Interface() protoreflect.ProtoMessage {
	return (*DCM)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DCM) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DCM_id, value) {
			return
		}
	}
	if x.DkgId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DkgId)
		if !f(fd_DCM_dkg_id, value) {
			return
		}
	}
	if x.Desc != "" {
		value := protoreflect.ValueOfString(x.Desc)
		if !f(fd_DCM_desc, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DCM_pubkey, value) {
			return
		}
	}
	if x.Time != nil {
		value := protoreflect.ValueOfMessage(x.Time.ProtoReflect())
		if !f(fd_DCM_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_DCM_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DCM) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.DCM.id":
		return x.Id != uint64(0)
	case "bitway.dlc.DCM.dkg_id":
		return x.DkgId != uint64(0)
	case "bitway.dlc.DCM.desc":
		return x.Desc != ""
	case "bitway.dlc.DCM.pubkey":
		return x.Pubkey != ""
	case "bitway.dlc.DCM.time":
		return x.Time != nil
	case "bitway.dlc.DCM.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DCM) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.DCM.id":
		x.Id = uint64(0)
	case "bitway.dlc.DCM.dkg_id":
		x.DkgId = uint64(0)
	case "bitway.dlc.DCM.desc":
		x.Desc = ""
	case "bitway.dlc.DCM.pubkey":
		x.Pubkey = ""
	case "bitway.dlc.DCM.time":
		x.Time = nil
	case "bitway.dlc.DCM.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DCM) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.DCM.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DCM.dkg_id":
		value := x.DkgId
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DCM.desc":
		value := x.Desc
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DCM.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DCM.time":
		value := x.Time
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.dlc.DCM.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DCM) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.DCM.id":
		x.Id = value.Uint()
	case "bitway.dlc.DCM.dkg_id":
		x.DkgId = value.Uint()
	case "bitway.dlc.DCM.desc":
		x.Desc = value.Interface().(string)
	case "bitway.dlc.DCM.pubkey":
		x.Pubkey = value.Interface().(string)
	case "bitway.dlc.DCM.time":
		x.Time = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.dlc.DCM.status":
		x.Status = (DCMStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DCM) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DCM.time":
		if x.Time == nil {
			x.Time = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Time.ProtoReflect())
	case "bitway.dlc.DCM.id":
		panic(fmt.Errorf("field id of message bitway.dlc.DCM is not mutable"))
	case "bitway.dlc.DCM.dkg_id":
		panic(fmt.Errorf("field dkg_id of message bitway.dlc.DCM is not mutable"))
	case "bitway.dlc.DCM.desc":
		panic(fmt.Errorf("field desc of message bitway.dlc.DCM is not mutable"))
	case "bitway.dlc.DCM.pubkey":
		panic(fmt.Errorf("field pubkey of message bitway.dlc.DCM is not mutable"))
	case "bitway.dlc.DCM.status":
		panic(fmt.Errorf("field status of message bitway.dlc.DCM is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DCM) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DCM.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DCM.dkg_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DCM.desc":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DCM.pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DCM.time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.dlc.DCM.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DCM"))
		}
		panic(fmt.Errorf("message bitway.dlc.DCM does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DCM) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.DCM", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DCM) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DCM) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DCM) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DCM) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DCM)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.DkgId != 0 {
			n += 1 + runtime.Sov(uint64(x.DkgId))
		}
		l = len(x.Desc)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Time != nil {
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DCM)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if x.Time != nil {
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Desc) > 0 {
			i -= len(x.Desc)
			copy(dAtA[i:], x.Desc)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Desc)))
			i--
			dAtA[i] = 0x1a
		}
		if x.DkgId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DkgId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DCM)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DCM: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DCM: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DkgId", wireType)
				}
				x.DkgId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DkgId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Desc = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Time == nil {
					x.Time = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Time); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= DCMStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DLCNonce               protoreflect.MessageDescriptor
	fd_DLCNonce_index         protoreflect.FieldDescriptor
	fd_DLCNonce_nonce         protoreflect.FieldDescriptor
	fd_DLCNonce_oracle_pubkey protoreflect.FieldDescriptor
	fd_DLCNonce_time          protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_DLCNonce = File_bitway_dlc_dlc_proto.Messages().ByName("DLCNonce")
	fd_DLCNonce_index = md_DLCNonce.Fields().ByName("index")
	fd_DLCNonce_nonce = md_DLCNonce.Fields().ByName("nonce")
	fd_DLCNonce_oracle_pubkey = md_DLCNonce.Fields().ByName("oracle_pubkey")
	fd_DLCNonce_time = md_DLCNonce.Fields().ByName("time")
}

var _ protoreflect.Message = (*fastReflection_DLCNonce)(nil)

type fastReflection_DLCNonce DLCNonce

func (x *DLCNonce) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DLCNonce)(x)
}

func (x *DLCNonce) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DLCNonce_messageType fastReflection_DLCNonce_messageType
var _ protoreflect.MessageType = fastReflection_DLCNonce_messageType{}

type fastReflection_DLCNonce_messageType struct{}

func (x fastReflection_DLCNonce_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DLCNonce)(nil)
}
func (x fastReflection_DLCNonce_messageType) New() protoreflect.Message {
	return new(fastReflection_DLCNonce)
}
func (x fastReflection_DLCNonce_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCNonce
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DLCNonce) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCNonce
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DLCNonce) Type() protoreflect.MessageType {
	return _fastReflection_DLCNonce_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DLCNonce) New() protoreflect.Message {
	return new(fastReflection_DLCNonce)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DLCNonce) Interface() protoreflect.ProtoMessage {
	return (*DLCNonce)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DLCNonce) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_DLCNonce_index, value) {
			return
		}
	}
	if x.Nonce != "" {
		value := protoreflect.ValueOfString(x.Nonce)
		if !f(fd_DLCNonce_nonce, value) {
			return
		}
	}
	if x.OraclePubkey != "" {
		value := protoreflect.ValueOfString(x.OraclePubkey)
		if !f(fd_DLCNonce_oracle_pubkey, value) {
			return
		}
	}
	if x.Time != nil {
		value := protoreflect.ValueOfMessage(x.Time.ProtoReflect())
		if !f(fd_DLCNonce_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DLCNonce) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.DLCNonce.index":
		return x.Index != uint64(0)
	case "bitway.dlc.DLCNonce.nonce":
		return x.Nonce != ""
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		return x.OraclePubkey != ""
	case "bitway.dlc.DLCNonce.time":
		return x.Time != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCNonce) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.DLCNonce.index":
		x.Index = uint64(0)
	case "bitway.dlc.DLCNonce.nonce":
		x.Nonce = ""
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		x.OraclePubkey = ""
	case "bitway.dlc.DLCNonce.time":
		x.Time = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DLCNonce) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.DLCNonce.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCNonce.nonce":
		value := x.Nonce
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		value := x.OraclePubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCNonce.time":
		value := x.Time
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCNonce) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.DLCNonce.index":
		x.Index = value.Uint()
	case "bitway.dlc.DLCNonce.nonce":
		x.Nonce = value.Interface().(string)
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		x.OraclePubkey = value.Interface().(string)
	case "bitway.dlc.DLCNonce.time":
		x.Time = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCNonce) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCNonce.time":
		if x.Time == nil {
			x.Time = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Time.ProtoReflect())
	case "bitway.dlc.DLCNonce.index":
		panic(fmt.Errorf("field index of message bitway.dlc.DLCNonce is not mutable"))
	case "bitway.dlc.DLCNonce.nonce":
		panic(fmt.Errorf("field nonce of message bitway.dlc.DLCNonce is not mutable"))
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		panic(fmt.Errorf("field oracle_pubkey of message bitway.dlc.DLCNonce is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DLCNonce) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCNonce.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCNonce.nonce":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCNonce.oracle_pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCNonce.time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCNonce"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCNonce does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DLCNonce) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.DLCNonce", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DLCNonce) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCNonce) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DLCNonce) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DLCNonce) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DLCNonce)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.Nonce)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OraclePubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Time != nil {
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DLCNonce)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Time != nil {
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.OraclePubkey) > 0 {
			i -= len(x.OraclePubkey)
			copy(dAtA[i:], x.OraclePubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OraclePubkey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Nonce) > 0 {
			i -= len(x.Nonce)
			copy(dAtA[i:], x.Nonce)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Nonce)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DLCNonce)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCNonce: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCNonce: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Nonce = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OraclePubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OraclePubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Time == nil {
					x.Time = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Time); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DLCEvent_6_list)(nil)

type _DLCEvent_6_list struct {
	list *[]string
}

func (x *_DLCEvent_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DLCEvent_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_DLCEvent_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_DLCEvent_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_DLCEvent_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message DLCEvent at list field Outcomes as it is not of Message kind"))
}

func (x *_DLCEvent_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_DLCEvent_6_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_DLCEvent_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DLCEvent               protoreflect.MessageDescriptor
	fd_DLCEvent_id            protoreflect.FieldDescriptor
	fd_DLCEvent_type          protoreflect.FieldDescriptor
	fd_DLCEvent_nonce         protoreflect.FieldDescriptor
	fd_DLCEvent_pubkey        protoreflect.FieldDescriptor
	fd_DLCEvent_description   protoreflect.FieldDescriptor
	fd_DLCEvent_outcomes      protoreflect.FieldDescriptor
	fd_DLCEvent_has_triggered protoreflect.FieldDescriptor
	fd_DLCEvent_outcome_index protoreflect.FieldDescriptor
	fd_DLCEvent_publish_at    protoreflect.FieldDescriptor
	fd_DLCEvent_trigger_at    protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_DLCEvent = File_bitway_dlc_dlc_proto.Messages().ByName("DLCEvent")
	fd_DLCEvent_id = md_DLCEvent.Fields().ByName("id")
	fd_DLCEvent_type = md_DLCEvent.Fields().ByName("type")
	fd_DLCEvent_nonce = md_DLCEvent.Fields().ByName("nonce")
	fd_DLCEvent_pubkey = md_DLCEvent.Fields().ByName("pubkey")
	fd_DLCEvent_description = md_DLCEvent.Fields().ByName("description")
	fd_DLCEvent_outcomes = md_DLCEvent.Fields().ByName("outcomes")
	fd_DLCEvent_has_triggered = md_DLCEvent.Fields().ByName("has_triggered")
	fd_DLCEvent_outcome_index = md_DLCEvent.Fields().ByName("outcome_index")
	fd_DLCEvent_publish_at = md_DLCEvent.Fields().ByName("publish_at")
	fd_DLCEvent_trigger_at = md_DLCEvent.Fields().ByName("trigger_at")
}

var _ protoreflect.Message = (*fastReflection_DLCEvent)(nil)

type fastReflection_DLCEvent DLCEvent

func (x *DLCEvent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DLCEvent)(x)
}

func (x *DLCEvent) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DLCEvent_messageType fastReflection_DLCEvent_messageType
var _ protoreflect.MessageType = fastReflection_DLCEvent_messageType{}

type fastReflection_DLCEvent_messageType struct{}

func (x fastReflection_DLCEvent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DLCEvent)(nil)
}
func (x fastReflection_DLCEvent_messageType) New() protoreflect.Message {
	return new(fastReflection_DLCEvent)
}
func (x fastReflection_DLCEvent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCEvent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DLCEvent) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCEvent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DLCEvent) Type() protoreflect.MessageType {
	return _fastReflection_DLCEvent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DLCEvent) New() protoreflect.Message {
	return new(fastReflection_DLCEvent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DLCEvent) Interface() protoreflect.ProtoMessage {
	return (*DLCEvent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DLCEvent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DLCEvent_id, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_DLCEvent_type, value) {
			return
		}
	}
	if x.Nonce != "" {
		value := protoreflect.ValueOfString(x.Nonce)
		if !f(fd_DLCEvent_nonce, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DLCEvent_pubkey, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_DLCEvent_description, value) {
			return
		}
	}
	if len(x.Outcomes) != 0 {
		value := protoreflect.ValueOfList(&_DLCEvent_6_list{list: &x.Outcomes})
		if !f(fd_DLCEvent_outcomes, value) {
			return
		}
	}
	if x.HasTriggered != false {
		value := protoreflect.ValueOfBool(x.HasTriggered)
		if !f(fd_DLCEvent_has_triggered, value) {
			return
		}
	}
	if x.OutcomeIndex != int32(0) {
		value := protoreflect.ValueOfInt32(x.OutcomeIndex)
		if !f(fd_DLCEvent_outcome_index, value) {
			return
		}
	}
	if x.PublishAt != nil {
		value := protoreflect.ValueOfMessage(x.PublishAt.ProtoReflect())
		if !f(fd_DLCEvent_publish_at, value) {
			return
		}
	}
	if x.TriggerAt != nil {
		value := protoreflect.ValueOfMessage(x.TriggerAt.ProtoReflect())
		if !f(fd_DLCEvent_trigger_at, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DLCEvent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.DLCEvent.id":
		return x.Id != uint64(0)
	case "bitway.dlc.DLCEvent.type":
		return x.Type_ != 0
	case "bitway.dlc.DLCEvent.nonce":
		return x.Nonce != ""
	case "bitway.dlc.DLCEvent.pubkey":
		return x.Pubkey != ""
	case "bitway.dlc.DLCEvent.description":
		return x.Description != ""
	case "bitway.dlc.DLCEvent.outcomes":
		return len(x.Outcomes) != 0
	case "bitway.dlc.DLCEvent.has_triggered":
		return x.HasTriggered != false
	case "bitway.dlc.DLCEvent.outcome_index":
		return x.OutcomeIndex != int32(0)
	case "bitway.dlc.DLCEvent.publish_at":
		return x.PublishAt != nil
	case "bitway.dlc.DLCEvent.trigger_at":
		return x.TriggerAt != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCEvent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.DLCEvent.id":
		x.Id = uint64(0)
	case "bitway.dlc.DLCEvent.type":
		x.Type_ = 0
	case "bitway.dlc.DLCEvent.nonce":
		x.Nonce = ""
	case "bitway.dlc.DLCEvent.pubkey":
		x.Pubkey = ""
	case "bitway.dlc.DLCEvent.description":
		x.Description = ""
	case "bitway.dlc.DLCEvent.outcomes":
		x.Outcomes = nil
	case "bitway.dlc.DLCEvent.has_triggered":
		x.HasTriggered = false
	case "bitway.dlc.DLCEvent.outcome_index":
		x.OutcomeIndex = int32(0)
	case "bitway.dlc.DLCEvent.publish_at":
		x.PublishAt = nil
	case "bitway.dlc.DLCEvent.trigger_at":
		x.TriggerAt = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DLCEvent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.DLCEvent.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCEvent.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "bitway.dlc.DLCEvent.nonce":
		value := x.Nonce
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCEvent.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCEvent.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCEvent.outcomes":
		if len(x.Outcomes) == 0 {
			return protoreflect.ValueOfList(&_DLCEvent_6_list{})
		}
		listValue := &_DLCEvent_6_list{list: &x.Outcomes}
		return protoreflect.ValueOfList(listValue)
	case "bitway.dlc.DLCEvent.has_triggered":
		value := x.HasTriggered
		return protoreflect.ValueOfBool(value)
	case "bitway.dlc.DLCEvent.outcome_index":
		value := x.OutcomeIndex
		return protoreflect.ValueOfInt32(value)
	case "bitway.dlc.DLCEvent.publish_at":
		value := x.PublishAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "bitway.dlc.DLCEvent.trigger_at":
		value := x.TriggerAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCEvent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.DLCEvent.id":
		x.Id = value.Uint()
	case "bitway.dlc.DLCEvent.type":
		x.Type_ = (DlcEventType)(value.Enum())
	case "bitway.dlc.DLCEvent.nonce":
		x.Nonce = value.Interface().(string)
	case "bitway.dlc.DLCEvent.pubkey":
		x.Pubkey = value.Interface().(string)
	case "bitway.dlc.DLCEvent.description":
		x.Description = value.Interface().(string)
	case "bitway.dlc.DLCEvent.outcomes":
		lv := value.List()
		clv := lv.(*_DLCEvent_6_list)
		x.Outcomes = *clv.list
	case "bitway.dlc.DLCEvent.has_triggered":
		x.HasTriggered = value.Bool()
	case "bitway.dlc.DLCEvent.outcome_index":
		x.OutcomeIndex = int32(value.Int())
	case "bitway.dlc.DLCEvent.publish_at":
		x.PublishAt = value.Message().Interface().(*timestamppb.Timestamp)
	case "bitway.dlc.DLCEvent.trigger_at":
		x.TriggerAt = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCEvent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCEvent.outcomes":
		if x.Outcomes == nil {
			x.Outcomes = []string{}
		}
		value := &_DLCEvent_6_list{list: &x.Outcomes}
		return protoreflect.ValueOfList(value)
	case "bitway.dlc.DLCEvent.publish_at":
		if x.PublishAt == nil {
			x.PublishAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.PublishAt.ProtoReflect())
	case "bitway.dlc.DLCEvent.trigger_at":
		if x.TriggerAt == nil {
			x.TriggerAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.TriggerAt.ProtoReflect())
	case "bitway.dlc.DLCEvent.id":
		panic(fmt.Errorf("field id of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.type":
		panic(fmt.Errorf("field type of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.nonce":
		panic(fmt.Errorf("field nonce of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.pubkey":
		panic(fmt.Errorf("field pubkey of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.description":
		panic(fmt.Errorf("field description of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.has_triggered":
		panic(fmt.Errorf("field has_triggered of message bitway.dlc.DLCEvent is not mutable"))
	case "bitway.dlc.DLCEvent.outcome_index":
		panic(fmt.Errorf("field outcome_index of message bitway.dlc.DLCEvent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DLCEvent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCEvent.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCEvent.type":
		return protoreflect.ValueOfEnum(0)
	case "bitway.dlc.DLCEvent.nonce":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCEvent.pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCEvent.description":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCEvent.outcomes":
		list := []string{}
		return protoreflect.ValueOfList(&_DLCEvent_6_list{list: &list})
	case "bitway.dlc.DLCEvent.has_triggered":
		return protoreflect.ValueOfBool(false)
	case "bitway.dlc.DLCEvent.outcome_index":
		return protoreflect.ValueOfInt32(int32(0))
	case "bitway.dlc.DLCEvent.publish_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "bitway.dlc.DLCEvent.trigger_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCEvent"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCEvent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DLCEvent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.DLCEvent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DLCEvent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCEvent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DLCEvent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DLCEvent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DLCEvent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.Nonce)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Outcomes) > 0 {
			for _, s := range x.Outcomes {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.HasTriggered {
			n += 2
		}
		if x.OutcomeIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.OutcomeIndex))
		}
		if x.PublishAt != nil {
			l = options.Size(x.PublishAt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TriggerAt != nil {
			l = options.Size(x.TriggerAt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DLCEvent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TriggerAt != nil {
			encoded, err := options.Marshal(x.TriggerAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.PublishAt != nil {
			encoded, err := options.Marshal(x.PublishAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.OutcomeIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OutcomeIndex))
			i--
			dAtA[i] = 0x40
		}
		if x.HasTriggered {
			i--
			if x.HasTriggered {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if len(x.Outcomes) > 0 {
			for iNdEx := len(x.Outcomes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Outcomes[iNdEx])
				copy(dAtA[i:], x.Outcomes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Outcomes[iNdEx])))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Nonce) > 0 {
			i -= len(x.Nonce)
			copy(dAtA[i:], x.Nonce)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Nonce)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DLCEvent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCEvent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCEvent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= DlcEventType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Nonce = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Outcomes", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Outcomes = append(x.Outcomes, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HasTriggered", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.HasTriggered = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutcomeIndex", wireType)
				}
				x.OutcomeIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OutcomeIndex |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PublishAt == nil {
					x.PublishAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PublishAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TriggerAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TriggerAt == nil {
					x.TriggerAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TriggerAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DLCAttestation           protoreflect.MessageDescriptor
	fd_DLCAttestation_id        protoreflect.FieldDescriptor
	fd_DLCAttestation_event_id  protoreflect.FieldDescriptor
	fd_DLCAttestation_outcome   protoreflect.FieldDescriptor
	fd_DLCAttestation_pubkey    protoreflect.FieldDescriptor
	fd_DLCAttestation_signature protoreflect.FieldDescriptor
	fd_DLCAttestation_time      protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_DLCAttestation = File_bitway_dlc_dlc_proto.Messages().ByName("DLCAttestation")
	fd_DLCAttestation_id = md_DLCAttestation.Fields().ByName("id")
	fd_DLCAttestation_event_id = md_DLCAttestation.Fields().ByName("event_id")
	fd_DLCAttestation_outcome = md_DLCAttestation.Fields().ByName("outcome")
	fd_DLCAttestation_pubkey = md_DLCAttestation.Fields().ByName("pubkey")
	fd_DLCAttestation_signature = md_DLCAttestation.Fields().ByName("signature")
	fd_DLCAttestation_time = md_DLCAttestation.Fields().ByName("time")
}

var _ protoreflect.Message = (*fastReflection_DLCAttestation)(nil)

type fastReflection_DLCAttestation DLCAttestation

func (x *DLCAttestation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DLCAttestation)(x)
}

func (x *DLCAttestation) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DLCAttestation_messageType fastReflection_DLCAttestation_messageType
var _ protoreflect.MessageType = fastReflection_DLCAttestation_messageType{}

type fastReflection_DLCAttestation_messageType struct{}

func (x fastReflection_DLCAttestation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DLCAttestation)(nil)
}
func (x fastReflection_DLCAttestation_messageType) New() protoreflect.Message {
	return new(fastReflection_DLCAttestation)
}
func (x fastReflection_DLCAttestation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCAttestation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DLCAttestation) Descriptor() protoreflect.MessageDescriptor {
	return md_DLCAttestation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DLCAttestation) Type() protoreflect.MessageType {
	return _fastReflection_DLCAttestation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DLCAttestation) New() protoreflect.Message {
	return new(fastReflection_DLCAttestation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DLCAttestation) Interface() protoreflect.ProtoMessage {
	return (*DLCAttestation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DLCAttestation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DLCAttestation_id, value) {
			return
		}
	}
	if x.EventId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EventId)
		if !f(fd_DLCAttestation_event_id, value) {
			return
		}
	}
	if x.Outcome != "" {
		value := protoreflect.ValueOfString(x.Outcome)
		if !f(fd_DLCAttestation_outcome, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DLCAttestation_pubkey, value) {
			return
		}
	}
	if x.Signature != "" {
		value := protoreflect.ValueOfString(x.Signature)
		if !f(fd_DLCAttestation_signature, value) {
			return
		}
	}
	if x.Time != nil {
		value := protoreflect.ValueOfMessage(x.Time.ProtoReflect())
		if !f(fd_DLCAttestation_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DLCAttestation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.DLCAttestation.id":
		return x.Id != uint64(0)
	case "bitway.dlc.DLCAttestation.event_id":
		return x.EventId != uint64(0)
	case "bitway.dlc.DLCAttestation.outcome":
		return x.Outcome != ""
	case "bitway.dlc.DLCAttestation.pubkey":
		return x.Pubkey != ""
	case "bitway.dlc.DLCAttestation.signature":
		return x.Signature != ""
	case "bitway.dlc.DLCAttestation.time":
		return x.Time != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCAttestation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.DLCAttestation.id":
		x.Id = uint64(0)
	case "bitway.dlc.DLCAttestation.event_id":
		x.EventId = uint64(0)
	case "bitway.dlc.DLCAttestation.outcome":
		x.Outcome = ""
	case "bitway.dlc.DLCAttestation.pubkey":
		x.Pubkey = ""
	case "bitway.dlc.DLCAttestation.signature":
		x.Signature = ""
	case "bitway.dlc.DLCAttestation.time":
		x.Time = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DLCAttestation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.DLCAttestation.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCAttestation.event_id":
		value := x.EventId
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.DLCAttestation.outcome":
		value := x.Outcome
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCAttestation.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCAttestation.signature":
		value := x.Signature
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.DLCAttestation.time":
		value := x.Time
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCAttestation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.DLCAttestation.id":
		x.Id = value.Uint()
	case "bitway.dlc.DLCAttestation.event_id":
		x.EventId = value.Uint()
	case "bitway.dlc.DLCAttestation.outcome":
		x.Outcome = value.Interface().(string)
	case "bitway.dlc.DLCAttestation.pubkey":
		x.Pubkey = value.Interface().(string)
	case "bitway.dlc.DLCAttestation.signature":
		x.Signature = value.Interface().(string)
	case "bitway.dlc.DLCAttestation.time":
		x.Time = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCAttestation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCAttestation.time":
		if x.Time == nil {
			x.Time = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Time.ProtoReflect())
	case "bitway.dlc.DLCAttestation.id":
		panic(fmt.Errorf("field id of message bitway.dlc.DLCAttestation is not mutable"))
	case "bitway.dlc.DLCAttestation.event_id":
		panic(fmt.Errorf("field event_id of message bitway.dlc.DLCAttestation is not mutable"))
	case "bitway.dlc.DLCAttestation.outcome":
		panic(fmt.Errorf("field outcome of message bitway.dlc.DLCAttestation is not mutable"))
	case "bitway.dlc.DLCAttestation.pubkey":
		panic(fmt.Errorf("field pubkey of message bitway.dlc.DLCAttestation is not mutable"))
	case "bitway.dlc.DLCAttestation.signature":
		panic(fmt.Errorf("field signature of message bitway.dlc.DLCAttestation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DLCAttestation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.DLCAttestation.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCAttestation.event_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.DLCAttestation.outcome":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCAttestation.pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCAttestation.signature":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.DLCAttestation.time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.DLCAttestation"))
		}
		panic(fmt.Errorf("message bitway.dlc.DLCAttestation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DLCAttestation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.DLCAttestation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DLCAttestation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DLCAttestation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DLCAttestation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DLCAttestation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DLCAttestation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.EventId != 0 {
			n += 1 + runtime.Sov(uint64(x.EventId))
		}
		l = len(x.Outcome)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Time != nil {
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DLCAttestation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Time != nil {
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Outcome) > 0 {
			i -= len(x.Outcome)
			copy(dAtA[i:], x.Outcome)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Outcome)))
			i--
			dAtA[i] = 0x1a
		}
		if x.EventId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EventId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DLCAttestation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCAttestation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DLCAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
				}
				x.EventId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EventId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Outcome = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Time == nil {
					x.Time = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Time); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OracleParticipantLiveness                   protoreflect.MessageDescriptor
	fd_OracleParticipantLiveness_consensus_pubkey  protoreflect.FieldDescriptor
	fd_OracleParticipantLiveness_is_alive          protoreflect.FieldDescriptor
	fd_OracleParticipantLiveness_last_dkg_id       protoreflect.FieldDescriptor
	fd_OracleParticipantLiveness_last_block_height protoreflect.FieldDescriptor
)

func init() {
	file_bitway_dlc_dlc_proto_init()
	md_OracleParticipantLiveness = File_bitway_dlc_dlc_proto.Messages().ByName("OracleParticipantLiveness")
	fd_OracleParticipantLiveness_consensus_pubkey = md_OracleParticipantLiveness.Fields().ByName("consensus_pubkey")
	fd_OracleParticipantLiveness_is_alive = md_OracleParticipantLiveness.Fields().ByName("is_alive")
	fd_OracleParticipantLiveness_last_dkg_id = md_OracleParticipantLiveness.Fields().ByName("last_dkg_id")
	fd_OracleParticipantLiveness_last_block_height = md_OracleParticipantLiveness.Fields().ByName("last_block_height")
}

var _ protoreflect.Message = (*fastReflection_OracleParticipantLiveness)(nil)

type fastReflection_OracleParticipantLiveness OracleParticipantLiveness

func (x *OracleParticipantLiveness) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OracleParticipantLiveness)(x)
}

func (x *OracleParticipantLiveness) slowProtoReflect() protoreflect.Message {
	mi := &file_bitway_dlc_dlc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OracleParticipantLiveness_messageType fastReflection_OracleParticipantLiveness_messageType
var _ protoreflect.MessageType = fastReflection_OracleParticipantLiveness_messageType{}

type fastReflection_OracleParticipantLiveness_messageType struct{}

func (x fastReflection_OracleParticipantLiveness_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OracleParticipantLiveness)(nil)
}
func (x fastReflection_OracleParticipantLiveness_messageType) New() protoreflect.Message {
	return new(fastReflection_OracleParticipantLiveness)
}
func (x fastReflection_OracleParticipantLiveness_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleParticipantLiveness
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OracleParticipantLiveness) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleParticipantLiveness
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OracleParticipantLiveness) Type() protoreflect.MessageType {
	return _fastReflection_OracleParticipantLiveness_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OracleParticipantLiveness) New() protoreflect.Message {
	return new(fastReflection_OracleParticipantLiveness)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OracleParticipantLiveness) Interface() protoreflect.ProtoMessage {
	return (*OracleParticipantLiveness)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OracleParticipantLiveness) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ConsensusPubkey != "" {
		value := protoreflect.ValueOfString(x.ConsensusPubkey)
		if !f(fd_OracleParticipantLiveness_consensus_pubkey, value) {
			return
		}
	}
	if x.IsAlive != false {
		value := protoreflect.ValueOfBool(x.IsAlive)
		if !f(fd_OracleParticipantLiveness_is_alive, value) {
			return
		}
	}
	if x.LastDkgId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastDkgId)
		if !f(fd_OracleParticipantLiveness_last_dkg_id, value) {
			return
		}
	}
	if x.LastBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastBlockHeight)
		if !f(fd_OracleParticipantLiveness_last_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OracleParticipantLiveness) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		return x.ConsensusPubkey != ""
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		return x.IsAlive != false
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		return x.LastDkgId != uint64(0)
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		return x.LastBlockHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleParticipantLiveness) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		x.ConsensusPubkey = ""
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		x.IsAlive = false
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		x.LastDkgId = uint64(0)
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		x.LastBlockHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OracleParticipantLiveness) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		value := x.ConsensusPubkey
		return protoreflect.ValueOfString(value)
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		value := x.IsAlive
		return protoreflect.ValueOfBool(value)
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		value := x.LastDkgId
		return protoreflect.ValueOfUint64(value)
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		value := x.LastBlockHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleParticipantLiveness) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		x.ConsensusPubkey = value.Interface().(string)
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		x.IsAlive = value.Bool()
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		x.LastDkgId = value.Uint()
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		x.LastBlockHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleParticipantLiveness) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		panic(fmt.Errorf("field consensus_pubkey of message bitway.dlc.OracleParticipantLiveness is not mutable"))
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		panic(fmt.Errorf("field is_alive of message bitway.dlc.OracleParticipantLiveness is not mutable"))
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		panic(fmt.Errorf("field last_dkg_id of message bitway.dlc.OracleParticipantLiveness is not mutable"))
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		panic(fmt.Errorf("field last_block_height of message bitway.dlc.OracleParticipantLiveness is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OracleParticipantLiveness) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "bitway.dlc.OracleParticipantLiveness.consensus_pubkey":
		return protoreflect.ValueOfString("")
	case "bitway.dlc.OracleParticipantLiveness.is_alive":
		return protoreflect.ValueOfBool(false)
	case "bitway.dlc.OracleParticipantLiveness.last_dkg_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "bitway.dlc.OracleParticipantLiveness.last_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: bitway.dlc.OracleParticipantLiveness"))
		}
		panic(fmt.Errorf("message bitway.dlc.OracleParticipantLiveness does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OracleParticipantLiveness) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in bitway.dlc.OracleParticipantLiveness", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OracleParticipantLiveness) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleParticipantLiveness) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OracleParticipantLiveness) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OracleParticipantLiveness) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OracleParticipantLiveness)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ConsensusPubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsAlive {
			n += 2
		}
		if x.LastDkgId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastDkgId))
		}
		if x.LastBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.LastBlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OracleParticipantLiveness)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastBlockHeight))
			i--
			dAtA[i] = 0x20
		}
		if x.LastDkgId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastDkgId))
			i--
			dAtA[i] = 0x18
		}
		if x.IsAlive {
			i--
			if x.IsAlive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if len(x.ConsensusPubkey) > 0 {
			i -= len(x.ConsensusPubkey)
			copy(dAtA[i:], x.ConsensusPubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConsensusPubkey)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OracleParticipantLiveness)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleParticipantLiveness: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleParticipantLiveness: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConsensusPubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsAlive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsAlive = bool(v != 0)
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastDkgId", wireType)
				}
				x.LastDkgId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastDkgId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
				}
				x.LastBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: bitway/dlc/dlc.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DLCOracleStatus int32

const (
	DLCOracleStatus_Oracle_status_Enable  DLCOracleStatus = 0
	DLCOracleStatus_Oracle_status_Disable DLCOracleStatus = 1
)

// Enum value maps for DLCOracleStatus.
var (
	DLCOracleStatus_name = map[int32]string{
		0: "Oracle_status_Enable",
		1: "Oracle_status_Disable",
	}
	DLCOracleStatus_value = map[string]int32{
		"Oracle_status_Enable":  0,
		"Oracle_status_Disable": 1,
	}
)

func (x DLCOracleStatus) Enum() *DLCOracleStatus {
	p := new(DLCOracleStatus)
	*p = x
	return p
}

func (x DLCOracleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DLCOracleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_dlc_dlc_proto_enumTypes[0].Descriptor()
}

func (DLCOracleStatus) Type() protoreflect.EnumType {
	return &file_bitway_dlc_dlc_proto_enumTypes[0]
}

func (x DLCOracleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DLCOracleStatus.Descriptor instead.
func (DLCOracleStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{0}
}

type DCMStatus int32

const (
	DCMStatus_DCM_status_Enable  DCMStatus = 0
	DCMStatus_DCM_status_Disable DCMStatus = 1
)

// Enum value maps for DCMStatus.
var (
	DCMStatus_name = map[int32]string{
		0: "DCM_status_Enable",
		1: "DCM_status_Disable",
	}
	DCMStatus_value = map[string]int32{
		"DCM_status_Enable":  0,
		"DCM_status_Disable": 1,
	}
)

func (x DCMStatus) Enum() *DCMStatus {
	p := new(DCMStatus)
	*p = x
	return p
}

func (x DCMStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DCMStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_dlc_dlc_proto_enumTypes[1].Descriptor()
}

func (DCMStatus) Type() protoreflect.EnumType {
	return &file_bitway_dlc_dlc_proto_enumTypes[1]
}

func (x DCMStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DCMStatus.Descriptor instead.
func (DCMStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{1}
}

type DlcEventType int32

const (
	DlcEventType_UNSPECIFIED DlcEventType = 0
	DlcEventType_PRICE       DlcEventType = 1
	DlcEventType_DATE        DlcEventType = 2
	DlcEventType_LENDING     DlcEventType = 3
)

// Enum value maps for DlcEventType.
var (
	DlcEventType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PRICE",
		2: "DATE",
		3: "LENDING",
	}
	DlcEventType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PRICE":       1,
		"DATE":        2,
		"LENDING":     3,
	}
)

func (x DlcEventType) Enum() *DlcEventType {
	p := new(DlcEventType)
	*p = x
	return p
}

func (x DlcEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DlcEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_dlc_dlc_proto_enumTypes[2].Descriptor()
}

func (DlcEventType) Type() protoreflect.EnumType {
	return &file_bitway_dlc_dlc_proto_enumTypes[2]
}

func (x DlcEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DlcEventType.Descriptor instead.
func (DlcEventType) EnumDescriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{2}
}

// Signing intent
type SigningIntent int32

const (
	SigningIntent_SIGNING_INTENT_DEFAULT SigningIntent = 0
)

// Enum value maps for SigningIntent.
var (
	SigningIntent_name = map[int32]string{
		0: "SIGNING_INTENT_DEFAULT",
	}
	SigningIntent_value = map[string]int32{
		"SIGNING_INTENT_DEFAULT": 0,
	}
)

func (x SigningIntent) Enum() *SigningIntent {
	p := new(SigningIntent)
	*p = x
	return p
}

func (x SigningIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_dlc_dlc_proto_enumTypes[3].Descriptor()
}

func (SigningIntent) Type() protoreflect.EnumType {
	return &file_bitway_dlc_dlc_proto_enumTypes[3]
}

func (x SigningIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningIntent.Descriptor instead.
func (SigningIntent) EnumDescriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{3}
}

// DKG intent
type DKGIntent int32

const (
	DKGIntent_DKG_INTENT_DEFAULT             DKGIntent = 0
	DKGIntent_DKG_INTENT_PRICE_EVENT_NONCE   DKGIntent = 10000
	DKGIntent_DKG_INTENT_DATE_EVENT_NONCE    DKGIntent = 20000
	DKGIntent_DKG_INTENT_LENDING_EVENT_NONCE DKGIntent = 30000
)

// Enum value maps for DKGIntent.
var (
	DKGIntent_name = map[int32]string{
		0:     "DKG_INTENT_DEFAULT",
		10000: "DKG_INTENT_PRICE_EVENT_NONCE",
		20000: "DKG_INTENT_DATE_EVENT_NONCE",
		30000: "DKG_INTENT_LENDING_EVENT_NONCE",
	}
	DKGIntent_value = map[string]int32{
		"DKG_INTENT_DEFAULT":             0,
		"DKG_INTENT_PRICE_EVENT_NONCE":   10000,
		"DKG_INTENT_DATE_EVENT_NONCE":    20000,
		"DKG_INTENT_LENDING_EVENT_NONCE": 30000,
	}
)

func (x DKGIntent) Enum() *DKGIntent {
	p := new(DKGIntent)
	*p = x
	return p
}

func (x DKGIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DKGIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_bitway_dlc_dlc_proto_enumTypes[4].Descriptor()
}

func (DKGIntent) Type() protoreflect.EnumType {
	return &file_bitway_dlc_dlc_proto_enumTypes[4]
}

func (x DKGIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DKGIntent.Descriptor instead.
func (DKGIntent) EnumDescriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{4}
}

type DLCOracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DkgId      uint64                 `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	Desc       string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Pubkey     string                 `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	NonceIndex uint64                 `protobuf:"varint,5,opt,name=nonce_index,json=nonceIndex,proto3" json:"nonce_index,omitempty"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Status     DLCOracleStatus        `protobuf:"varint,7,opt,name=status,proto3,enum=bitway.dlc.DLCOracleStatus" json:"status,omitempty"`
}

func (x *DLCOracle) Reset() {
	*x = DLCOracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCOracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCOracle) ProtoMessage() {}

// Deprecated: Use DLCOracle.ProtoReflect.Descriptor instead.
func (*DLCOracle) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{0}
}

func (x *DLCOracle) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DLCOracle) GetDkgId() uint64 {
	if x != nil {
		return x.DkgId
	}
	return 0
}

func (x *DLCOracle) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DLCOracle) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DLCOracle) GetNonceIndex() uint64 {
	if x != nil {
		return x.NonceIndex
	}
	return 0
}

func (x *DLCOracle) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DLCOracle) GetStatus() DLCOracleStatus {
	if x != nil {
		return x.Status
	}
	return DLCOracleStatus_Oracle_status_Enable
}

type DCM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DkgId  uint64                 `protobuf:"varint,2,opt,name=dkg_id,json=dkgId,proto3" json:"dkg_id,omitempty"`
	Desc   string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Pubkey string                 `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Time   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Status DCMStatus              `protobuf:"varint,6,opt,name=status,proto3,enum=bitway.dlc.DCMStatus" json:"status,omitempty"`
}

func (x *DCM) Reset() {
	*x = DCM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DCM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DCM) ProtoMessage() {}

// Deprecated: Use DCM.ProtoReflect.Descriptor instead.
func (*DCM) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{1}
}

func (x *DCM) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DCM) GetDkgId() uint64 {
	if x != nil {
		return x.DkgId
	}
	return 0
}

func (x *DCM) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DCM) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DCM) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DCM) GetStatus() DCMStatus {
	if x != nil {
		return x.Status
	}
	return DCMStatus_DCM_status_Enable
}

type DLCNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Nonce        string                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OraclePubkey string                 `protobuf:"bytes,3,opt,name=oracle_pubkey,json=oraclePubkey,proto3" json:"oracle_pubkey,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DLCNonce) Reset() {
	*x = DLCNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCNonce) ProtoMessage() {}

// Deprecated: Use DLCNonce.ProtoReflect.Descriptor instead.
func (*DLCNonce) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{2}
}

func (x *DLCNonce) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DLCNonce) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DLCNonce) GetOraclePubkey() string {
	if x != nil {
		return x.OraclePubkey
	}
	return ""
}

func (x *DLCNonce) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type DLCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type_        DlcEventType           `protobuf:"varint,2,opt,name=type,proto3,enum=bitway.dlc.DlcEventType" json:"type,omitempty"`
	Nonce        string                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pubkey       string                 `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Description  string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Outcomes     []string               `protobuf:"bytes,6,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
	HasTriggered bool                   `protobuf:"varint,7,opt,name=has_triggered,json=hasTriggered,proto3" json:"has_triggered,omitempty"`
	OutcomeIndex int32                  `protobuf:"varint,8,opt,name=outcome_index,json=outcomeIndex,proto3" json:"outcome_index,omitempty"`
	PublishAt    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	TriggerAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=trigger_at,json=triggerAt,proto3" json:"trigger_at,omitempty"`
}

func (x *DLCEvent) Reset() {
	*x = DLCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCEvent) ProtoMessage() {}

// Deprecated: Use DLCEvent.ProtoReflect.Descriptor instead.
func (*DLCEvent) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{3}
}

func (x *DLCEvent) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DLCEvent) GetType_() DlcEventType {
	if x != nil {
		return x.Type_
	}
	return DlcEventType_UNSPECIFIED
}

func (x *DLCEvent) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DLCEvent) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DLCEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DLCEvent) GetOutcomes() []string {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *DLCEvent) GetHasTriggered() bool {
	if x != nil {
		return x.HasTriggered
	}
	return false
}

func (x *DLCEvent) GetOutcomeIndex() int32 {
	if x != nil {
		return x.OutcomeIndex
	}
	return 0
}

func (x *DLCEvent) GetPublishAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishAt
	}
	return nil
}

func (x *DLCEvent) GetTriggerAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerAt
	}
	return nil
}

type DLCAttestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId   uint64                 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Outcome   string                 `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Pubkey    string                 `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Time      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DLCAttestation) Reset() {
	*x = DLCAttestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCAttestation) ProtoMessage() {}

// Deprecated: Use DLCAttestation.ProtoReflect.Descriptor instead.
func (*DLCAttestation) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{4}
}

func (x *DLCAttestation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DLCAttestation) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *DLCAttestation) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *DLCAttestation) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DLCAttestation) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *DLCAttestation) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Oracle participant liveness
type OracleParticipantLiveness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consensus pub key
	ConsensusPubkey string `protobuf:"bytes,1,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// Indicates if the participant is alive
	IsAlive bool `protobuf:"varint,2,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	// Id of the last participating DKG
	LastDkgId uint64 `protobuf:"varint,3,opt,name=last_dkg_id,json=lastDkgId,proto3" json:"last_dkg_id,omitempty"`
	// last block height at which the participant was active
	LastBlockHeight int64 `protobuf:"varint,4,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (x *OracleParticipantLiveness) Reset() {
	*x = OracleParticipantLiveness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitway_dlc_dlc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleParticipantLiveness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleParticipantLiveness) ProtoMessage() {}

// Deprecated: Use OracleParticipantLiveness.ProtoReflect.Descriptor instead.
func (*OracleParticipantLiveness) Descriptor() ([]byte, []int) {
	return file_bitway_dlc_dlc_proto_rawDescGZIP(), []int{5}
}

func (x *OracleParticipantLiveness) GetConsensusPubkey() string {
	if x != nil {
		return x.ConsensusPubkey
	}
	return ""
}

func (x *OracleParticipantLiveness) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *OracleParticipantLiveness) GetLastDkgId() uint64 {
	if x != nil {
		return x.LastDkgId
	}
	return 0
}

func (x *OracleParticipantLiveness) GetLastBlockHeight() int64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

var File_bitway_dlc_dlc_proto protoreflect.FileDescriptor

var file_bitway_dlc_dlc_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x6c, 0x63, 0x2f, 0x64, 0x6c, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x6c, 0x63, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x44, 0x4c,
	0x43, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6b, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6b, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x6c, 0x63, 0x2e, 0x44, 0x4c, 0x43, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x03, 0x44,
	0x43, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6b, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x64, 0x6b, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x6c, 0x63, 0x2e, 0x44, 0x43, 0x4d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x08, 0x44, 0x4c, 0x43, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x08, 0x44, 0x4c, 0x43, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x6c, 0x63, 0x2e, 0x44,
	0x6c, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0a,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41,
	0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x44, 0x4c, 0x43, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6b, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6b, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2a, 0x46, 0x0a, 0x0f, 0x44, 0x4c, 0x43,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x01, 0x2a, 0x3a, 0x0a, 0x09, 0x44, 0x43, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x43, 0x4d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x4d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x2a, 0x41, 0x0a,
	0x0c, 0x44, 0x6c, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x2a, 0x2b, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x2a, 0x8f, 0x01,
	0x0a, 0x09, 0x44, 0x4b, 0x47, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x4b, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x4b, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x4e, 0x43, 0x45, 0x10, 0x90, 0x4e, 0x12, 0x21, 0x0a, 0x1b, 0x44, 0x4b, 0x47, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x44, 0x4b, 0x47,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0xb0, 0xea, 0x01, 0x42,
	0x90, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x6c, 0x63, 0x42, 0x08, 0x44, 0x6c, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x74, 0x77, 0x61,
	0x79, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x6c, 0x63, 0xa2, 0x02, 0x03, 0x42, 0x44,
	0x58, 0xaa, 0x02, 0x0a, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6c, 0x63, 0xca, 0x02,
	0x0a, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79, 0x5c, 0x44, 0x6c, 0x63, 0xe2, 0x02, 0x16, 0x42, 0x69,
	0x74, 0x77, 0x61, 0x79, 0x5c, 0x44, 0x6c, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x42, 0x69, 0x74, 0x77, 0x61, 0x79, 0x3a, 0x3a, 0x44,
	0x6c, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bitway_dlc_dlc_proto_rawDescOnce sync.Once
	file_bitway_dlc_dlc_proto_rawDescData = file_bitway_dlc_dlc_proto_rawDesc
)

func file_bitway_dlc_dlc_proto_rawDescGZIP() []byte {
	file_bitway_dlc_dlc_proto_rawDescOnce.Do(func() {
		file_bitway_dlc_dlc_proto_rawDescData = protoimpl.X.CompressGZIP(file_bitway_dlc_dlc_proto_rawDescData)
	})
	return file_bitway_dlc_dlc_proto_rawDescData
}

var file_bitway_dlc_dlc_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bitway_dlc_dlc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bitway_dlc_dlc_proto_goTypes = []interface{}{
	(DLCOracleStatus)(0),              // 0: bitway.dlc.DLCOracleStatus
	(DCMStatus)(0),                    // 1: bitway.dlc.DCMStatus
	(DlcEventType)(0),                 // 2: bitway.dlc.DlcEventType
	(SigningIntent)(0),                // 3: bitway.dlc.SigningIntent
	(DKGIntent)(0),                    // 4: bitway.dlc.DKGIntent
	(*DLCOracle)(nil),                 // 5: bitway.dlc.DLCOracle
	(*DCM)(nil),                       // 6: bitway.dlc.DCM
	(*DLCNonce)(nil),                  // 7: bitway.dlc.DLCNonce
	(*DLCEvent)(nil),                  // 8: bitway.dlc.DLCEvent
	(*DLCAttestation)(nil),            // 9: bitway.dlc.DLCAttestation
	(*OracleParticipantLiveness)(nil), // 10: bitway.dlc.OracleParticipantLiveness
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
}
var file_bitway_dlc_dlc_proto_depIdxs = []int32{
	11, // 0: bitway.dlc.DLCOracle.time:type_name -> google.protobuf.Timestamp
	0,  // 1: bitway.dlc.DLCOracle.status:type_name -> bitway.dlc.DLCOracleStatus
	11, // 2: bitway.dlc.DCM.time:type_name -> google.protobuf.Timestamp
	1,  // 3: bitway.dlc.DCM.status:type_name -> bitway.dlc.DCMStatus
	11, // 4: bitway.dlc.DLCNonce.time:type_name -> google.protobuf.Timestamp
	2,  // 5: bitway.dlc.DLCEvent.type:type_name -> bitway.dlc.DlcEventType
	11, // 6: bitway.dlc.DLCEvent.publish_at:type_name -> google.protobuf.Timestamp
	11, // 7: bitway.dlc.DLCEvent.trigger_at:type_name -> google.protobuf.Timestamp
	11, // 8: bitway.dlc.DLCAttestation.time:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_bitway_dlc_dlc_proto_init() }
func file_bitway_dlc_dlc_proto_init() {
	if File_bitway_dlc_dlc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bitway_dlc_dlc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCOracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_dlc_dlc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DCM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_dlc_dlc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_dlc_dlc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_dlc_dlc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCAttestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitway_dlc_dlc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleParticipantLiveness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bitway_dlc_dlc_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bitway_dlc_dlc_proto_goTypes,
		DependencyIndexes: file_bitway_dlc_dlc_proto_depIdxs,
		EnumInfos:         file_bitway_dlc_dlc_proto_enumTypes,
		MessageInfos:      file_bitway_dlc_dlc_proto_msgTypes,
	}.Build()
	File_bitway_dlc_dlc_proto = out.File
	file_bitway_dlc_dlc_proto_rawDesc = nil
	file_bitway_dlc_dlc_proto_goTypes = nil
	file_bitway_dlc_dlc_proto_depIdxs = nil
}
