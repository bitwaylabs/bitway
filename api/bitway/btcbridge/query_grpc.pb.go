// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitway/btcbridge/query.proto

package btcbridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_QueryParams_FullMethodName                        = "/bitway.btcbridge.Query/QueryParams"
	Query_QueryFeeRate_FullMethodName                       = "/bitway.btcbridge.Query/QueryFeeRate"
	Query_QueryWithdrawalNetworkFee_FullMethodName          = "/bitway.btcbridge.Query/QueryWithdrawalNetworkFee"
	Query_QueryWithdrawRequestsByAddress_FullMethodName     = "/bitway.btcbridge.Query/QueryWithdrawRequestsByAddress"
	Query_QueryWithdrawRequestsByTxHash_FullMethodName      = "/bitway.btcbridge.Query/QueryWithdrawRequestsByTxHash"
	Query_QueryPendingBtcWithdrawRequests_FullMethodName    = "/bitway.btcbridge.Query/QueryPendingBtcWithdrawRequests"
	Query_QuerySigningRequest_FullMethodName                = "/bitway.btcbridge.Query/QuerySigningRequest"
	Query_QuerySigningRequests_FullMethodName               = "/bitway.btcbridge.Query/QuerySigningRequests"
	Query_QuerySigningRequestsByAddress_FullMethodName      = "/bitway.btcbridge.Query/QuerySigningRequestsByAddress"
	Query_QuerySigningRequestByTxHash_FullMethodName        = "/bitway.btcbridge.Query/QuerySigningRequestByTxHash"
	Query_QueryPendingSigningRequests_FullMethodName        = "/bitway.btcbridge.Query/QueryPendingSigningRequests"
	Query_QueryUTXOs_FullMethodName                         = "/bitway.btcbridge.Query/QueryUTXOs"
	Query_QueryUTXOsByAddress_FullMethodName                = "/bitway.btcbridge.Query/QueryUTXOsByAddress"
	Query_QueryUTXOCountAndBalancesByAddress_FullMethodName = "/bitway.btcbridge.Query/QueryUTXOCountAndBalancesByAddress"
	Query_QueryDKGRequest_FullMethodName                    = "/bitway.btcbridge.Query/QueryDKGRequest"
	Query_QueryDKGRequests_FullMethodName                   = "/bitway.btcbridge.Query/QueryDKGRequests"
	Query_QueryAllDKGRequests_FullMethodName                = "/bitway.btcbridge.Query/QueryAllDKGRequests"
	Query_QueryDKGCompletionRequests_FullMethodName         = "/bitway.btcbridge.Query/QueryDKGCompletionRequests"
	Query_QueryRefreshingRequest_FullMethodName             = "/bitway.btcbridge.Query/QueryRefreshingRequest"
	Query_QueryRefreshingRequests_FullMethodName            = "/bitway.btcbridge.Query/QueryRefreshingRequests"
	Query_QueryRefreshingCompletions_FullMethodName         = "/bitway.btcbridge.Query/QueryRefreshingCompletions"
	Query_QueryIBCDepositScript_FullMethodName              = "/bitway.btcbridge.Query/QueryIBCDepositScript"
	Query_QueryRateLimit_FullMethodName                     = "/bitway.btcbridge.Query/QueryRateLimit"
	Query_QueryRateLimitByAddress_FullMethodName            = "/bitway.btcbridge.Query/QueryRateLimitByAddress"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryFeeRate queries the bitcoin network fee rate on the bitway chain.
	QueryFeeRate(ctx context.Context, in *QueryFeeRateRequest, opts ...grpc.CallOption) (*QueryFeeRateResponse, error)
	// QueryWithdrawalNetworkFee queries the estimated btc network fee for the given withdrawal.
	QueryWithdrawalNetworkFee(ctx context.Context, in *QueryWithdrawalNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawalNetworkFeeResponse, error)
	// QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
	QueryWithdrawRequestsByAddress(ctx context.Context, in *QueryWithdrawRequestsByAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByAddressResponse, error)
	// QueryWithdrawRequestsByTxHash queries the withdrawal requests by the given tx hash.
	QueryWithdrawRequestsByTxHash(ctx context.Context, in *QueryWithdrawRequestsByTxHashRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByTxHashResponse, error)
	// QueryPendingBtcWithdrawRequests queries the pending btc withdrawal requests.
	QueryPendingBtcWithdrawRequests(ctx context.Context, in *QueryPendingBtcWithdrawRequestsRequest, opts ...grpc.CallOption) (*QueryPendingBtcWithdrawRequestsResponse, error)
	// QuerySigningRequest queries the signing requests by sequence.
	QuerySigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error)
	// QueryPendingSigningRequests queries the pending signing requests.
	QueryPendingSigningRequests(ctx context.Context, in *QueryPendingSigningRequestsRequest, opts ...grpc.CallOption) (*QueryPendingSigningRequestsResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error)
	// QueryRefreshingRequest queries the refreshing request by the given id.
	QueryRefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error)
	// QueryRefreshingRequests queries the refreshing requests by the given status.
	QueryRefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error)
	// QueryRefreshingCompletions queries refreshing completions by the given request id.
	QueryRefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error)
	// QueryIBCDepositScript queries the deposit OP_RETURN script for cross-chain via IBC.
	QueryIBCDepositScript(ctx context.Context, in *QueryIBCDepositScriptRequest, opts ...grpc.CallOption) (*QueryIBCDepositScriptResponse, error)
	// QueryRateLimit queries the current rate limit
	QueryRateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error)
	// QueryRateLimitByAddress queries the current rate limit by the given address
	QueryRateLimitByAddress(ctx context.Context, in *QueryRateLimitByAddressRequest, opts ...grpc.CallOption) (*QueryRateLimitByAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_QueryParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryFeeRate(ctx context.Context, in *QueryFeeRateRequest, opts ...grpc.CallOption) (*QueryFeeRateResponse, error) {
	out := new(QueryFeeRateResponse)
	err := c.cc.Invoke(ctx, Query_QueryFeeRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawalNetworkFee(ctx context.Context, in *QueryWithdrawalNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawalNetworkFeeResponse, error) {
	out := new(QueryWithdrawalNetworkFeeResponse)
	err := c.cc.Invoke(ctx, Query_QueryWithdrawalNetworkFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawRequestsByAddress(ctx context.Context, in *QueryWithdrawRequestsByAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByAddressResponse, error) {
	out := new(QueryWithdrawRequestsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_QueryWithdrawRequestsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawRequestsByTxHash(ctx context.Context, in *QueryWithdrawRequestsByTxHashRequest, opts ...grpc.CallOption) (*QueryWithdrawRequestsByTxHashResponse, error) {
	out := new(QueryWithdrawRequestsByTxHashResponse)
	err := c.cc.Invoke(ctx, Query_QueryWithdrawRequestsByTxHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingBtcWithdrawRequests(ctx context.Context, in *QueryPendingBtcWithdrawRequestsRequest, opts ...grpc.CallOption) (*QueryPendingBtcWithdrawRequestsResponse, error) {
	out := new(QueryPendingBtcWithdrawRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryPendingBtcWithdrawRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequest(ctx context.Context, in *QuerySigningRequestRequest, opts ...grpc.CallOption) (*QuerySigningRequestResponse, error) {
	out := new(QuerySigningRequestResponse)
	err := c.cc.Invoke(ctx, Query_QuerySigningRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error) {
	out := new(QuerySigningRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QuerySigningRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error) {
	out := new(QuerySigningRequestsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_QuerySigningRequestsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error) {
	out := new(QuerySigningRequestByTxHashResponse)
	err := c.cc.Invoke(ctx, Query_QuerySigningRequestByTxHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPendingSigningRequests(ctx context.Context, in *QueryPendingSigningRequestsRequest, opts ...grpc.CallOption) (*QueryPendingSigningRequestsResponse, error) {
	out := new(QueryPendingSigningRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryPendingSigningRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error) {
	out := new(QueryUTXOsResponse)
	err := c.cc.Invoke(ctx, Query_QueryUTXOs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error) {
	out := new(QueryUTXOsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_QueryUTXOsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	out := new(QueryUTXOCountAndBalancesByAddressResponse)
	err := c.cc.Invoke(ctx, Query_QueryUTXOCountAndBalancesByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error) {
	out := new(QueryDKGRequestResponse)
	err := c.cc.Invoke(ctx, Query_QueryDKGRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error) {
	out := new(QueryDKGRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryDKGRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error) {
	out := new(QueryAllDKGRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryAllDKGRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error) {
	out := new(QueryDKGCompletionRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryDKGCompletionRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingRequest(ctx context.Context, in *QueryRefreshingRequestRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestResponse, error) {
	out := new(QueryRefreshingRequestResponse)
	err := c.cc.Invoke(ctx, Query_QueryRefreshingRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingRequests(ctx context.Context, in *QueryRefreshingRequestsRequest, opts ...grpc.CallOption) (*QueryRefreshingRequestsResponse, error) {
	out := new(QueryRefreshingRequestsResponse)
	err := c.cc.Invoke(ctx, Query_QueryRefreshingRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRefreshingCompletions(ctx context.Context, in *QueryRefreshingCompletionsRequest, opts ...grpc.CallOption) (*QueryRefreshingCompletionsResponse, error) {
	out := new(QueryRefreshingCompletionsResponse)
	err := c.cc.Invoke(ctx, Query_QueryRefreshingCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIBCDepositScript(ctx context.Context, in *QueryIBCDepositScriptRequest, opts ...grpc.CallOption) (*QueryIBCDepositScriptResponse, error) {
	out := new(QueryIBCDepositScriptResponse)
	err := c.cc.Invoke(ctx, Query_QueryIBCDepositScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRateLimit(ctx context.Context, in *QueryRateLimitRequest, opts ...grpc.CallOption) (*QueryRateLimitResponse, error) {
	out := new(QueryRateLimitResponse)
	err := c.cc.Invoke(ctx, Query_QueryRateLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRateLimitByAddress(ctx context.Context, in *QueryRateLimitByAddressRequest, opts ...grpc.CallOption) (*QueryRateLimitByAddressResponse, error) {
	out := new(QueryRateLimitByAddressResponse)
	err := c.cc.Invoke(ctx, Query_QueryRateLimitByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryFeeRate queries the bitcoin network fee rate on the bitway chain.
	QueryFeeRate(context.Context, *QueryFeeRateRequest) (*QueryFeeRateResponse, error)
	// QueryWithdrawalNetworkFee queries the estimated btc network fee for the given withdrawal.
	QueryWithdrawalNetworkFee(context.Context, *QueryWithdrawalNetworkFeeRequest) (*QueryWithdrawalNetworkFeeResponse, error)
	// QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
	QueryWithdrawRequestsByAddress(context.Context, *QueryWithdrawRequestsByAddressRequest) (*QueryWithdrawRequestsByAddressResponse, error)
	// QueryWithdrawRequestsByTxHash queries the withdrawal requests by the given tx hash.
	QueryWithdrawRequestsByTxHash(context.Context, *QueryWithdrawRequestsByTxHashRequest) (*QueryWithdrawRequestsByTxHashResponse, error)
	// QueryPendingBtcWithdrawRequests queries the pending btc withdrawal requests.
	QueryPendingBtcWithdrawRequests(context.Context, *QueryPendingBtcWithdrawRequestsRequest) (*QueryPendingBtcWithdrawRequestsResponse, error)
	// QuerySigningRequest queries the signing requests by sequence.
	QuerySigningRequest(context.Context, *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(context.Context, *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(context.Context, *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error)
	// QueryPendingSigningRequests queries the pending signing requests.
	QueryPendingSigningRequests(context.Context, *QueryPendingSigningRequestsRequest) (*QueryPendingSigningRequestsResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(context.Context, *QueryUTXOsRequest) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(context.Context, *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(context.Context, *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(context.Context, *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(context.Context, *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error)
	// QueryRefreshingRequest queries the refreshing request by the given id.
	QueryRefreshingRequest(context.Context, *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error)
	// QueryRefreshingRequests queries the refreshing requests by the given status.
	QueryRefreshingRequests(context.Context, *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error)
	// QueryRefreshingCompletions queries refreshing completions by the given request id.
	QueryRefreshingCompletions(context.Context, *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error)
	// QueryIBCDepositScript queries the deposit OP_RETURN script for cross-chain via IBC.
	QueryIBCDepositScript(context.Context, *QueryIBCDepositScriptRequest) (*QueryIBCDepositScriptResponse, error)
	// QueryRateLimit queries the current rate limit
	QueryRateLimit(context.Context, *QueryRateLimitRequest) (*QueryRateLimitResponse, error)
	// QueryRateLimitByAddress queries the current rate limit by the given address
	QueryRateLimitByAddress(context.Context, *QueryRateLimitByAddressRequest) (*QueryRateLimitByAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (UnimplementedQueryServer) QueryFeeRate(context.Context, *QueryFeeRateRequest) (*QueryFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeeRate not implemented")
}
func (UnimplementedQueryServer) QueryWithdrawalNetworkFee(context.Context, *QueryWithdrawalNetworkFeeRequest) (*QueryWithdrawalNetworkFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawalNetworkFee not implemented")
}
func (UnimplementedQueryServer) QueryWithdrawRequestsByAddress(context.Context, *QueryWithdrawRequestsByAddressRequest) (*QueryWithdrawRequestsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawRequestsByAddress not implemented")
}
func (UnimplementedQueryServer) QueryWithdrawRequestsByTxHash(context.Context, *QueryWithdrawRequestsByTxHashRequest) (*QueryWithdrawRequestsByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawRequestsByTxHash not implemented")
}
func (UnimplementedQueryServer) QueryPendingBtcWithdrawRequests(context.Context, *QueryPendingBtcWithdrawRequestsRequest) (*QueryPendingBtcWithdrawRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingBtcWithdrawRequests not implemented")
}
func (UnimplementedQueryServer) QuerySigningRequest(context.Context, *QuerySigningRequestRequest) (*QuerySigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequest not implemented")
}
func (UnimplementedQueryServer) QuerySigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequests not implemented")
}
func (UnimplementedQueryServer) QuerySigningRequestsByAddress(context.Context, *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestsByAddress not implemented")
}
func (UnimplementedQueryServer) QuerySigningRequestByTxHash(context.Context, *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestByTxHash not implemented")
}
func (UnimplementedQueryServer) QueryPendingSigningRequests(context.Context, *QueryPendingSigningRequestsRequest) (*QueryPendingSigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingSigningRequests not implemented")
}
func (UnimplementedQueryServer) QueryUTXOs(context.Context, *QueryUTXOsRequest) (*QueryUTXOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOs not implemented")
}
func (UnimplementedQueryServer) QueryUTXOsByAddress(context.Context, *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOsByAddress not implemented")
}
func (UnimplementedQueryServer) QueryUTXOCountAndBalancesByAddress(context.Context, *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOCountAndBalancesByAddress not implemented")
}
func (UnimplementedQueryServer) QueryDKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequest not implemented")
}
func (UnimplementedQueryServer) QueryDKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequests not implemented")
}
func (UnimplementedQueryServer) QueryAllDKGRequests(context.Context, *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllDKGRequests not implemented")
}
func (UnimplementedQueryServer) QueryDKGCompletionRequests(context.Context, *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGCompletionRequests not implemented")
}
func (UnimplementedQueryServer) QueryRefreshingRequest(context.Context, *QueryRefreshingRequestRequest) (*QueryRefreshingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingRequest not implemented")
}
func (UnimplementedQueryServer) QueryRefreshingRequests(context.Context, *QueryRefreshingRequestsRequest) (*QueryRefreshingRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingRequests not implemented")
}
func (UnimplementedQueryServer) QueryRefreshingCompletions(context.Context, *QueryRefreshingCompletionsRequest) (*QueryRefreshingCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefreshingCompletions not implemented")
}
func (UnimplementedQueryServer) QueryIBCDepositScript(context.Context, *QueryIBCDepositScriptRequest) (*QueryIBCDepositScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIBCDepositScript not implemented")
}
func (UnimplementedQueryServer) QueryRateLimit(context.Context, *QueryRateLimitRequest) (*QueryRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRateLimit not implemented")
}
func (UnimplementedQueryServer) QueryRateLimitByAddress(context.Context, *QueryRateLimitByAddressRequest) (*QueryRateLimitByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRateLimitByAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryFeeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryFeeRate(ctx, req.(*QueryFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawalNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalNetworkFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawalNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryWithdrawalNetworkFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawalNetworkFee(ctx, req.(*QueryWithdrawalNetworkFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawRequestsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawRequestsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawRequestsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryWithdrawRequestsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawRequestsByAddress(ctx, req.(*QueryWithdrawRequestsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawRequestsByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawRequestsByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawRequestsByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryWithdrawRequestsByTxHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawRequestsByTxHash(ctx, req.(*QueryWithdrawRequestsByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingBtcWithdrawRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingBtcWithdrawRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingBtcWithdrawRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPendingBtcWithdrawRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingBtcWithdrawRequests(ctx, req.(*QueryPendingBtcWithdrawRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySigningRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequest(ctx, req.(*QuerySigningRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySigningRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequests(ctx, req.(*QuerySigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySigningRequestsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, req.(*QuerySigningRequestsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySigningRequestByTxHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, req.(*QuerySigningRequestByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPendingSigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPendingSigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPendingSigningRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPendingSigningRequests(ctx, req.(*QueryPendingSigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryUTXOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOs(ctx, req.(*QueryUTXOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryUTXOsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, req.(*QueryUTXOsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOCountAndBalancesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOCountAndBalancesByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryUTXOCountAndBalancesByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, req.(*QueryUTXOCountAndBalancesByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryDKGRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequest(ctx, req.(*QueryDKGRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryDKGRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequests(ctx, req.(*QueryDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryAllDKGRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, req.(*QueryAllDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGCompletionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGCompletionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryDKGCompletionRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, req.(*QueryDKGCompletionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRefreshingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingRequest(ctx, req.(*QueryRefreshingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRefreshingRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingRequests(ctx, req.(*QueryRefreshingRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRefreshingCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefreshingCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRefreshingCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRefreshingCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRefreshingCompletions(ctx, req.(*QueryRefreshingCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIBCDepositScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCDepositScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIBCDepositScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryIBCDepositScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIBCDepositScript(ctx, req.(*QueryIBCDepositScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRateLimit(ctx, req.(*QueryRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRateLimitByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRateLimitByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRateLimitByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRateLimitByAddress(ctx, req.(*QueryRateLimitByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.btcbridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryFeeRate",
			Handler:    _Query_QueryFeeRate_Handler,
		},
		{
			MethodName: "QueryWithdrawalNetworkFee",
			Handler:    _Query_QueryWithdrawalNetworkFee_Handler,
		},
		{
			MethodName: "QueryWithdrawRequestsByAddress",
			Handler:    _Query_QueryWithdrawRequestsByAddress_Handler,
		},
		{
			MethodName: "QueryWithdrawRequestsByTxHash",
			Handler:    _Query_QueryWithdrawRequestsByTxHash_Handler,
		},
		{
			MethodName: "QueryPendingBtcWithdrawRequests",
			Handler:    _Query_QueryPendingBtcWithdrawRequests_Handler,
		},
		{
			MethodName: "QuerySigningRequest",
			Handler:    _Query_QuerySigningRequest_Handler,
		},
		{
			MethodName: "QuerySigningRequests",
			Handler:    _Query_QuerySigningRequests_Handler,
		},
		{
			MethodName: "QuerySigningRequestsByAddress",
			Handler:    _Query_QuerySigningRequestsByAddress_Handler,
		},
		{
			MethodName: "QuerySigningRequestByTxHash",
			Handler:    _Query_QuerySigningRequestByTxHash_Handler,
		},
		{
			MethodName: "QueryPendingSigningRequests",
			Handler:    _Query_QueryPendingSigningRequests_Handler,
		},
		{
			MethodName: "QueryUTXOs",
			Handler:    _Query_QueryUTXOs_Handler,
		},
		{
			MethodName: "QueryUTXOsByAddress",
			Handler:    _Query_QueryUTXOsByAddress_Handler,
		},
		{
			MethodName: "QueryUTXOCountAndBalancesByAddress",
			Handler:    _Query_QueryUTXOCountAndBalancesByAddress_Handler,
		},
		{
			MethodName: "QueryDKGRequest",
			Handler:    _Query_QueryDKGRequest_Handler,
		},
		{
			MethodName: "QueryDKGRequests",
			Handler:    _Query_QueryDKGRequests_Handler,
		},
		{
			MethodName: "QueryAllDKGRequests",
			Handler:    _Query_QueryAllDKGRequests_Handler,
		},
		{
			MethodName: "QueryDKGCompletionRequests",
			Handler:    _Query_QueryDKGCompletionRequests_Handler,
		},
		{
			MethodName: "QueryRefreshingRequest",
			Handler:    _Query_QueryRefreshingRequest_Handler,
		},
		{
			MethodName: "QueryRefreshingRequests",
			Handler:    _Query_QueryRefreshingRequests_Handler,
		},
		{
			MethodName: "QueryRefreshingCompletions",
			Handler:    _Query_QueryRefreshingCompletions_Handler,
		},
		{
			MethodName: "QueryIBCDepositScript",
			Handler:    _Query_QueryIBCDepositScript_Handler,
		},
		{
			MethodName: "QueryRateLimit",
			Handler:    _Query_QueryRateLimit_Handler,
		},
		{
			MethodName: "QueryRateLimitByAddress",
			Handler:    _Query_QueryRateLimitByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/btcbridge/query.proto",
}
