// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitway/oracle/query.proto

package oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                   = "/bitway.oracle.Query/Params"
	Query_ListPrices_FullMethodName               = "/bitway.oracle.Query/ListPrices"
	Query_GetPriceBySymbol_FullMethodName         = "/bitway.oracle.Query/GetPriceBySymbol"
	Query_QueryChainTip_FullMethodName            = "/bitway.oracle.Query/QueryChainTip"
	Query_QueryBlockHeaderByHeight_FullMethodName = "/bitway.oracle.Query/QueryBlockHeaderByHeight"
	Query_QueryBlockHeaderByHash_FullMethodName   = "/bitway.oracle.Query/QueryBlockHeaderByHash"
	Query_QueryBestBlockHeader_FullMethodName     = "/bitway.oracle.Query/QueryBestBlockHeader"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListPrices queries all oracle prices.
	ListPrices(ctx context.Context, in *QueryListPricesRequest, opts ...grpc.CallOption) (*QueryListPricesResponse, error)
	// GetPrice queries the oracle price by symbol.
	GetPriceBySymbol(ctx context.Context, in *QueryGetPriceBySymbolRequest, opts ...grpc.CallOption) (*QueryGetPriceBySymbolResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error)
	// BestBlockHeader queries the best block header.
	QueryBestBlockHeader(ctx context.Context, in *QueryBestBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBestBlockHeaderResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPrices(ctx context.Context, in *QueryListPricesRequest, opts ...grpc.CallOption) (*QueryListPricesResponse, error) {
	out := new(QueryListPricesResponse)
	err := c.cc.Invoke(ctx, Query_ListPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPriceBySymbol(ctx context.Context, in *QueryGetPriceBySymbolRequest, opts ...grpc.CallOption) (*QueryGetPriceBySymbolResponse, error) {
	out := new(QueryGetPriceBySymbolResponse)
	err := c.cc.Invoke(ctx, Query_GetPriceBySymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error) {
	out := new(QueryChainTipResponse)
	err := c.cc.Invoke(ctx, Query_QueryChainTip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error) {
	out := new(QueryBlockHeaderByHeightResponse)
	err := c.cc.Invoke(ctx, Query_QueryBlockHeaderByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error) {
	out := new(QueryBlockHeaderByHashResponse)
	err := c.cc.Invoke(ctx, Query_QueryBlockHeaderByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBestBlockHeader(ctx context.Context, in *QueryBestBlockHeaderRequest, opts ...grpc.CallOption) (*QueryBestBlockHeaderResponse, error) {
	out := new(QueryBestBlockHeaderResponse)
	err := c.cc.Invoke(ctx, Query_QueryBestBlockHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListPrices queries all oracle prices.
	ListPrices(context.Context, *QueryListPricesRequest) (*QueryListPricesResponse, error)
	// GetPrice queries the oracle price by symbol.
	GetPriceBySymbol(context.Context, *QueryGetPriceBySymbolRequest) (*QueryGetPriceBySymbolResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(context.Context, *QueryChainTipRequest) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(context.Context, *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(context.Context, *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error)
	// BestBlockHeader queries the best block header.
	QueryBestBlockHeader(context.Context, *QueryBestBlockHeaderRequest) (*QueryBestBlockHeaderResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ListPrices(context.Context, *QueryListPricesRequest) (*QueryListPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrices not implemented")
}
func (UnimplementedQueryServer) GetPriceBySymbol(context.Context, *QueryGetPriceBySymbolRequest) (*QueryGetPriceBySymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceBySymbol not implemented")
}
func (UnimplementedQueryServer) QueryChainTip(context.Context, *QueryChainTipRequest) (*QueryChainTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainTip not implemented")
}
func (UnimplementedQueryServer) QueryBlockHeaderByHeight(context.Context, *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHeight not implemented")
}
func (UnimplementedQueryServer) QueryBlockHeaderByHash(context.Context, *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHash not implemented")
}
func (UnimplementedQueryServer) QueryBestBlockHeader(context.Context, *QueryBestBlockHeaderRequest) (*QueryBestBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBestBlockHeader not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPrices(ctx, req.(*QueryListPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPriceBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceBySymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPriceBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPriceBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPriceBySymbol(ctx, req.(*QueryGetPriceBySymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryChainTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryChainTip(ctx, req.(*QueryChainTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryBlockHeaderByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, req.(*QueryBlockHeaderByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryBlockHeaderByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, req.(*QueryBlockHeaderByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBestBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBestBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBestBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryBestBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBestBlockHeader(ctx, req.(*QueryBestBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitway.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListPrices",
			Handler:    _Query_ListPrices_Handler,
		},
		{
			MethodName: "GetPriceBySymbol",
			Handler:    _Query_GetPriceBySymbol_Handler,
		},
		{
			MethodName: "QueryChainTip",
			Handler:    _Query_QueryChainTip_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHeight",
			Handler:    _Query_QueryBlockHeaderByHeight_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHash",
			Handler:    _Query_QueryBlockHeaderByHash_Handler,
		},
		{
			MethodName: "QueryBestBlockHeader",
			Handler:    _Query_QueryBestBlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitway/oracle/query.proto",
}
